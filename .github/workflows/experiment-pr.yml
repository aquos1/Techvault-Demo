name: Experiment PR Automation

on:
  push:
    branches: ['exp/*']
  pull_request:
    types: [opened, synchronize, closed]
    branches: [main]

jobs:
  auto-pr-management:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'dh25-demo-site/package-lock.json'

      - name: Install dependencies
        working-directory: ./dh25-demo-site
        run: npm ci

      - name: Extract experiment key
        id: extract-key
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Extract from branch name
            BRANCH_NAME="${{ github.ref_name }}"
            EXPERIMENT_KEY="${BRANCH_NAME#exp/}"
          else
            # Extract from PR head branch
            HEAD_REF="${{ github.head_ref }}"
            EXPERIMENT_KEY="${HEAD_REF#exp/}"
          fi
          echo "experiment_key=$EXPERIMENT_KEY" >> $GITHUB_OUTPUT
          echo "Experiment key: $EXPERIMENT_KEY"

      - name: Auto-assign reviewers
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const experimentKey = '${{ steps.extract-key.outputs.experiment_key }}';
            
            // Auto-assign reviewers based on experiment type
            const reviewers = ['yashpersonal']; // Add your team members here
            
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              reviewers: reviewers
            });
            
            console.log(`Assigned reviewers to experiment PR: ${experimentKey}`);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add experiment labels
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const experimentKey = '${{ steps.extract-key.outputs.experiment_key }}';
            
            // Add labels to the PR
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: ['experiment', 'automated', `exp-${experimentKey}`]
            });
            
            console.log(`Added labels to experiment PR: ${experimentKey}`);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check experiment status
        if: github.event_name == 'pull_request'
        working-directory: ./dh25-demo-site
        run: npm run experiment:status ${{ steps.extract-key.outputs.experiment_key }}
        env:
          NEXT_PUBLIC_STATSIG_CLIENT_KEY: ${{ secrets.NEXT_PUBLIC_STATSIG_CLIENT_KEY }}
          STATSIG_CONSOLE_API_KEY: ${{ secrets.STATSIG_CONSOLE_API_KEY }}
          NEXT_PUBLIC_STATSIG_TIER: ${{ secrets.NEXT_PUBLIC_STATSIG_TIER || 'development' }}

      - name: Auto-merge approved experiments
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == false
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const experimentKey = '${{ steps.extract-key.outputs.experiment_key }}';
            
            // Check if PR is approved and ready to merge
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const approvals = reviews.data.filter(review => 
              review.state === 'APPROVED' && review.user.type !== 'Bot'
            );
            
            if (approvals.length >= 1 && pr.mergeable === true) {
              // Auto-merge the PR
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                merge_method: 'squash',
                commit_title: `feat(experiment): ${experimentKey}`,
                commit_message: `Automated merge of experiment ${experimentKey}`
              });
              
              console.log(`Auto-merged experiment PR: ${experimentKey}`);
            } else {
              console.log(`PR not ready for auto-merge. Approvals: ${approvals.length}, Mergeable: ${pr.mergeable}`);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up experiment branch
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: actions/github-script@v7
        with:
          script: |
            const experimentKey = '${{ steps.extract-key.outputs.experiment_key }}';
            const branchName = `exp/${experimentKey}`;
            
            // Delete the experiment branch after merge
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${branchName}`
              });
              
              console.log(`Deleted experiment branch: ${branchName}`);
            } catch (error) {
              console.log(`Could not delete branch ${branchName}:`, error.message);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post merge notification
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        run: |
          EXPERIMENT_KEY="${{ steps.extract-key.outputs.experiment_key }}"
          echo "ðŸŽ‰ Experiment $EXPERIMENT_KEY has been merged to main!"
          echo "The experiment will be activated automatically via the activation workflow."
