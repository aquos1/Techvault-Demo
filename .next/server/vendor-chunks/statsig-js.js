"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/statsig-js";
exports.ids = ["vendor-chunks/statsig-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/statsig-js/dist/DynamicConfig.js":
/*!*******************************************************!*\
  !*** ./node_modules/statsig-js/dist/DynamicConfig.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar DynamicConfig = /** @class */ (function () {\n    function DynamicConfig(configName, configValue, ruleID, evaluationDetails, secondaryExposures, allocatedExperimentName, onDefaultValueFallback, groupName, idType, isExperimentActive) {\n        if (secondaryExposures === void 0) { secondaryExposures = []; }\n        if (allocatedExperimentName === void 0) { allocatedExperimentName = ''; }\n        if (onDefaultValueFallback === void 0) { onDefaultValueFallback = null; }\n        if (groupName === void 0) { groupName = null; }\n        if (idType === void 0) { idType = null; }\n        if (isExperimentActive === void 0) { isExperimentActive = null; }\n        this.onDefaultValueFallback = null;\n        this.name = configName;\n        this.value = JSON.parse(JSON.stringify(configValue !== null && configValue !== void 0 ? configValue : {}));\n        this.ruleID = ruleID !== null && ruleID !== void 0 ? ruleID : '';\n        this.secondaryExposures = secondaryExposures;\n        this.allocatedExperimentName = allocatedExperimentName;\n        this.evaluationDetails = evaluationDetails;\n        this.onDefaultValueFallback = onDefaultValueFallback;\n        this.groupName = groupName;\n        this.idType = idType;\n        this.isExperimentActive = isExperimentActive;\n    }\n    DynamicConfig.prototype.get = function (key, defaultValue, typeGuard) {\n        var _a, _b;\n        var val = this.getValue(key, defaultValue);\n        if (val == null) {\n            return defaultValue;\n        }\n        var expectedType = Array.isArray(defaultValue)\n            ? 'array'\n            : typeof defaultValue;\n        var actualType = Array.isArray(val) ? 'array' : typeof val;\n        if (typeGuard) {\n            if (typeGuard(val)) {\n                return val;\n            }\n            (_a = this.onDefaultValueFallback) === null || _a === void 0 ? void 0 : _a.call(this, this, key, expectedType, actualType);\n            return defaultValue;\n        }\n        if (defaultValue == null || expectedType === actualType) {\n            return val;\n        }\n        (_b = this.onDefaultValueFallback) === null || _b === void 0 ? void 0 : _b.call(this, this, key, expectedType, actualType);\n        return defaultValue;\n    };\n    DynamicConfig.prototype.getValue = function (key, defaultValue) {\n        if (key == null) {\n            return this.value;\n        }\n        if (defaultValue == null) {\n            defaultValue = null;\n        }\n        if (this.value[key] == null) {\n            return defaultValue;\n        }\n        return this.value[key];\n    };\n    DynamicConfig.prototype.getRuleID = function () {\n        return this.ruleID;\n    };\n    DynamicConfig.prototype.getGroupName = function () {\n        return this.groupName;\n    };\n    DynamicConfig.prototype.getIDType = function () {\n        return this.idType;\n    };\n    DynamicConfig.prototype.getName = function () {\n        return this.name;\n    };\n    DynamicConfig.prototype.getEvaluationDetails = function () {\n        return this.evaluationDetails;\n    };\n    DynamicConfig.prototype._getSecondaryExposures = function () {\n        return this.secondaryExposures;\n    };\n    DynamicConfig.prototype._getAllocatedExperimentName = function () {\n        return this.allocatedExperimentName;\n    };\n    DynamicConfig.prototype.getIsExperimentActive = function () {\n        return this.isExperimentActive;\n    };\n    return DynamicConfig;\n}());\nexports[\"default\"] = DynamicConfig;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L0R5bmFtaWNDb25maWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBLDZDQUE2QztBQUM3QyxrREFBa0Q7QUFDbEQsaURBQWlEO0FBQ2pELG9DQUFvQztBQUNwQyxpQ0FBaUM7QUFDakMsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQSxnSEFBZ0g7QUFDaEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW1hem9uLWZyZXNoLWRlbW8vLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L0R5bmFtaWNDb25maWcuanM/ZjhmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBEeW5hbWljQ29uZmlnID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIER5bmFtaWNDb25maWcoY29uZmlnTmFtZSwgY29uZmlnVmFsdWUsIHJ1bGVJRCwgZXZhbHVhdGlvbkRldGFpbHMsIHNlY29uZGFyeUV4cG9zdXJlcywgYWxsb2NhdGVkRXhwZXJpbWVudE5hbWUsIG9uRGVmYXVsdFZhbHVlRmFsbGJhY2ssIGdyb3VwTmFtZSwgaWRUeXBlLCBpc0V4cGVyaW1lbnRBY3RpdmUpIHtcbiAgICAgICAgaWYgKHNlY29uZGFyeUV4cG9zdXJlcyA9PT0gdm9pZCAwKSB7IHNlY29uZGFyeUV4cG9zdXJlcyA9IFtdOyB9XG4gICAgICAgIGlmIChhbGxvY2F0ZWRFeHBlcmltZW50TmFtZSA9PT0gdm9pZCAwKSB7IGFsbG9jYXRlZEV4cGVyaW1lbnROYW1lID0gJyc7IH1cbiAgICAgICAgaWYgKG9uRGVmYXVsdFZhbHVlRmFsbGJhY2sgPT09IHZvaWQgMCkgeyBvbkRlZmF1bHRWYWx1ZUZhbGxiYWNrID0gbnVsbDsgfVxuICAgICAgICBpZiAoZ3JvdXBOYW1lID09PSB2b2lkIDApIHsgZ3JvdXBOYW1lID0gbnVsbDsgfVxuICAgICAgICBpZiAoaWRUeXBlID09PSB2b2lkIDApIHsgaWRUeXBlID0gbnVsbDsgfVxuICAgICAgICBpZiAoaXNFeHBlcmltZW50QWN0aXZlID09PSB2b2lkIDApIHsgaXNFeHBlcmltZW50QWN0aXZlID0gbnVsbDsgfVxuICAgICAgICB0aGlzLm9uRGVmYXVsdFZhbHVlRmFsbGJhY2sgPSBudWxsO1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25maWdOYW1lO1xuICAgICAgICB0aGlzLnZhbHVlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjb25maWdWYWx1ZSAhPT0gbnVsbCAmJiBjb25maWdWYWx1ZSAhPT0gdm9pZCAwID8gY29uZmlnVmFsdWUgOiB7fSkpO1xuICAgICAgICB0aGlzLnJ1bGVJRCA9IHJ1bGVJRCAhPT0gbnVsbCAmJiBydWxlSUQgIT09IHZvaWQgMCA/IHJ1bGVJRCA6ICcnO1xuICAgICAgICB0aGlzLnNlY29uZGFyeUV4cG9zdXJlcyA9IHNlY29uZGFyeUV4cG9zdXJlcztcbiAgICAgICAgdGhpcy5hbGxvY2F0ZWRFeHBlcmltZW50TmFtZSA9IGFsbG9jYXRlZEV4cGVyaW1lbnROYW1lO1xuICAgICAgICB0aGlzLmV2YWx1YXRpb25EZXRhaWxzID0gZXZhbHVhdGlvbkRldGFpbHM7XG4gICAgICAgIHRoaXMub25EZWZhdWx0VmFsdWVGYWxsYmFjayA9IG9uRGVmYXVsdFZhbHVlRmFsbGJhY2s7XG4gICAgICAgIHRoaXMuZ3JvdXBOYW1lID0gZ3JvdXBOYW1lO1xuICAgICAgICB0aGlzLmlkVHlwZSA9IGlkVHlwZTtcbiAgICAgICAgdGhpcy5pc0V4cGVyaW1lbnRBY3RpdmUgPSBpc0V4cGVyaW1lbnRBY3RpdmU7XG4gICAgfVxuICAgIER5bmFtaWNDb25maWcucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXksIGRlZmF1bHRWYWx1ZSwgdHlwZUd1YXJkKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHZhciB2YWwgPSB0aGlzLmdldFZhbHVlKGtleSwgZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgaWYgKHZhbCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBleHBlY3RlZFR5cGUgPSBBcnJheS5pc0FycmF5KGRlZmF1bHRWYWx1ZSlcbiAgICAgICAgICAgID8gJ2FycmF5J1xuICAgICAgICAgICAgOiB0eXBlb2YgZGVmYXVsdFZhbHVlO1xuICAgICAgICB2YXIgYWN0dWFsVHlwZSA9IEFycmF5LmlzQXJyYXkodmFsKSA/ICdhcnJheScgOiB0eXBlb2YgdmFsO1xuICAgICAgICBpZiAodHlwZUd1YXJkKSB7XG4gICAgICAgICAgICBpZiAodHlwZUd1YXJkKHZhbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKF9hID0gdGhpcy5vbkRlZmF1bHRWYWx1ZUZhbGxiYWNrKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCB0aGlzLCBrZXksIGV4cGVjdGVkVHlwZSwgYWN0dWFsVHlwZSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWZhdWx0VmFsdWUgPT0gbnVsbCB8fCBleHBlY3RlZFR5cGUgPT09IGFjdHVhbFR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIH1cbiAgICAgICAgKF9iID0gdGhpcy5vbkRlZmF1bHRWYWx1ZUZhbGxiYWNrKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbCh0aGlzLCB0aGlzLCBrZXksIGV4cGVjdGVkVHlwZSwgYWN0dWFsVHlwZSk7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgfTtcbiAgICBEeW5hbWljQ29uZmlnLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uIChrZXksIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICBpZiAoa2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWZhdWx0VmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy52YWx1ZVtrZXldID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVba2V5XTtcbiAgICB9O1xuICAgIER5bmFtaWNDb25maWcucHJvdG90eXBlLmdldFJ1bGVJRCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnVsZUlEO1xuICAgIH07XG4gICAgRHluYW1pY0NvbmZpZy5wcm90b3R5cGUuZ2V0R3JvdXBOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncm91cE5hbWU7XG4gICAgfTtcbiAgICBEeW5hbWljQ29uZmlnLnByb3RvdHlwZS5nZXRJRFR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkVHlwZTtcbiAgICB9O1xuICAgIER5bmFtaWNDb25maWcucHJvdG90eXBlLmdldE5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgfTtcbiAgICBEeW5hbWljQ29uZmlnLnByb3RvdHlwZS5nZXRFdmFsdWF0aW9uRGV0YWlscyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZhbHVhdGlvbkRldGFpbHM7XG4gICAgfTtcbiAgICBEeW5hbWljQ29uZmlnLnByb3RvdHlwZS5fZ2V0U2Vjb25kYXJ5RXhwb3N1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWNvbmRhcnlFeHBvc3VyZXM7XG4gICAgfTtcbiAgICBEeW5hbWljQ29uZmlnLnByb3RvdHlwZS5fZ2V0QWxsb2NhdGVkRXhwZXJpbWVudE5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsbG9jYXRlZEV4cGVyaW1lbnROYW1lO1xuICAgIH07XG4gICAgRHluYW1pY0NvbmZpZy5wcm90b3R5cGUuZ2V0SXNFeHBlcmltZW50QWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0V4cGVyaW1lbnRBY3RpdmU7XG4gICAgfTtcbiAgICByZXR1cm4gRHluYW1pY0NvbmZpZztcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBEeW5hbWljQ29uZmlnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/DynamicConfig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/ErrorBoundary.js":
/*!*******************************************************!*\
  !*** ./node_modules/statsig-js/dist/ErrorBoundary.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExceptionEndpoint = void 0;\nvar uuid_1 = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/index.js\");\nvar Errors_1 = __webpack_require__(/*! ./Errors */ \"(ssr)/./node_modules/statsig-js/dist/Errors.js\");\nvar Diagnostics_1 = __importDefault(__webpack_require__(/*! ./utils/Diagnostics */ \"(ssr)/./node_modules/statsig-js/dist/utils/Diagnostics.js\"));\nvar OutputLogger_1 = __importDefault(__webpack_require__(/*! ./utils/OutputLogger */ \"(ssr)/./node_modules/statsig-js/dist/utils/OutputLogger.js\"));\nvar parseError_1 = __importDefault(__webpack_require__(/*! ./utils/parseError */ \"(ssr)/./node_modules/statsig-js/dist/utils/parseError.js\"));\nexports.ExceptionEndpoint = 'https://statsigapi.net/v1/sdk_exception';\nvar MAX_DIAGNOSTICS_MARKERS = 30;\nvar SAMPLING_RATE = 10000;\nvar ErrorBoundary = /** @class */ (function () {\n    function ErrorBoundary(sdkKey, sdkOptions) {\n        this.sdkKey = sdkKey;\n        this.sdkOptions = sdkOptions;\n        this.seen = new Set();\n        var sampling = Math.floor(Math.random() * SAMPLING_RATE);\n        this.setupDiagnostics(sampling === 0 ? MAX_DIAGNOSTICS_MARKERS : 0);\n    }\n    ErrorBoundary.prototype.setStatsigMetadata = function (statsigMetadata) {\n        this.statsigMetadata = statsigMetadata;\n    };\n    ErrorBoundary.prototype.swallow = function (tag, task, options) {\n        if (options === void 0) { options = {}; }\n        this.capture(tag, task, function () {\n            return undefined;\n        }, options);\n    };\n    ErrorBoundary.prototype.capture = function (tag, task, recover, captureOptions) {\n        var _this = this;\n        if (captureOptions === void 0) { captureOptions = {}; }\n        var markerID = null;\n        try {\n            markerID = this.beginMarker(tag);\n            var result = task();\n            var wasSuccessful_1 = true;\n            if (result instanceof Promise) {\n                return result\n                    .catch(function (e) {\n                    wasSuccessful_1 = false;\n                    return _this.onCaught(tag, e, recover, captureOptions);\n                })\n                    .then(function (possiblyRecoveredResult) {\n                    _this.endMarker(tag, wasSuccessful_1, markerID);\n                    return possiblyRecoveredResult;\n                });\n            }\n            this.endMarker(tag, true, markerID, captureOptions.configName);\n            return result;\n        }\n        catch (error) {\n            this.endMarker(tag, false, markerID, captureOptions.configName);\n            return this.onCaught(tag, error, recover, captureOptions);\n        }\n    };\n    ErrorBoundary.prototype.logError = function (tag, error, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, getExtraData = _b.getExtraData, configName = _b.configName;\n        if (this.sdkOptions.isAllLoggingDisabled()) {\n            return;\n        }\n        (function () { return __awaiter(_this, void 0, void 0, function () {\n            var extra, _a, name_1, info, metadata, body;\n            var _b;\n            return __generator(this, function (_c) {\n                try {\n                    extra = typeof getExtraData === 'function' ? getExtraData() : {};\n                    _a = (0, parseError_1.default)(error), name_1 = _a.name, info = _a.trace;\n                    extra['configName'] = configName;\n                    if (this.seen.has(name_1))\n                        return [2 /*return*/];\n                    this.seen.add(name_1);\n                    metadata = (_b = this.statsigMetadata) !== null && _b !== void 0 ? _b : {};\n                    if (metadata.sessionID == null) {\n                        metadata.sessionID = (0, uuid_1.v4)();\n                    }\n                    body = JSON.stringify({\n                        tag: tag,\n                        exception: name_1,\n                        info: info,\n                        statsigMetadata: metadata,\n                        statsigOptions: this.sdkOptions.getLoggingCopy(),\n                        extra: extra,\n                    });\n                    return [2 /*return*/, fetch(exports.ExceptionEndpoint, {\n                            method: 'POST',\n                            headers: {\n                                'STATSIG-API-KEY': this.sdkKey,\n                                'STATSIG-SDK-TYPE': String(metadata['sdkType']),\n                                'STATSIG-SDK-VERSION': String(metadata['sdkVersion']),\n                                'Content-Type': 'application/json; charset=UTF-8',\n                            },\n                            body: body,\n                        })];\n                }\n                catch (_error) {\n                    /* noop */\n                }\n                return [2 /*return*/];\n            });\n        }); })().catch(function () {\n            /*noop*/\n        });\n    };\n    ErrorBoundary.prototype.setupDiagnostics = function (maxMarkers) {\n        Diagnostics_1.default.setMaxMarkers('api_call', maxMarkers);\n    };\n    ErrorBoundary.prototype.beginMarker = function (tag) {\n        var diagnostics = Diagnostics_1.default.mark.api_call(tag);\n        if (!diagnostics) {\n            return null;\n        }\n        var count = Diagnostics_1.default.getMarkerCount('api_call');\n        var markerID = \"\".concat(tag, \"_\").concat(count);\n        var wasAdded = diagnostics.start({\n            markerID: markerID,\n        }, 'api_call');\n        return wasAdded ? markerID : null;\n    };\n    ErrorBoundary.prototype.endMarker = function (tag, wasSuccessful, markerID, configName) {\n        var diagnostics = Diagnostics_1.default.mark.api_call(tag);\n        if (!markerID || !diagnostics) {\n            return;\n        }\n        diagnostics.end({\n            markerID: markerID,\n            success: wasSuccessful,\n            configName: configName,\n        }, 'api_call');\n    };\n    ErrorBoundary.prototype.onCaught = function (tag, error, recover, captureOptions) {\n        if (captureOptions === void 0) { captureOptions = {}; }\n        if (error instanceof Errors_1.StatsigUninitializedError ||\n            error instanceof Errors_1.StatsigInvalidArgumentError) {\n            throw error; // Don't catch these\n        }\n        if (error instanceof Errors_1.StatsigInitializationTimeoutError) {\n            OutputLogger_1.default.error('Timeout occured.', error);\n            return recover();\n        }\n        OutputLogger_1.default.error('An unexpected exception occurred.', error);\n        this.logError(tag, error, captureOptions);\n        return recover();\n    };\n    return ErrorBoundary;\n}());\nexports[\"default\"] = ErrorBoundary;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/ErrorBoundary.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/Errors.js":
/*!************************************************!*\
  !*** ./node_modules/statsig-js/dist/Errors.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StatsigInitializationTimeoutError = exports.StatsigSDKKeyMismatchError = exports.StatsigInvalidArgumentError = exports.StatsigUninitializedError = void 0;\nvar StatsigUninitializedError = /** @class */ (function (_super) {\n    __extends(StatsigUninitializedError, _super);\n    function StatsigUninitializedError(message) {\n        var _this = _super.call(this, message !== null && message !== void 0 ? message : 'Call and wait for initialize() to finish first.') || this;\n        Object.setPrototypeOf(_this, StatsigUninitializedError.prototype);\n        return _this;\n    }\n    return StatsigUninitializedError;\n}(Error));\nexports.StatsigUninitializedError = StatsigUninitializedError;\nvar StatsigInvalidArgumentError = /** @class */ (function (_super) {\n    __extends(StatsigInvalidArgumentError, _super);\n    function StatsigInvalidArgumentError(message) {\n        var _this = _super.call(this, message) || this;\n        Object.setPrototypeOf(_this, StatsigInvalidArgumentError.prototype);\n        return _this;\n    }\n    return StatsigInvalidArgumentError;\n}(Error));\nexports.StatsigInvalidArgumentError = StatsigInvalidArgumentError;\nvar StatsigSDKKeyMismatchError = /** @class */ (function (_super) {\n    __extends(StatsigSDKKeyMismatchError, _super);\n    function StatsigSDKKeyMismatchError(message) {\n        var _this = _super.call(this, message) || this;\n        Object.setPrototypeOf(_this, StatsigSDKKeyMismatchError.prototype);\n        return _this;\n    }\n    return StatsigSDKKeyMismatchError;\n}(Error));\nexports.StatsigSDKKeyMismatchError = StatsigSDKKeyMismatchError;\nvar StatsigInitializationTimeoutError = /** @class */ (function (_super) {\n    __extends(StatsigInitializationTimeoutError, _super);\n    function StatsigInitializationTimeoutError(timeoutMs) {\n        var _this = _super.call(this, \"The initialization timeout of \".concat(timeoutMs, \"ms has been hit before the network request has completed.\")) || this;\n        Object.setPrototypeOf(_this, StatsigInitializationTimeoutError.prototype);\n        return _this;\n    }\n    return StatsigInitializationTimeoutError;\n}(Error));\nexports.StatsigInitializationTimeoutError = StatsigInitializationTimeoutError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L0Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCLHNDQUFzQyxrQkFBa0I7QUFDdkYsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5Q0FBeUMsR0FBRyxrQ0FBa0MsR0FBRyxtQ0FBbUMsR0FBRyxpQ0FBaUM7QUFDeEo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbWF6b24tZnJlc2gtZGVtby8uL25vZGVfbW9kdWxlcy9zdGF0c2lnLWpzL2Rpc3QvRXJyb3JzLmpzPzI1NzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdGF0c2lnSW5pdGlhbGl6YXRpb25UaW1lb3V0RXJyb3IgPSBleHBvcnRzLlN0YXRzaWdTREtLZXlNaXNtYXRjaEVycm9yID0gZXhwb3J0cy5TdGF0c2lnSW52YWxpZEFyZ3VtZW50RXJyb3IgPSBleHBvcnRzLlN0YXRzaWdVbmluaXRpYWxpemVkRXJyb3IgPSB2b2lkIDA7XG52YXIgU3RhdHNpZ1VuaW5pdGlhbGl6ZWRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3RhdHNpZ1VuaW5pdGlhbGl6ZWRFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdGF0c2lnVW5pbml0aWFsaXplZEVycm9yKG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSAhPT0gbnVsbCAmJiBtZXNzYWdlICE9PSB2b2lkIDAgPyBtZXNzYWdlIDogJ0NhbGwgYW5kIHdhaXQgZm9yIGluaXRpYWxpemUoKSB0byBmaW5pc2ggZmlyc3QuJykgfHwgdGhpcztcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKF90aGlzLCBTdGF0c2lnVW5pbml0aWFsaXplZEVycm9yLnByb3RvdHlwZSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFN0YXRzaWdVbmluaXRpYWxpemVkRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLlN0YXRzaWdVbmluaXRpYWxpemVkRXJyb3IgPSBTdGF0c2lnVW5pbml0aWFsaXplZEVycm9yO1xudmFyIFN0YXRzaWdJbnZhbGlkQXJndW1lbnRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3RhdHNpZ0ludmFsaWRBcmd1bWVudEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN0YXRzaWdJbnZhbGlkQXJndW1lbnRFcnJvcihtZXNzYWdlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihfdGhpcywgU3RhdHNpZ0ludmFsaWRBcmd1bWVudEVycm9yLnByb3RvdHlwZSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFN0YXRzaWdJbnZhbGlkQXJndW1lbnRFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydHMuU3RhdHNpZ0ludmFsaWRBcmd1bWVudEVycm9yID0gU3RhdHNpZ0ludmFsaWRBcmd1bWVudEVycm9yO1xudmFyIFN0YXRzaWdTREtLZXlNaXNtYXRjaEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdGF0c2lnU0RLS2V5TWlzbWF0Y2hFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdGF0c2lnU0RLS2V5TWlzbWF0Y2hFcnJvcihtZXNzYWdlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihfdGhpcywgU3RhdHNpZ1NES0tleU1pc21hdGNoRXJyb3IucHJvdG90eXBlKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gU3RhdHNpZ1NES0tleU1pc21hdGNoRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLlN0YXRzaWdTREtLZXlNaXNtYXRjaEVycm9yID0gU3RhdHNpZ1NES0tleU1pc21hdGNoRXJyb3I7XG52YXIgU3RhdHNpZ0luaXRpYWxpemF0aW9uVGltZW91dEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdGF0c2lnSW5pdGlhbGl6YXRpb25UaW1lb3V0RXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3RhdHNpZ0luaXRpYWxpemF0aW9uVGltZW91dEVycm9yKHRpbWVvdXRNcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBcIlRoZSBpbml0aWFsaXphdGlvbiB0aW1lb3V0IG9mIFwiLmNvbmNhdCh0aW1lb3V0TXMsIFwibXMgaGFzIGJlZW4gaGl0IGJlZm9yZSB0aGUgbmV0d29yayByZXF1ZXN0IGhhcyBjb21wbGV0ZWQuXCIpKSB8fCB0aGlzO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoX3RoaXMsIFN0YXRzaWdJbml0aWFsaXphdGlvblRpbWVvdXRFcnJvci5wcm90b3R5cGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTdGF0c2lnSW5pdGlhbGl6YXRpb25UaW1lb3V0RXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLlN0YXRzaWdJbml0aWFsaXphdGlvblRpbWVvdXRFcnJvciA9IFN0YXRzaWdJbml0aWFsaXphdGlvblRpbWVvdXRFcnJvcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/Errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/FeatureGate.js":
/*!*****************************************************!*\
  !*** ./node_modules/statsig-js/dist/FeatureGate.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar FeatureGate = /** @class */ (function () {\n    function FeatureGate(gateName, value, ruleID, evaluationDetails, groupName, idType, secondaryExposures) {\n        if (groupName === void 0) { groupName = null; }\n        if (idType === void 0) { idType = null; }\n        if (secondaryExposures === void 0) { secondaryExposures = []; }\n        this.name = gateName;\n        this.value = value;\n        this.ruleID = ruleID !== null && ruleID !== void 0 ? ruleID : '';\n        this.evaluationDetails = evaluationDetails;\n        this.groupName = groupName;\n        this.idType = idType;\n        this.secondaryExposures = secondaryExposures;\n    }\n    FeatureGate.prototype.getRuleID = function () {\n        return this.ruleID;\n    };\n    FeatureGate.prototype.getGroupName = function () {\n        return this.groupName;\n    };\n    FeatureGate.prototype.getIDType = function () {\n        return this.idType;\n    };\n    FeatureGate.prototype.getName = function () {\n        return this.name;\n    };\n    FeatureGate.prototype.getValue = function () {\n        return this.value;\n    };\n    FeatureGate.prototype.getEvaluationDetails = function () {\n        return this.evaluationDetails;\n    };\n    FeatureGate.prototype.getSecondaryExposures = function () {\n        return this.secondaryExposures;\n    };\n    return FeatureGate;\n}());\nexports[\"default\"] = FeatureGate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L0ZlYXR1cmVHYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEMsaUNBQWlDO0FBQ2pDLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbWF6b24tZnJlc2gtZGVtby8uL25vZGVfbW9kdWxlcy9zdGF0c2lnLWpzL2Rpc3QvRmVhdHVyZUdhdGUuanM/YjZmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBGZWF0dXJlR2F0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGZWF0dXJlR2F0ZShnYXRlTmFtZSwgdmFsdWUsIHJ1bGVJRCwgZXZhbHVhdGlvbkRldGFpbHMsIGdyb3VwTmFtZSwgaWRUeXBlLCBzZWNvbmRhcnlFeHBvc3VyZXMpIHtcbiAgICAgICAgaWYgKGdyb3VwTmFtZSA9PT0gdm9pZCAwKSB7IGdyb3VwTmFtZSA9IG51bGw7IH1cbiAgICAgICAgaWYgKGlkVHlwZSA9PT0gdm9pZCAwKSB7IGlkVHlwZSA9IG51bGw7IH1cbiAgICAgICAgaWYgKHNlY29uZGFyeUV4cG9zdXJlcyA9PT0gdm9pZCAwKSB7IHNlY29uZGFyeUV4cG9zdXJlcyA9IFtdOyB9XG4gICAgICAgIHRoaXMubmFtZSA9IGdhdGVOYW1lO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMucnVsZUlEID0gcnVsZUlEICE9PSBudWxsICYmIHJ1bGVJRCAhPT0gdm9pZCAwID8gcnVsZUlEIDogJyc7XG4gICAgICAgIHRoaXMuZXZhbHVhdGlvbkRldGFpbHMgPSBldmFsdWF0aW9uRGV0YWlscztcbiAgICAgICAgdGhpcy5ncm91cE5hbWUgPSBncm91cE5hbWU7XG4gICAgICAgIHRoaXMuaWRUeXBlID0gaWRUeXBlO1xuICAgICAgICB0aGlzLnNlY29uZGFyeUV4cG9zdXJlcyA9IHNlY29uZGFyeUV4cG9zdXJlcztcbiAgICB9XG4gICAgRmVhdHVyZUdhdGUucHJvdG90eXBlLmdldFJ1bGVJRCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnVsZUlEO1xuICAgIH07XG4gICAgRmVhdHVyZUdhdGUucHJvdG90eXBlLmdldEdyb3VwTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXBOYW1lO1xuICAgIH07XG4gICAgRmVhdHVyZUdhdGUucHJvdG90eXBlLmdldElEVHlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWRUeXBlO1xuICAgIH07XG4gICAgRmVhdHVyZUdhdGUucHJvdG90eXBlLmdldE5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgfTtcbiAgICBGZWF0dXJlR2F0ZS5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH07XG4gICAgRmVhdHVyZUdhdGUucHJvdG90eXBlLmdldEV2YWx1YXRpb25EZXRhaWxzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ldmFsdWF0aW9uRGV0YWlscztcbiAgICB9O1xuICAgIEZlYXR1cmVHYXRlLnByb3RvdHlwZS5nZXRTZWNvbmRhcnlFeHBvc3VyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlY29uZGFyeUV4cG9zdXJlcztcbiAgICB9O1xuICAgIHJldHVybiBGZWF0dXJlR2F0ZTtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBGZWF0dXJlR2F0ZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/FeatureGate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/Layer.js":
/*!***********************************************!*\
  !*** ./node_modules/statsig-js/dist/Layer.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar Layer = /** @class */ (function () {\n    function Layer(name, layerValue, ruleID, evaluationDetails, logParameterFunction, secondaryExposures, undelegatedSecondaryExposures, allocatedExperimentName, explicitParameters, groupName) {\n        if (logParameterFunction === void 0) { logParameterFunction = null; }\n        if (secondaryExposures === void 0) { secondaryExposures = []; }\n        if (undelegatedSecondaryExposures === void 0) { undelegatedSecondaryExposures = []; }\n        if (allocatedExperimentName === void 0) { allocatedExperimentName = ''; }\n        if (explicitParameters === void 0) { explicitParameters = []; }\n        if (groupName === void 0) { groupName = null; }\n        this.logParameterFunction = logParameterFunction;\n        this.name = name;\n        this.value = JSON.parse(JSON.stringify(layerValue !== null && layerValue !== void 0 ? layerValue : {}));\n        this.ruleID = ruleID !== null && ruleID !== void 0 ? ruleID : '';\n        this.evaluationDetails = evaluationDetails;\n        this.secondaryExposures = secondaryExposures;\n        this.undelegatedSecondaryExposures = undelegatedSecondaryExposures;\n        this.allocatedExperimentName = allocatedExperimentName;\n        this.explicitParameters = explicitParameters;\n        this.groupName = groupName;\n    }\n    Layer._create = function (name, value, ruleID, evaluationDetails, logParameterFunction, secondaryExposures, undelegatedSecondaryExposures, allocatedExperimentName, explicitParameters, groupName) {\n        if (logParameterFunction === void 0) { logParameterFunction = null; }\n        if (secondaryExposures === void 0) { secondaryExposures = []; }\n        if (undelegatedSecondaryExposures === void 0) { undelegatedSecondaryExposures = []; }\n        if (allocatedExperimentName === void 0) { allocatedExperimentName = ''; }\n        if (explicitParameters === void 0) { explicitParameters = []; }\n        if (groupName === void 0) { groupName = null; }\n        return new Layer(name, value, ruleID, evaluationDetails, logParameterFunction, secondaryExposures, undelegatedSecondaryExposures, allocatedExperimentName, explicitParameters, groupName);\n    };\n    Layer.prototype.get = function (key, defaultValue, typeGuard) {\n        var _this = this;\n        var val = this.value[key];\n        if (val == null) {\n            return defaultValue;\n        }\n        var logAndReturn = function () {\n            _this.logLayerParameterExposure(key);\n            return val;\n        };\n        if (typeGuard) {\n            return typeGuard(val) ? logAndReturn() : defaultValue;\n        }\n        if (defaultValue == null) {\n            return logAndReturn();\n        }\n        if (typeof val === typeof defaultValue &&\n            Array.isArray(defaultValue) === Array.isArray(val)) {\n            return logAndReturn();\n        }\n        return defaultValue;\n    };\n    Layer.prototype.getValue = function (key, defaultValue) {\n        if (defaultValue == undefined) {\n            defaultValue = null;\n        }\n        var val = this.value[key];\n        if (val != null) {\n            this.logLayerParameterExposure(key);\n        }\n        return val !== null && val !== void 0 ? val : defaultValue;\n    };\n    Layer.prototype.getRuleID = function () {\n        return this.ruleID;\n    };\n    Layer.prototype.getGroupName = function () {\n        return this.groupName;\n    };\n    Layer.prototype.getName = function () {\n        return this.name;\n    };\n    Layer.prototype.getEvaluationDetails = function () {\n        return this.evaluationDetails;\n    };\n    Layer.prototype._getSecondaryExposures = function () {\n        return this.secondaryExposures;\n    };\n    Layer.prototype._getUndelegatedSecondaryExposures = function () {\n        return this.undelegatedSecondaryExposures;\n    };\n    Layer.prototype._getAllocatedExperimentName = function () {\n        return this.allocatedExperimentName;\n    };\n    Layer.prototype._getExplicitParameters = function () {\n        return this.explicitParameters;\n    };\n    Layer.prototype._getEvaluationDetails = function () {\n        return this.evaluationDetails;\n    };\n    Layer.prototype.logLayerParameterExposure = function (parameterName) {\n        var _a;\n        (_a = this.logParameterFunction) === null || _a === void 0 ? void 0 : _a.call(this, this, parameterName);\n    };\n    return Layer;\n}());\nexports[\"default\"] = Layer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L0xheWVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0MsNkNBQTZDO0FBQzdDLHdEQUF3RDtBQUN4RCxrREFBa0Q7QUFDbEQsNkNBQTZDO0FBQzdDLG9DQUFvQztBQUNwQztBQUNBO0FBQ0EsNkdBQTZHO0FBQzdHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQyw2Q0FBNkM7QUFDN0Msd0RBQXdEO0FBQ3hELGtEQUFrRDtBQUNsRCw2Q0FBNkM7QUFDN0Msb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2FtYXpvbi1mcmVzaC1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0YXRzaWctanMvZGlzdC9MYXllci5qcz8xMmJlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIExheWVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExheWVyKG5hbWUsIGxheWVyVmFsdWUsIHJ1bGVJRCwgZXZhbHVhdGlvbkRldGFpbHMsIGxvZ1BhcmFtZXRlckZ1bmN0aW9uLCBzZWNvbmRhcnlFeHBvc3VyZXMsIHVuZGVsZWdhdGVkU2Vjb25kYXJ5RXhwb3N1cmVzLCBhbGxvY2F0ZWRFeHBlcmltZW50TmFtZSwgZXhwbGljaXRQYXJhbWV0ZXJzLCBncm91cE5hbWUpIHtcbiAgICAgICAgaWYgKGxvZ1BhcmFtZXRlckZ1bmN0aW9uID09PSB2b2lkIDApIHsgbG9nUGFyYW1ldGVyRnVuY3Rpb24gPSBudWxsOyB9XG4gICAgICAgIGlmIChzZWNvbmRhcnlFeHBvc3VyZXMgPT09IHZvaWQgMCkgeyBzZWNvbmRhcnlFeHBvc3VyZXMgPSBbXTsgfVxuICAgICAgICBpZiAodW5kZWxlZ2F0ZWRTZWNvbmRhcnlFeHBvc3VyZXMgPT09IHZvaWQgMCkgeyB1bmRlbGVnYXRlZFNlY29uZGFyeUV4cG9zdXJlcyA9IFtdOyB9XG4gICAgICAgIGlmIChhbGxvY2F0ZWRFeHBlcmltZW50TmFtZSA9PT0gdm9pZCAwKSB7IGFsbG9jYXRlZEV4cGVyaW1lbnROYW1lID0gJyc7IH1cbiAgICAgICAgaWYgKGV4cGxpY2l0UGFyYW1ldGVycyA9PT0gdm9pZCAwKSB7IGV4cGxpY2l0UGFyYW1ldGVycyA9IFtdOyB9XG4gICAgICAgIGlmIChncm91cE5hbWUgPT09IHZvaWQgMCkgeyBncm91cE5hbWUgPSBudWxsOyB9XG4gICAgICAgIHRoaXMubG9nUGFyYW1ldGVyRnVuY3Rpb24gPSBsb2dQYXJhbWV0ZXJGdW5jdGlvbjtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobGF5ZXJWYWx1ZSAhPT0gbnVsbCAmJiBsYXllclZhbHVlICE9PSB2b2lkIDAgPyBsYXllclZhbHVlIDoge30pKTtcbiAgICAgICAgdGhpcy5ydWxlSUQgPSBydWxlSUQgIT09IG51bGwgJiYgcnVsZUlEICE9PSB2b2lkIDAgPyBydWxlSUQgOiAnJztcbiAgICAgICAgdGhpcy5ldmFsdWF0aW9uRGV0YWlscyA9IGV2YWx1YXRpb25EZXRhaWxzO1xuICAgICAgICB0aGlzLnNlY29uZGFyeUV4cG9zdXJlcyA9IHNlY29uZGFyeUV4cG9zdXJlcztcbiAgICAgICAgdGhpcy51bmRlbGVnYXRlZFNlY29uZGFyeUV4cG9zdXJlcyA9IHVuZGVsZWdhdGVkU2Vjb25kYXJ5RXhwb3N1cmVzO1xuICAgICAgICB0aGlzLmFsbG9jYXRlZEV4cGVyaW1lbnROYW1lID0gYWxsb2NhdGVkRXhwZXJpbWVudE5hbWU7XG4gICAgICAgIHRoaXMuZXhwbGljaXRQYXJhbWV0ZXJzID0gZXhwbGljaXRQYXJhbWV0ZXJzO1xuICAgICAgICB0aGlzLmdyb3VwTmFtZSA9IGdyb3VwTmFtZTtcbiAgICB9XG4gICAgTGF5ZXIuX2NyZWF0ZSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgcnVsZUlELCBldmFsdWF0aW9uRGV0YWlscywgbG9nUGFyYW1ldGVyRnVuY3Rpb24sIHNlY29uZGFyeUV4cG9zdXJlcywgdW5kZWxlZ2F0ZWRTZWNvbmRhcnlFeHBvc3VyZXMsIGFsbG9jYXRlZEV4cGVyaW1lbnROYW1lLCBleHBsaWNpdFBhcmFtZXRlcnMsIGdyb3VwTmFtZSkge1xuICAgICAgICBpZiAobG9nUGFyYW1ldGVyRnVuY3Rpb24gPT09IHZvaWQgMCkgeyBsb2dQYXJhbWV0ZXJGdW5jdGlvbiA9IG51bGw7IH1cbiAgICAgICAgaWYgKHNlY29uZGFyeUV4cG9zdXJlcyA9PT0gdm9pZCAwKSB7IHNlY29uZGFyeUV4cG9zdXJlcyA9IFtdOyB9XG4gICAgICAgIGlmICh1bmRlbGVnYXRlZFNlY29uZGFyeUV4cG9zdXJlcyA9PT0gdm9pZCAwKSB7IHVuZGVsZWdhdGVkU2Vjb25kYXJ5RXhwb3N1cmVzID0gW107IH1cbiAgICAgICAgaWYgKGFsbG9jYXRlZEV4cGVyaW1lbnROYW1lID09PSB2b2lkIDApIHsgYWxsb2NhdGVkRXhwZXJpbWVudE5hbWUgPSAnJzsgfVxuICAgICAgICBpZiAoZXhwbGljaXRQYXJhbWV0ZXJzID09PSB2b2lkIDApIHsgZXhwbGljaXRQYXJhbWV0ZXJzID0gW107IH1cbiAgICAgICAgaWYgKGdyb3VwTmFtZSA9PT0gdm9pZCAwKSB7IGdyb3VwTmFtZSA9IG51bGw7IH1cbiAgICAgICAgcmV0dXJuIG5ldyBMYXllcihuYW1lLCB2YWx1ZSwgcnVsZUlELCBldmFsdWF0aW9uRGV0YWlscywgbG9nUGFyYW1ldGVyRnVuY3Rpb24sIHNlY29uZGFyeUV4cG9zdXJlcywgdW5kZWxlZ2F0ZWRTZWNvbmRhcnlFeHBvc3VyZXMsIGFsbG9jYXRlZEV4cGVyaW1lbnROYW1lLCBleHBsaWNpdFBhcmFtZXRlcnMsIGdyb3VwTmFtZSk7XG4gICAgfTtcbiAgICBMYXllci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSwgZGVmYXVsdFZhbHVlLCB0eXBlR3VhcmQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHZhbCA9IHRoaXMudmFsdWVba2V5XTtcbiAgICAgICAgaWYgKHZhbCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsb2dBbmRSZXR1cm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5sb2dMYXllclBhcmFtZXRlckV4cG9zdXJlKGtleSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZUd1YXJkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZUd1YXJkKHZhbCkgPyBsb2dBbmRSZXR1cm4oKSA6IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmYXVsdFZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2dBbmRSZXR1cm4oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gdHlwZW9mIGRlZmF1bHRWYWx1ZSAmJlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShkZWZhdWx0VmFsdWUpID09PSBBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2dBbmRSZXR1cm4oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgIH07XG4gICAgTGF5ZXIucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIGlmIChkZWZhdWx0VmFsdWUgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2YWwgPSB0aGlzLnZhbHVlW2tleV07XG4gICAgICAgIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5sb2dMYXllclBhcmFtZXRlckV4cG9zdXJlKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB2YWwgIT09IHZvaWQgMCA/IHZhbCA6IGRlZmF1bHRWYWx1ZTtcbiAgICB9O1xuICAgIExheWVyLnByb3RvdHlwZS5nZXRSdWxlSUQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJ1bGVJRDtcbiAgICB9O1xuICAgIExheWVyLnByb3RvdHlwZS5nZXRHcm91cE5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyb3VwTmFtZTtcbiAgICB9O1xuICAgIExheWVyLnByb3RvdHlwZS5nZXROYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgIH07XG4gICAgTGF5ZXIucHJvdG90eXBlLmdldEV2YWx1YXRpb25EZXRhaWxzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ldmFsdWF0aW9uRGV0YWlscztcbiAgICB9O1xuICAgIExheWVyLnByb3RvdHlwZS5fZ2V0U2Vjb25kYXJ5RXhwb3N1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWNvbmRhcnlFeHBvc3VyZXM7XG4gICAgfTtcbiAgICBMYXllci5wcm90b3R5cGUuX2dldFVuZGVsZWdhdGVkU2Vjb25kYXJ5RXhwb3N1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmRlbGVnYXRlZFNlY29uZGFyeUV4cG9zdXJlcztcbiAgICB9O1xuICAgIExheWVyLnByb3RvdHlwZS5fZ2V0QWxsb2NhdGVkRXhwZXJpbWVudE5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsbG9jYXRlZEV4cGVyaW1lbnROYW1lO1xuICAgIH07XG4gICAgTGF5ZXIucHJvdG90eXBlLl9nZXRFeHBsaWNpdFBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4cGxpY2l0UGFyYW1ldGVycztcbiAgICB9O1xuICAgIExheWVyLnByb3RvdHlwZS5fZ2V0RXZhbHVhdGlvbkRldGFpbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV2YWx1YXRpb25EZXRhaWxzO1xuICAgIH07XG4gICAgTGF5ZXIucHJvdG90eXBlLmxvZ0xheWVyUGFyYW1ldGVyRXhwb3N1cmUgPSBmdW5jdGlvbiAocGFyYW1ldGVyTmFtZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMubG9nUGFyYW1ldGVyRnVuY3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIHRoaXMsIHBhcmFtZXRlck5hbWUpO1xuICAgIH07XG4gICAgcmV0dXJuIExheWVyO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IExheWVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/Layer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/LogEvent.js":
/*!**************************************************!*\
  !*** ./node_modules/statsig-js/dist/LogEvent.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar LogEvent = /** @class */ (function () {\n    function LogEvent(eventName) {\n        this.user = null;\n        this.value = null;\n        this.metadata = null;\n        this.eventName = eventName;\n        this.statsigMetadata = {};\n        this.time = Date.now();\n    }\n    LogEvent.prototype.getName = function () {\n        return this.eventName;\n    };\n    LogEvent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n    LogEvent.prototype.setMetadata = function (metadata) {\n        this.metadata = metadata;\n    };\n    LogEvent.prototype.addStatsigMetadata = function (key, value) {\n        this.statsigMetadata[key] = value;\n    };\n    LogEvent.prototype.setUser = function (newUser) {\n        // Need to remove private attributes from logs and also keep in the original user for evaluations.\n        this.user = __assign({}, newUser);\n        delete this.user.privateAttributes;\n    };\n    LogEvent.prototype.setSecondaryExposures = function (exposures) {\n        if (exposures === void 0) { exposures = []; }\n        this.secondaryExposures = exposures;\n    };\n    LogEvent.prototype.toJsonObject = function () {\n        var _a;\n        return {\n            eventName: this.eventName,\n            user: this.user,\n            value: this.value,\n            metadata: this.metadata,\n            time: this.time,\n            statsigMetadata: this.statsigMetadata,\n            secondaryExposures: (_a = this.secondaryExposures) !== null && _a !== void 0 ? _a : undefined,\n        };\n    };\n    return LogEvent;\n}());\nexports[\"default\"] = LogEvent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L0xvZ0V2ZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLGlEQUFpRCxPQUFPO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW1hem9uLWZyZXNoLWRlbW8vLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L0xvZ0V2ZW50LmpzPzM3YWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIExvZ0V2ZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExvZ0V2ZW50KGV2ZW50TmFtZSkge1xuICAgICAgICB0aGlzLnVzZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lO1xuICAgICAgICB0aGlzLnN0YXRzaWdNZXRhZGF0YSA9IHt9O1xuICAgICAgICB0aGlzLnRpbWUgPSBEYXRlLm5vdygpO1xuICAgIH1cbiAgICBMb2dFdmVudC5wcm90b3R5cGUuZ2V0TmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnROYW1lO1xuICAgIH07XG4gICAgTG9nRXZlbnQucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9O1xuICAgIExvZ0V2ZW50LnByb3RvdHlwZS5zZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChtZXRhZGF0YSkge1xuICAgICAgICB0aGlzLm1ldGFkYXRhID0gbWV0YWRhdGE7XG4gICAgfTtcbiAgICBMb2dFdmVudC5wcm90b3R5cGUuYWRkU3RhdHNpZ01ldGFkYXRhID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5zdGF0c2lnTWV0YWRhdGFba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gICAgTG9nRXZlbnQucHJvdG90eXBlLnNldFVzZXIgPSBmdW5jdGlvbiAobmV3VXNlcikge1xuICAgICAgICAvLyBOZWVkIHRvIHJlbW92ZSBwcml2YXRlIGF0dHJpYnV0ZXMgZnJvbSBsb2dzIGFuZCBhbHNvIGtlZXAgaW4gdGhlIG9yaWdpbmFsIHVzZXIgZm9yIGV2YWx1YXRpb25zLlxuICAgICAgICB0aGlzLnVzZXIgPSBfX2Fzc2lnbih7fSwgbmV3VXNlcik7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnVzZXIucHJpdmF0ZUF0dHJpYnV0ZXM7XG4gICAgfTtcbiAgICBMb2dFdmVudC5wcm90b3R5cGUuc2V0U2Vjb25kYXJ5RXhwb3N1cmVzID0gZnVuY3Rpb24gKGV4cG9zdXJlcykge1xuICAgICAgICBpZiAoZXhwb3N1cmVzID09PSB2b2lkIDApIHsgZXhwb3N1cmVzID0gW107IH1cbiAgICAgICAgdGhpcy5zZWNvbmRhcnlFeHBvc3VyZXMgPSBleHBvc3VyZXM7XG4gICAgfTtcbiAgICBMb2dFdmVudC5wcm90b3R5cGUudG9Kc29uT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBldmVudE5hbWU6IHRoaXMuZXZlbnROYW1lLFxuICAgICAgICAgICAgdXNlcjogdGhpcy51c2VyLFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMudmFsdWUsXG4gICAgICAgICAgICBtZXRhZGF0YTogdGhpcy5tZXRhZGF0YSxcbiAgICAgICAgICAgIHRpbWU6IHRoaXMudGltZSxcbiAgICAgICAgICAgIHN0YXRzaWdNZXRhZGF0YTogdGhpcy5zdGF0c2lnTWV0YWRhdGEsXG4gICAgICAgICAgICBzZWNvbmRhcnlFeHBvc3VyZXM6IChfYSA9IHRoaXMuc2Vjb25kYXJ5RXhwb3N1cmVzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gTG9nRXZlbnQ7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTG9nRXZlbnQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/LogEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/SDKVersion.js":
/*!****************************************************!*\
  !*** ./node_modules/statsig-js/dist/SDKVersion.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = void 0;\n// Generated by genversion.\nexports.version = '4.53.1';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L1NES1ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmO0FBQ0EsZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2FtYXpvbi1mcmVzaC1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0YXRzaWctanMvZGlzdC9TREtWZXJzaW9uLmpzPzUxYjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZlcnNpb24gPSB2b2lkIDA7XG4vLyBHZW5lcmF0ZWQgYnkgZ2VudmVyc2lvbi5cbmV4cG9ydHMudmVyc2lvbiA9ICc0LjUzLjEnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/SDKVersion.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/StatsigClient.js":
/*!*******************************************************!*\
  !*** ./node_modules/statsig-js/dist/StatsigClient.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar DynamicConfig_1 = __importDefault(__webpack_require__(/*! ./DynamicConfig */ \"(ssr)/./node_modules/statsig-js/dist/DynamicConfig.js\"));\nvar ErrorBoundary_1 = __importDefault(__webpack_require__(/*! ./ErrorBoundary */ \"(ssr)/./node_modules/statsig-js/dist/ErrorBoundary.js\"));\nvar Errors_1 = __webpack_require__(/*! ./Errors */ \"(ssr)/./node_modules/statsig-js/dist/Errors.js\");\nvar FeatureGate_1 = __importDefault(__webpack_require__(/*! ./FeatureGate */ \"(ssr)/./node_modules/statsig-js/dist/FeatureGate.js\"));\nvar Layer_1 = __importDefault(__webpack_require__(/*! ./Layer */ \"(ssr)/./node_modules/statsig-js/dist/Layer.js\"));\nvar LogEvent_1 = __importDefault(__webpack_require__(/*! ./LogEvent */ \"(ssr)/./node_modules/statsig-js/dist/LogEvent.js\"));\nvar StatsigIdentity_1 = __importDefault(__webpack_require__(/*! ./StatsigIdentity */ \"(ssr)/./node_modules/statsig-js/dist/StatsigIdentity.js\"));\nvar StatsigLogger_1 = __importDefault(__webpack_require__(/*! ./StatsigLogger */ \"(ssr)/./node_modules/statsig-js/dist/StatsigLogger.js\"));\nvar StatsigNetwork_1 = __importDefault(__webpack_require__(/*! ./StatsigNetwork */ \"(ssr)/./node_modules/statsig-js/dist/StatsigNetwork.js\"));\nvar StatsigSDKOptions_1 = __importDefault(__webpack_require__(/*! ./StatsigSDKOptions */ \"(ssr)/./node_modules/statsig-js/dist/StatsigSDKOptions.js\"));\nvar StatsigStore_1 = __importDefault(__webpack_require__(/*! ./StatsigStore */ \"(ssr)/./node_modules/statsig-js/dist/StatsigStore.js\"));\nvar Diagnostics_1 = __importDefault(__webpack_require__(/*! ./utils/Diagnostics */ \"(ssr)/./node_modules/statsig-js/dist/utils/Diagnostics.js\"));\nvar EvaluationReason_1 = __webpack_require__(/*! ./utils/EvaluationReason */ \"(ssr)/./node_modules/statsig-js/dist/utils/EvaluationReason.js\");\nvar Hashing_1 = __webpack_require__(/*! ./utils/Hashing */ \"(ssr)/./node_modules/statsig-js/dist/utils/Hashing.js\");\nvar OutputLogger_1 = __importDefault(__webpack_require__(/*! ./utils/OutputLogger */ \"(ssr)/./node_modules/statsig-js/dist/utils/OutputLogger.js\"));\nvar ResponseVerification_1 = __webpack_require__(/*! ./utils/ResponseVerification */ \"(ssr)/./node_modules/statsig-js/dist/utils/ResponseVerification.js\");\nvar StatsigAsyncStorage_1 = __importDefault(__webpack_require__(/*! ./utils/StatsigAsyncStorage */ \"(ssr)/./node_modules/statsig-js/dist/utils/StatsigAsyncStorage.js\"));\nvar StatsigLocalStorage_1 = __importDefault(__webpack_require__(/*! ./utils/StatsigLocalStorage */ \"(ssr)/./node_modules/statsig-js/dist/utils/StatsigLocalStorage.js\"));\nvar Timing_1 = __webpack_require__(/*! ./utils/Timing */ \"(ssr)/./node_modules/statsig-js/dist/utils/Timing.js\");\nvar MAX_VALUE_SIZE = 64;\nvar MAX_OBJ_SIZE = 2048;\nvar StatsigClient = /** @class */ (function () {\n    function StatsigClient(sdkKey, user, options) {\n        var _this = this;\n        this.appState = null;\n        this.currentAppState = null;\n        this.appStateChangeSubscription = null;\n        this.onCacheLoadedForReact = null;\n        this.initCalled = false;\n        this.pendingInitPromise = null;\n        this.optionalLoggingSetup = false;\n        this.prefetchedUsersByCacheKey = {};\n        this.logLayerParameterExposureForLayer = function (layer, parameterName, isManualExposure) {\n            if (isManualExposure === void 0) { isManualExposure = false; }\n            var allocatedExperiment = '';\n            var exposures = layer._getUndelegatedSecondaryExposures();\n            var isExplicit = layer._getExplicitParameters().includes(parameterName);\n            if (isExplicit) {\n                allocatedExperiment = layer._getAllocatedExperimentName();\n                exposures = layer._getSecondaryExposures();\n            }\n            _this.logger.logLayerExposure(_this.getCurrentUser(), layer.getName(), layer.getRuleID(), exposures, allocatedExperiment, parameterName, isExplicit, layer._getEvaluationDetails(), isManualExposure);\n        };\n        if ((options === null || options === void 0 ? void 0 : options.localMode) !== true &&\n            (typeof sdkKey !== 'string' || !sdkKey.startsWith('client-'))) {\n            throw new Errors_1.StatsigInvalidArgumentError('Invalid key provided.  You must use a Client SDK Key from the Statsig console to initialize the sdk');\n        }\n        this.startTime = (0, Timing_1.now)();\n        this.options = new StatsigSDKOptions_1.default(options);\n        this.logger = new StatsigLogger_1.default(this);\n        Diagnostics_1.default.initialize({\n            options: this.options,\n        });\n        this.errorBoundary = new ErrorBoundary_1.default(sdkKey, this.options);\n        this.ready = false;\n        this.sdkKey = sdkKey;\n        OutputLogger_1.default.setLogger(this.options.getOutputLogger());\n        OutputLogger_1.default.setLogLevel(this.options.getLogLevel());\n        StatsigLocalStorage_1.default.disabled = this.options.getDisableLocalStorage();\n        this.identity = new StatsigIdentity_1.default(this.normalizeUser(user !== null && user !== void 0 ? user : null), this.options.getOverrideStableID(), StatsigClient.reactNativeUUID);\n        this.errorBoundary.setStatsigMetadata(this.getStatsigMetadata());\n        this.network = new StatsigNetwork_1.default(this);\n        this.store = new StatsigStore_1.default(this, this.options.getInitializeValues());\n        if (this.options.getInitializeValues() != null) {\n            var cb = this.options.getInitCompletionCallback();\n            this.ready = true;\n            this.initCalled = true;\n            setTimeout(function () { return _this.delayedSetup(); }, 20);\n            this.handleOptionalLogging();\n            if (cb) {\n                cb((0, Timing_1.now)() - this.startTime, true, null);\n            }\n        }\n    }\n    StatsigClient.prototype.getErrorBoundary = function () {\n        return this.errorBoundary;\n    };\n    StatsigClient.prototype.getNetwork = function () {\n        return this.network;\n    };\n    StatsigClient.prototype.getStore = function () {\n        return this.store;\n    };\n    StatsigClient.prototype.getLogger = function () {\n        return this.logger;\n    };\n    StatsigClient.prototype.getOptions = function () {\n        return this.options;\n    };\n    StatsigClient.prototype.getSDKKey = function () {\n        var _this = this;\n        return this.errorBoundary.capture('getSDKKey', function () {\n            var _a;\n            return (_a = _this.sdkKey) !== null && _a !== void 0 ? _a : '';\n        }, function () { return ''; });\n    };\n    StatsigClient.prototype.getCurrentUser = function () {\n        var _this = this;\n        return this.errorBoundary.capture('getCurrentUser', function () { return _this.identity.getUser(); }, function () { return null; });\n    };\n    StatsigClient.prototype.getCurrentUserCacheKey = function () {\n        var _this = this;\n        return this.errorBoundary.capture('getCurrentUserCacheKey', function () {\n            return (0, Hashing_1.getUserCacheKey)(_this.getStableID(), _this.getCurrentUser(), _this.getSDKKey());\n        }, function () { return ({ v1: '', v2: '', v3: '' }); });\n    };\n    StatsigClient.prototype.getCurrentUserUnitID = function (idType) {\n        var _this = this;\n        return this.errorBoundary.capture('getCurrentUserUnitID', function () { return _this.getUnitID(_this.getCurrentUser(), idType); }, function () { return ''; });\n    };\n    StatsigClient.prototype.getCurrentUserID = function () {\n        var _this = this;\n        return this.errorBoundary.capture('getCurrentUserID', function () { return _this.getUnitID(_this.getCurrentUser(), 'userid'); }, function () { return ''; });\n    };\n    StatsigClient.prototype.getUnitID = function (user, idType) {\n        var _a, _b, _c;\n        if (!user) {\n            return null;\n        }\n        if (idType.toLowerCase() === 'userid') {\n            return (_b = (_a = user.userID) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : null;\n        }\n        if (user.customIDs) {\n            return (_c = user.customIDs[idType]) !== null && _c !== void 0 ? _c : user.customIDs[idType.toLowerCase()];\n        }\n        return null;\n    };\n    StatsigClient.prototype.getStatsigMetadata = function () {\n        var _this = this;\n        return this.errorBoundary.capture('getStatsigMetadata', function () { return _this.identity.getStatsigMetadata(); }, function () {\n            return {};\n        });\n    };\n    StatsigClient.prototype.getSDKType = function () {\n        var _this = this;\n        return this.errorBoundary.capture('getSDKType', function () { return _this.identity.getSDKType(); }, function () { return ''; });\n    };\n    StatsigClient.prototype.getSDKVersion = function () {\n        var _this = this;\n        return this.errorBoundary.capture('getSDKVersion', function () { return _this.identity.getSDKVersion(); }, function () { return ''; });\n    };\n    StatsigClient.prototype.delayedSetup = function () {\n        var _this = this;\n        this.errorBoundary.swallow('delayedSetup', function () {\n            if (_this.options.getInitializeValues() != null) {\n                _this.fireAndForgetPrefechUsers();\n            }\n            _this.identity.saveStableID();\n            _this.logger\n                .sendSavedRequests()\n                .catch(function (reason) {\n                return _this.errorBoundary.logError('sendSavedRequests:delayedSetup', reason);\n            });\n        });\n    };\n    StatsigClient.prototype.setInitializeValues = function (initializeValues) {\n        var _this = this;\n        this.errorBoundary.capture('setInitializeValues', function () {\n            _this.store.bootstrap(initializeValues);\n            var cb = null;\n            if (!_this.ready) {\n                // the sdk is usable and considered initialized when configured\n                // with initializeValues\n                _this.ready = true;\n                _this.initCalled = true;\n                // only callback on the first time initialize values are set and the\n                // sdk is usable\n                cb = _this.options.getInitCompletionCallback();\n            }\n            // we wont have access to window/document/localStorage if these run on the server\n            // so try to run whenever this is called\n            _this.handleOptionalLogging();\n            _this.logger\n                .sendSavedRequests()\n                .catch(function (reason) {\n                return _this.errorBoundary.logError('sendSavedRequests:setInitializeValues', reason);\n            });\n            if (cb) {\n                cb((0, Timing_1.now)() - _this.startTime, true, null);\n            }\n        }, function () {\n            _this.ready = true;\n            _this.initCalled = true;\n            var cb = _this.options.getInitCompletionCallback();\n            if (cb) {\n                cb((0, Timing_1.now)() - _this.startTime, false, 'Caught an exception during setInitializeValues');\n            }\n        });\n    };\n    StatsigClient.prototype.initializeAsync = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.errorBoundary.capture('initializeAsync', function () { return __awaiter(_this, void 0, void 0, function () {\n                        var handler, listener, user;\n                        var _this = this;\n                        var _a;\n                        return __generator(this, function (_b) {\n                            switch (_b.label) {\n                                case 0:\n                                    if (this.pendingInitPromise != null) {\n                                        return [2 /*return*/, this.pendingInitPromise];\n                                    }\n                                    if (this.ready) {\n                                        return [2 /*return*/, Promise.resolve()];\n                                    }\n                                    Diagnostics_1.default.mark.overall.start({});\n                                    this.initCalled = true;\n                                    if (!StatsigAsyncStorage_1.default.asyncStorage) return [3 /*break*/, 3];\n                                    return [4 /*yield*/, this.identity.initAsync()];\n                                case 1:\n                                    _b.sent();\n                                    return [4 /*yield*/, this.store.loadAsync()];\n                                case 2:\n                                    _b.sent();\n                                    _b.label = 3;\n                                case 3:\n                                    (_a = this.onCacheLoadedForReact) === null || _a === void 0 ? void 0 : _a.call(this);\n                                    if (this.appState != null) {\n                                        handler = this.appState;\n                                        if (handler.addEventListener &&\n                                            typeof handler.addEventListener === 'function') {\n                                            this.currentAppState = handler.currentState;\n                                            listener = handler.addEventListener('change', this.handleAppStateChange.bind(this));\n                                            this.appStateChangeSubscription = listener;\n                                        }\n                                    }\n                                    if (this.options.getLocalModeEnabled()) {\n                                        return [2 /*return*/, Promise.resolve()];\n                                    }\n                                    user = this.identity.getUser();\n                                    this.pendingInitPromise = this.fetchAndSaveValues({\n                                        user: user,\n                                        prefetchUsers: this.options.getPrefetchUsers(),\n                                        timeout: this.options.getInitTimeoutMs(),\n                                    })\n                                        .then(function () {\n                                        Diagnostics_1.default.mark.overall.end({\n                                            success: true,\n                                            evaluationDetails: _this.store.getGlobalEvaluationDetails(),\n                                        });\n                                        return { success: true, message: null };\n                                    })\n                                        .catch(function (e) {\n                                        var _a;\n                                        _this.errorBoundary.logError('initializeAsync:fetchAndSaveValues', e);\n                                        Diagnostics_1.default.mark.overall.end({\n                                            success: false,\n                                            error: Diagnostics_1.default.formatError(e),\n                                            evaluationDetails: _this.store.getGlobalEvaluationDetails(),\n                                        });\n                                        return { success: false, message: (_a = e.message) !== null && _a !== void 0 ? _a : null };\n                                    })\n                                        .then(function (_a) {\n                                        var success = _a.success, message = _a.message;\n                                        var cb = _this.options.getInitCompletionCallback();\n                                        if (cb) {\n                                            cb((0, Timing_1.now)() - _this.startTime, success, message);\n                                        }\n                                        return;\n                                    })\n                                        .finally(function () {\n                                        _this.pendingInitPromise = null;\n                                        _this.ready = true;\n                                        _this.delayedSetup();\n                                        _this.logger.logDiagnostics(user, 'initialize');\n                                    });\n                                    this.handleOptionalLogging();\n                                    return [2 /*return*/, this.pendingInitPromise];\n                            }\n                        });\n                    }); }, function () {\n                        _this.ready = true;\n                        _this.initCalled = true;\n                        return Promise.resolve();\n                    })];\n            });\n        });\n    };\n    StatsigClient.prototype.prefetchUsers = function (users) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.errorBoundary.capture('prefetchUsers', function () {\n                        if (!users || users.length == 0) {\n                            return;\n                        }\n                        return _this.fetchAndSaveValues({\n                            user: null,\n                            prefetchUsers: users,\n                            timeout: 0,\n                        });\n                    }, function () {\n                        return Promise.resolve();\n                    })];\n            });\n        });\n    };\n    StatsigClient.prototype.getEvaluationDetails = function () {\n        var _this = this;\n        return this.errorBoundary.capture('getEvaluationDetails', function () {\n            return _this.store.getGlobalEvaluationDetails();\n        }, function () {\n            return {\n                time: Date.now(),\n                reason: EvaluationReason_1.EvaluationReason.Error,\n            };\n        });\n    };\n    /**\n     * Checks the value of a gate for the current user\n     * @param {string} gateName - the name of the gate to check\n     * @param {boolean} ignoreOverrides = false if this check should ignore local overrides\n     * @returns {boolean} - value of a gate for the user. Gates are \"off\" (return false) by default\n     * @throws Error if initialize() is not called first, or gateName is not a string\n     */\n    StatsigClient.prototype.checkGate = function (gateName, ignoreOverrides) {\n        var _this = this;\n        if (ignoreOverrides === void 0) { ignoreOverrides = false; }\n        return this.errorBoundary.capture('checkGate', function () {\n            var _a, _b, _c;\n            var result = _this.checkGateImpl(gateName, ignoreOverrides);\n            _this.logGateExposureImpl(gateName, result);\n            var cb = _this.options.getGateEvaluationCallback();\n            if (cb) {\n                cb(gateName, result.gate.value, {\n                    withExposureLoggingDisabled: false,\n                });\n            }\n            var ecb = _this.options.getEvaluationCallback();\n            if (ecb) {\n                var gate = new FeatureGate_1.default(gateName, result.gate.value, result.gate.rule_id, result.evaluationDetails, (_a = result.gate.group_name) !== null && _a !== void 0 ? _a : null, (_b = result.gate.id_type) !== null && _b !== void 0 ? _b : null, (_c = result.gate.secondary_exposures) !== null && _c !== void 0 ? _c : []);\n                ecb({ type: 'gate', gate: gate });\n            }\n            return result.gate.value === true;\n        }, function () { return false; }, { configName: gateName });\n    };\n    /**\n     * Gets the value and metadata of a gate evaluation for the current user\n     * @param {string} gateName - the name of the gate to check\n     * @returns {FeatureGate} - metadata about the value of the gate gate for the user. Gates are \"off\" (value false) by default\n     * @throws Error if initialize() is not called first, or gateName is not a string\n     */\n    StatsigClient.prototype.getFeatureGate = function (gateName, options) {\n        var _this = this;\n        if (options === void 0) { options = null; }\n        return this.errorBoundary.capture('getFeatureGate', function () {\n            var _a, _b, _c, _d, _e;\n            var result = _this.checkGateImpl(gateName, (_a = options === null || options === void 0 ? void 0 : options.ignoreOverrides) !== null && _a !== void 0 ? _a : false);\n            if (!(options === null || options === void 0 ? void 0 : options.disableExposureLogging)) {\n                _this.logGateExposureImpl(gateName, result);\n            }\n            else {\n                _this.logger.addNonExposedCheck(gateName);\n            }\n            var cb = _this.options.getGateEvaluationCallback();\n            if (cb) {\n                cb(gateName, result.gate.value, {\n                    withExposureLoggingDisabled: (_b = options === null || options === void 0 ? void 0 : options.disableExposureLogging) !== null && _b !== void 0 ? _b : false,\n                });\n            }\n            var gate = new FeatureGate_1.default(gateName, result.gate.value, result.gate.rule_id, result.evaluationDetails, (_c = result.gate.group_name) !== null && _c !== void 0 ? _c : null, (_d = result.gate.id_type) !== null && _d !== void 0 ? _d : null, (_e = result.gate.secondary_exposures) !== null && _e !== void 0 ? _e : []);\n            var ecb = _this.options.getEvaluationCallback();\n            if (ecb) {\n                ecb({ type: 'gate', gate: gate });\n            }\n            return gate;\n        }, function () {\n            return new FeatureGate_1.default(gateName, false, '', {\n                reason: EvaluationReason_1.EvaluationReason.Error,\n                time: Date.now(),\n            });\n        }, { configName: gateName });\n    };\n    StatsigClient.prototype.checkGateWithExposureLoggingDisabled = function (gateName, ignoreOverrides) {\n        var _this = this;\n        if (ignoreOverrides === void 0) { ignoreOverrides = false; }\n        return this.errorBoundary.capture('checkGateWithExposureLoggingDisabled', function () {\n            var _a, _b, _c;\n            _this.logger.addNonExposedCheck(gateName);\n            var result = _this.checkGateImpl(gateName, ignoreOverrides);\n            var cb = _this.options.getGateEvaluationCallback();\n            if (cb) {\n                cb(gateName, result.gate.value, {\n                    withExposureLoggingDisabled: true,\n                });\n            }\n            var ecb = _this.options.getEvaluationCallback();\n            if (ecb) {\n                var gate = new FeatureGate_1.default(gateName, result.gate.value, result.gate.rule_id, result.evaluationDetails, (_a = result.gate.group_name) !== null && _a !== void 0 ? _a : null, (_b = result.gate.id_type) !== null && _b !== void 0 ? _b : null, (_c = result.gate.secondary_exposures) !== null && _c !== void 0 ? _c : []);\n                ecb({ type: 'gate', gate: gate });\n            }\n            return result.gate.value === true;\n        }, function () { return false; });\n    };\n    StatsigClient.prototype.logGateExposure = function (gateName) {\n        var _this = this;\n        this.errorBoundary.swallow('logGateExposure', function () {\n            _this.logGateExposureImpl(gateName);\n        });\n    };\n    /**\n     * Checks the value of a config for the current user\n     * @param {string} configName - the name of the config to get\n     * @param {boolean} ignoreOverrides = false if this check should ignore local overrides\n     * @returns {DynamicConfig} - value of a config for the user\n     * @throws Error if initialize() is not called first, or configName is not a string\n     */\n    StatsigClient.prototype.getConfig = function (configName, ignoreOverrides) {\n        var _this = this;\n        if (ignoreOverrides === void 0) { ignoreOverrides = false; }\n        return this.errorBoundary.capture('getConfig', function () {\n            var result = _this.getConfigImpl(configName, ignoreOverrides);\n            _this.logConfigExposureImpl(configName, result);\n            var ecb = _this.options.getEvaluationCallback();\n            if (ecb) {\n                ecb({ type: 'config', config: result });\n            }\n            return result;\n        }, function () { return _this.getEmptyConfig(configName); }, { configName: configName });\n    };\n    StatsigClient.prototype.getConfigWithExposureLoggingDisabled = function (configName, ignoreOverrides) {\n        var _this = this;\n        if (ignoreOverrides === void 0) { ignoreOverrides = false; }\n        return this.errorBoundary.capture('getConfig', function () {\n            _this.logger.addNonExposedCheck(configName);\n            var result = _this.getConfigImpl(configName, ignoreOverrides);\n            var ecb = _this.options.getEvaluationCallback();\n            if (ecb) {\n                ecb({ type: 'config', config: result });\n            }\n            return result;\n        }, function () { return _this.getEmptyConfig(configName); });\n    };\n    StatsigClient.prototype.logConfigExposure = function (configName) {\n        var _this = this;\n        this.errorBoundary.swallow('logConfigExposure', function () {\n            _this.logConfigExposureImpl(configName);\n        });\n    };\n    /**\n     * Gets the experiment for a given user\n     * @param {string} experimentName - the name of the experiment to get\n     * @param {boolean} keepDeviceValue = false if this should use \"sticky\" values persisted in local storage\n     * @param {boolean} ignoreOverrides = false if this check should ignore local overrides\n     * @returns {DynamicConfig} - value of the experiment for the user, represented by a Dynamic Config object\n     * @throws Error if initialize() is not called first, or experimentName is not a string\n     */\n    StatsigClient.prototype.getExperiment = function (experimentName, keepDeviceValue, ignoreOverrides) {\n        var _this = this;\n        if (keepDeviceValue === void 0) { keepDeviceValue = false; }\n        if (ignoreOverrides === void 0) { ignoreOverrides = false; }\n        return this.errorBoundary.capture('getExperiment', function () {\n            var result = _this.getExperimentImpl(experimentName, keepDeviceValue, ignoreOverrides);\n            _this.logExperimentExposureImpl(experimentName, keepDeviceValue, result);\n            var ecb = _this.options.getEvaluationCallback();\n            if (ecb) {\n                ecb({ type: 'experiment', config: result });\n            }\n            return result;\n        }, function () { return _this.getEmptyConfig(experimentName); }, { configName: experimentName });\n    };\n    StatsigClient.prototype.getExperimentWithExposureLoggingDisabled = function (experimentName, keepDeviceValue, ignoreOverrides) {\n        var _this = this;\n        if (keepDeviceValue === void 0) { keepDeviceValue = false; }\n        if (ignoreOverrides === void 0) { ignoreOverrides = false; }\n        return this.errorBoundary.capture('getExperimentWithExposureLoggingDisabled', function () {\n            _this.logger.addNonExposedCheck(experimentName);\n            var result = _this.getExperimentImpl(experimentName, keepDeviceValue, ignoreOverrides);\n            var ecb = _this.options.getEvaluationCallback();\n            if (ecb) {\n                ecb({ type: 'experiment', config: result });\n            }\n            return result;\n        }, function () { return _this.getEmptyConfig(experimentName); });\n    };\n    StatsigClient.prototype.logExperimentExposure = function (experimentName, keepDeviceValue) {\n        var _this = this;\n        this.errorBoundary.swallow('logExperimentExposure', function () {\n            _this.logExperimentExposureImpl(experimentName, keepDeviceValue);\n        });\n    };\n    StatsigClient.prototype.getLayer = function (layerName, keepDeviceValue) {\n        var _this = this;\n        if (keepDeviceValue === void 0) { keepDeviceValue = false; }\n        return this.errorBoundary.capture('getLayer', function () {\n            var result = _this.getLayerImpl(_this.logLayerParameterExposureForLayer, layerName, keepDeviceValue);\n            var ecb = _this.options.getEvaluationCallback();\n            if (ecb) {\n                ecb({ type: 'layer', layer: result });\n            }\n            return result;\n        }, function () {\n            return Layer_1.default._create(layerName, {}, '', _this.getEvalutionDetailsForError());\n        }, { configName: layerName });\n    };\n    StatsigClient.prototype.getLayerWithExposureLoggingDisabled = function (layerName, keepDeviceValue) {\n        var _this = this;\n        if (keepDeviceValue === void 0) { keepDeviceValue = false; }\n        return this.errorBoundary.capture('getLayerWithExposureLoggingDisabled', function () {\n            _this.logger.addNonExposedCheck(layerName);\n            var result = _this.getLayerImpl(null, layerName, keepDeviceValue);\n            var ecb = _this.options.getEvaluationCallback();\n            if (ecb) {\n                ecb({ type: 'layer', layer: result });\n            }\n            return result;\n        }, function () {\n            return Layer_1.default._create(layerName, {}, '', _this.getEvalutionDetailsForError());\n        });\n    };\n    StatsigClient.prototype.logLayerParameterExposure = function (layerName, parameterName, keepDeviceValue) {\n        var _this = this;\n        if (keepDeviceValue === void 0) { keepDeviceValue = false; }\n        this.errorBoundary.swallow('logLayerParameterExposure', function () {\n            var layer = _this.getLayerImpl(null, layerName, keepDeviceValue);\n            _this.logLayerParameterExposureForLayer(layer, parameterName, true);\n        });\n    };\n    StatsigClient.prototype.logEvent = function (eventName, value, metadata) {\n        var _this = this;\n        if (value === void 0) { value = null; }\n        if (metadata === void 0) { metadata = null; }\n        this.errorBoundary.swallow('logEvent', function () {\n            if (!_this.logger || !_this.sdkKey) {\n                throw new Errors_1.StatsigUninitializedError('Must initialize() before logging events.');\n            }\n            if (typeof eventName !== 'string' || eventName.length === 0) {\n                OutputLogger_1.default.error('Event not logged. No valid eventName passed.');\n                return;\n            }\n            if (_this.shouldTrimParam(eventName, MAX_VALUE_SIZE)) {\n                OutputLogger_1.default.info('eventName is too long, trimming to ' +\n                    MAX_VALUE_SIZE +\n                    ' characters.');\n                eventName = eventName.substring(0, MAX_VALUE_SIZE);\n            }\n            if (typeof value === 'string' &&\n                _this.shouldTrimParam(value, MAX_VALUE_SIZE)) {\n                OutputLogger_1.default.info('value is too long, trimming to ' + MAX_VALUE_SIZE + '.');\n                value = value.substring(0, MAX_VALUE_SIZE);\n            }\n            if (_this.shouldTrimParam(metadata, MAX_OBJ_SIZE)) {\n                OutputLogger_1.default.info('metadata is too big. Dropping the metadata.');\n                metadata = { error: 'not logged due to size too large' };\n            }\n            var event = new LogEvent_1.default(eventName);\n            event.setValue(value);\n            event.setMetadata(metadata);\n            event.setUser(_this.getCurrentUser());\n            _this.logger.log(event);\n        });\n    };\n    StatsigClient.prototype.updateUserWithValues = function (user, values) {\n        var _this = this;\n        // eslint-disable-next-line statsig-linter/public-methods-error-boundary\n        var fireCompletionCallback;\n        return this.errorBoundary.capture('updateUserWithValues', function () {\n            var updateStartTime = Date.now();\n            if (!_this.initializeCalled()) {\n                throw new Errors_1.StatsigUninitializedError('Call initialize() first.');\n            }\n            fireCompletionCallback = function (success, error) {\n                var cb = _this.options.getUpdateUserCompletionCallback();\n                cb === null || cb === void 0 ? void 0 : cb(Date.now() - updateStartTime, success, error);\n            };\n            _this.identity.updateUser(_this.normalizeUser(user));\n            _this.store.bootstrap(values);\n            fireCompletionCallback(true, null);\n            return true;\n        }, function () {\n            fireCompletionCallback === null || fireCompletionCallback === void 0 ? void 0 : fireCompletionCallback(false, 'Failed to update user. An unexpected error occured.');\n            return false;\n        });\n    };\n    StatsigClient.prototype.updateUser = function (user) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fireCompletionCallback;\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.errorBoundary.capture('updateUser', function () { return __awaiter(_this, void 0, void 0, function () {\n                        var updateStartTime, userCacheKey, isUserPrefetched, cachedTime, currentUser;\n                        var _this = this;\n                        var _a;\n                        return __generator(this, function (_b) {\n                            switch (_b.label) {\n                                case 0:\n                                    updateStartTime = Date.now();\n                                    if (!this.initializeCalled()) {\n                                        throw new Errors_1.StatsigUninitializedError('Call initialize() first.');\n                                    }\n                                    fireCompletionCallback = function (success, error) {\n                                        var cb = _this.options.getUpdateUserCompletionCallback();\n                                        cb === null || cb === void 0 ? void 0 : cb(Date.now() - updateStartTime, success, error);\n                                    };\n                                    if (!(StatsigAsyncStorage_1.default.asyncStorage &&\n                                        ((_a = this.identity.getStatsigMetadata().stableID) !== null && _a !== void 0 ? _a : '') == '')) return [3 /*break*/, 2];\n                                    return [4 /*yield*/, this.identity.initAsync()];\n                                case 1:\n                                    _b.sent();\n                                    _b.label = 2;\n                                case 2:\n                                    this.identity.updateUser(this.normalizeUser(user));\n                                    userCacheKey = this.getCurrentUserCacheKey();\n                                    isUserPrefetched = Boolean(this.prefetchedUsersByCacheKey[userCacheKey.v3]);\n                                    cachedTime = this.store.updateUser(isUserPrefetched);\n                                    Diagnostics_1.default.clearContext('api_call');\n                                    this.logger.resetDedupeKeys();\n                                    if (cachedTime != null &&\n                                        (isUserPrefetched || this.isCacheValidForFetchMode(cachedTime))) {\n                                        fireCompletionCallback(true, null);\n                                        return [2 /*return*/, Promise.resolve(true)];\n                                    }\n                                    if (!(this.pendingInitPromise != null)) return [3 /*break*/, 4];\n                                    return [4 /*yield*/, this.pendingInitPromise];\n                                case 3:\n                                    _b.sent();\n                                    _b.label = 4;\n                                case 4:\n                                    if (this.options.getLocalModeEnabled()) {\n                                        fireCompletionCallback(true, null);\n                                        return [2 /*return*/, Promise.resolve(true)];\n                                    }\n                                    currentUser = this.identity.getUser();\n                                    this.pendingInitPromise = this.fetchAndSaveValues({\n                                        user: currentUser,\n                                        prefetchUsers: [],\n                                        timeout: undefined,\n                                    }).finally(function () {\n                                        _this.pendingInitPromise = null;\n                                    });\n                                    return [2 /*return*/, this.pendingInitPromise\n                                            .then(function () {\n                                            fireCompletionCallback(true, null);\n                                            return Promise.resolve(true);\n                                        })\n                                            .catch(function (error) {\n                                            fireCompletionCallback(false, \"Failed to update user: \".concat(error.message));\n                                            return Promise.resolve(false);\n                                        })];\n                            }\n                        });\n                    }); }, function () {\n                        fireCompletionCallback === null || fireCompletionCallback === void 0 ? void 0 : fireCompletionCallback(false, 'Failed to update user. An unexpected error occured.');\n                        return Promise.resolve(false);\n                    })];\n            });\n        });\n    };\n    /**\n     * Informs the statsig SDK that the client is closing or shutting down\n     * so the SDK can clean up internal state\n     */\n    StatsigClient.prototype.shutdown = function () {\n        var _this = this;\n        this.errorBoundary.swallow('shutdown', function () {\n            _this.logger.shutdown();\n            if (_this.appStateChangeSubscription != null) {\n                var sub = _this.appStateChangeSubscription;\n                if (typeof sub.remove === 'function') {\n                    sub.remove();\n                }\n            }\n            StatsigLocalStorage_1.default.cleanup();\n        });\n    };\n    StatsigClient.prototype.getInitializeResponseJson = function () {\n        var _this = this;\n        return this.errorBoundary.capture('getInitializeResponseJson', function () {\n            var _a;\n            return {\n                values: _this.store.getInitializeResponseJson(),\n                evaluationDetails: (_a = _this.getEvaluationDetails()) !== null && _a !== void 0 ? _a : {\n                    reason: EvaluationReason_1.EvaluationReason.Uninitialized,\n                    time: 0,\n                },\n            };\n        }, function () {\n            var _a;\n            return {\n                values: '',\n                evaluationDetails: (_a = _this.getEvaluationDetails()) !== null && _a !== void 0 ? _a : {\n                    reason: EvaluationReason_1.EvaluationReason.Uninitialized,\n                    time: 0,\n                },\n            };\n        });\n    };\n    /**\n     * Stores a local gate override\n     * @param gateName the gate to override\n     * @param value the value to override the gate to\n     */\n    StatsigClient.prototype.overrideGate = function (gateName, value) {\n        var _this = this;\n        this.errorBoundary.swallow('overrideGate', function () {\n            _this.ensureStoreLoaded();\n            _this.store.overrideGate(gateName, value);\n        });\n    };\n    /**\n     * Stores a local config override\n     * @param configName the config to override\n     * @param value the json value to override the config to\n     */\n    StatsigClient.prototype.overrideConfig = function (configName, value) {\n        var _this = this;\n        this.errorBoundary.swallow('overrideConfig', function () {\n            _this.ensureStoreLoaded();\n            _this.store.overrideConfig(configName, value);\n        });\n    };\n    /**\n     * Stores a local layer override\n     * @param layerName the layer to override\n     * @param value the json value to override the config to\n     */\n    StatsigClient.prototype.overrideLayer = function (layerName, value) {\n        var _this = this;\n        this.errorBoundary.swallow('overrideLayer', function () {\n            _this.ensureStoreLoaded();\n            _this.store.overrideLayer(layerName, value);\n        });\n    };\n    /**\n     * Removes the given gate override\n     * @param gateName\n     */\n    StatsigClient.prototype.removeGateOverride = function (gateName) {\n        var _this = this;\n        this.errorBoundary.swallow('removeGateOverride', function () {\n            _this.ensureStoreLoaded();\n            _this.store.removeGateOverride(gateName);\n        });\n    };\n    /**\n     * Removes the given config override\n     * @param configName\n     */\n    StatsigClient.prototype.removeConfigOverride = function (configName) {\n        var _this = this;\n        this.errorBoundary.swallow('removeConfigOverride', function () {\n            _this.ensureStoreLoaded();\n            _this.store.removeConfigOverride(configName);\n        });\n    };\n    /**\n     * Removes the given layer override\n     * @param layerName\n     */\n    StatsigClient.prototype.removeLayerOverride = function (layerName) {\n        var _this = this;\n        this.errorBoundary.swallow('removeLayerOverride', function () {\n            _this.ensureStoreLoaded();\n            _this.store.removeLayerOverride(layerName);\n        });\n    };\n    /**\n     * @deprecated - use removeGateOverride or removeConfig override\n     * Removes the given gate override\n     * @param gateName\n     */\n    StatsigClient.prototype.removeOverride = function (gateName) {\n        var _this = this;\n        this.errorBoundary.swallow('removeOverride', function () {\n            _this.ensureStoreLoaded();\n            _this.store.removeGateOverride(gateName);\n        });\n    };\n    /**\n     * @deprecated - use getAllOverrides to get gate and config overrides\n     * @returns Gate overrides\n     */\n    StatsigClient.prototype.getOverrides = function () {\n        var _this = this;\n        return this.errorBoundary.capture('getOverrides', function () {\n            _this.ensureStoreLoaded();\n            return _this.store.getAllOverrides().gates;\n        }, function () { return ({}); });\n    };\n    /**\n     * @returns The local gate and config overrides\n     */\n    StatsigClient.prototype.getAllOverrides = function () {\n        var _this = this;\n        return this.errorBoundary.capture('getAllOverrides', function () {\n            _this.ensureStoreLoaded();\n            return _this.store.getAllOverrides();\n        }, function () { return ({ gates: {}, configs: {}, layers: {} }); });\n    };\n    /**\n     * @returns The Statsig stable ID used for device level experiments\n     */\n    StatsigClient.prototype.getStableID = function () {\n        var _this = this;\n        return this.errorBoundary.capture('getStableID', function () { return _this.identity.getStatsigMetadata().stableID; }, function () { return ''; });\n    };\n    StatsigClient.prototype.initializeCalled = function () {\n        return this.initCalled;\n    };\n    // All methods below are for the statsig react native SDK internal usage only!\n    /* eslint-disable statsig-linter/public-methods-error-boundary */\n    StatsigClient.prototype.setSDKPackageInfo = function (sdkPackageInfo) {\n        if (sdkPackageInfo != null) {\n            this.identity.setSDKPackageInfo(sdkPackageInfo);\n            this.errorBoundary.setStatsigMetadata(this.getStatsigMetadata());\n        }\n    };\n    /**\n     * @params Debug information log with exposure event, and information will be living in metadata\n     */\n    StatsigClient.prototype.setDebugInfo = function (debugInfo) {\n        var _this = this;\n        this.errorBoundary.capture('setDebuggingInfo', function () {\n            if (!_this.initializeCalled()) {\n                throw new Errors_1.StatsigUninitializedError('Call initialize() first.');\n            }\n            _this.logger.setDebugInfo(debugInfo);\n        }, function () {\n            /* no-op */\n        });\n    };\n    StatsigClient.setAsyncStorage = function (asyncStorage) {\n        if (asyncStorage != null) {\n            StatsigAsyncStorage_1.default.asyncStorage = asyncStorage;\n        }\n    };\n    StatsigClient.prototype.setOnCacheLoadedReactCallback = function (fn) {\n        this.onCacheLoadedForReact = fn !== null && fn !== void 0 ? fn : null;\n    };\n    StatsigClient.setReactNativeUUID = function (uuid) {\n        if (uuid != null) {\n            StatsigClient.reactNativeUUID = uuid;\n        }\n    };\n    StatsigClient.prototype.setAppState = function (appState) {\n        if (appState != null) {\n            this.appState = appState;\n        }\n    };\n    StatsigClient.prototype.setNativeModules = function (nativeModules) {\n        if (nativeModules != null) {\n            this.identity.setNativeModules(nativeModules);\n        }\n    };\n    StatsigClient.prototype.setPlatform = function (platform) {\n        if (platform != null) {\n            this.identity.setPlatform(platform);\n        }\n    };\n    StatsigClient.prototype.setRNDeviceInfo = function (deviceInfo) {\n        if (deviceInfo != null) {\n            this.identity.setRNDeviceInfo(deviceInfo);\n        }\n    };\n    StatsigClient.prototype.setExpoConstants = function (expoConstants) {\n        if (expoConstants != null) {\n            this.identity.setExpoConstants(expoConstants);\n        }\n    };\n    StatsigClient.prototype.setExpoDevice = function (expoDevice) {\n        if (expoDevice != null) {\n            this.identity.setExpoDevice(expoDevice);\n        }\n    };\n    StatsigClient.prototype.flushEvents = function () {\n        this.logger.flush();\n    };\n    StatsigClient.prototype.reenableAllLogging = function () {\n        this.getOptions().reenableAllLogging();\n    };\n    StatsigClient.prototype.isCacheValidForFetchMode = function (cachedTime) {\n        if (this.options.getFetchMode() !== 'cache-or-network') {\n            return false;\n        }\n        // Only valid if the cache was during this session\n        return cachedTime > this.startTime;\n    };\n    StatsigClient.prototype.handleOptionalLogging = function () {\n        var _this = this;\n        var isErrorLoggingDisabled = this.options.getDisableErrorLogging();\n        var isAutoMetricsLoggingDisabled = this.options.getDisableAutoMetricsLogging();\n        if (isErrorLoggingDisabled && isAutoMetricsLoggingDisabled) {\n            return;\n        }\n        if (this.optionalLoggingSetup ||\n            typeof window === 'undefined' ||\n            !window ||\n            !window.addEventListener) {\n            return;\n        }\n        var user = this.identity.getUser();\n        if (!isErrorLoggingDisabled) {\n            window.addEventListener('error', function (e) {\n                var _a;\n                var errorObj = e.error;\n                if (errorObj != null && typeof errorObj === 'object') {\n                    try {\n                        errorObj = JSON.stringify(errorObj);\n                    }\n                    catch (e) {\n                        errorObj = 'Failed to stringify Error';\n                    }\n                }\n                _this.logger.logAppError(user, (_a = e.message) !== null && _a !== void 0 ? _a : '', {\n                    filename: e.filename,\n                    lineno: e.lineno,\n                    colno: e.colno,\n                    error_obj: errorObj,\n                });\n            });\n        }\n        if (!isAutoMetricsLoggingDisabled) {\n            if (typeof document === 'undefined' ||\n                !document ||\n                typeof setTimeout === 'undefined' ||\n                !setTimeout) {\n                return;\n            }\n            var work_1 = function () {\n                setTimeout(function () {\n                    _this.logger.logAppMetrics(user);\n                }, 1000);\n            };\n            if (document.readyState === 'complete') {\n                work_1();\n            }\n            else {\n                window.addEventListener('load', function () { return work_1(); });\n            }\n        }\n        this.optionalLoggingSetup = true;\n    };\n    StatsigClient.prototype.handleAppStateChange = function (nextAppState) {\n        var _this = this;\n        if (this.currentAppState === 'active' &&\n            nextAppState.match(/inactive|background/)) {\n            this.logger.flush(true);\n        }\n        else if (this.currentAppState != null &&\n            this.currentAppState.match(/inactive|background/) &&\n            nextAppState === 'active') {\n            this.logger\n                .sendSavedRequests()\n                .catch(function (reason) {\n                return _this.errorBoundary.logError('sendSavedRequests:handleAppStateChange', reason);\n            });\n        }\n        this.currentAppState = nextAppState;\n    };\n    StatsigClient.prototype.shouldTrimParam = function (entity, size) {\n        if (entity == null)\n            return false;\n        if (typeof entity === 'string')\n            return entity.length > size;\n        if (typeof entity === 'object') {\n            return JSON.stringify(entity).length > size;\n        }\n        if (typeof entity === 'number')\n            return entity.toString().length > size;\n        return false;\n    };\n    StatsigClient.prototype.normalizePrefetchUsers = function (users) {\n        var _this = this;\n        if (users == null) {\n            return [];\n        }\n        return users.map(function (user) { return _this.normalizeUser(user); });\n    };\n    StatsigClient.prototype.normalizeUser = function (user) {\n        var userCopy = {};\n        try {\n            userCopy = JSON.parse(JSON.stringify(user));\n        }\n        catch (error) {\n            throw new Errors_1.StatsigInvalidArgumentError('User object must be convertable to JSON string.');\n        }\n        userCopy = this.trimUserObjIfNeeded(userCopy);\n        if (this.options.getEnvironment() != null) {\n            userCopy.statsigEnvironment = this.options.getEnvironment();\n        }\n        return userCopy;\n    };\n    StatsigClient.prototype.trimUserObjIfNeeded = function (user) {\n        var _a, _b;\n        if (user == null) {\n            return {};\n        }\n        if (this.shouldTrimParam((_a = user.userID) !== null && _a !== void 0 ? _a : null, MAX_VALUE_SIZE)) {\n            OutputLogger_1.default.info('User ID is too large, trimming to ' + MAX_VALUE_SIZE + 'characters');\n            user.userID = (_b = user.userID) === null || _b === void 0 ? void 0 : _b.toString().substring(0, MAX_VALUE_SIZE);\n        }\n        if (this.shouldTrimParam(user, MAX_OBJ_SIZE)) {\n            user.custom = {};\n            if (this.shouldTrimParam(user, MAX_OBJ_SIZE)) {\n                OutputLogger_1.default.info('User object is too large, only keeping the user ID.');\n                user = { userID: user.userID };\n            }\n            else {\n                OutputLogger_1.default.info('User object is too large, dropping the custom property.');\n            }\n        }\n        return user;\n    };\n    StatsigClient.prototype.ensureStoreLoaded = function () {\n        if (!this.store.isLoaded()) {\n            throw new Errors_1.StatsigUninitializedError('Call and wait for initialize() to finish first.');\n        }\n    };\n    StatsigClient.prototype.getEvalutionDetailsForError = function () {\n        return {\n            time: Date.now(),\n            reason: EvaluationReason_1.EvaluationReason.Error,\n        };\n    };\n    StatsigClient.prototype.fetchAndSaveValues = function (args) {\n        var _a, _b, _c, _d;\n        return __awaiter(this, void 0, void 0, function () {\n            var user, prefetchUsers, timeout, keyedPrefetchUsers, stableID, sinceTime, previousHashUsed, previousDerivedFields;\n            var _this = this;\n            return __generator(this, function (_e) {\n                user = args.user;\n                prefetchUsers = (_a = args.prefetchUsers) !== null && _a !== void 0 ? _a : [];\n                timeout = (_b = args.timeout) !== null && _b !== void 0 ? _b : this.options.getInitTimeoutMs();\n                if (prefetchUsers.length > 5) {\n                    OutputLogger_1.default.info('Cannot prefetch more than 5 users.');\n                }\n                keyedPrefetchUsers = this.normalizePrefetchUsers(prefetchUsers)\n                    .slice(0, 5)\n                    .reduce(function (acc, curr) {\n                    acc[(0, Hashing_1.getUserCacheKey)(_this.getStableID(), curr, _this.getSDKKey()).v3] =\n                        curr;\n                    return acc;\n                }, {});\n                stableID = String((_d = (_c = this.getStatsigMetadata()) === null || _c === void 0 ? void 0 : _c.stableID) !== null && _d !== void 0 ? _d : '');\n                sinceTime = null;\n                if (prefetchUsers.length === 0) {\n                    sinceTime = this.store.getLastUpdateTime(user, stableID);\n                }\n                previousHashUsed = this.store.getPreviousHashUsed(user, stableID);\n                previousDerivedFields = this.store.getPreviousDerivedFields(user, stableID);\n                return [2 /*return*/, this.network\n                        .fetchValues({\n                        user: user,\n                        sinceTime: sinceTime,\n                        timeout: timeout,\n                        useDeltas: sinceTime != null &&\n                            previousHashUsed ===\n                                (this.getOptions().getDisableHashing() ? 'none' : 'djb2'),\n                        prefetchUsers: prefetchUsers.length > 0 ? keyedPrefetchUsers : undefined,\n                        previousDerivedFields: previousDerivedFields,\n                    })\n                        .eventually(function (json) {\n                        var _a;\n                        if (!(0, ResponseVerification_1.verifySDKKeyUsed)(json, (_a = _this.sdkKey) !== null && _a !== void 0 ? _a : '', _this.errorBoundary)) {\n                            return;\n                        }\n                        if (json === null || json === void 0 ? void 0 : json.has_updates) {\n                            _this.store\n                                .saveWithoutUpdatingClientState(user, json, stableID, prefetchUsers.length > 0 ? keyedPrefetchUsers : undefined)\n                                .catch(function (reason) {\n                                return _this.errorBoundary.logError('fetchAndSaveValues:eventually', reason);\n                            });\n                        }\n                    })\n                        .then(function (json) {\n                        return _this.errorBoundary.swallow('fetchAndSaveValues', function () { return __awaiter(_this, void 0, void 0, function () {\n                            var _a;\n                            return __generator(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0:\n                                        Diagnostics_1.default.mark.initialize.process.start({});\n                                        if (!(0, ResponseVerification_1.verifySDKKeyUsed)(json, (_a = this.sdkKey) !== null && _a !== void 0 ? _a : '', this.errorBoundary)) {\n                                            Diagnostics_1.default.mark.initialize.process.end({ success: false });\n                                            return [2 /*return*/];\n                                        }\n                                        if (!(json === null || json === void 0 ? void 0 : json.has_updates)) return [3 /*break*/, 2];\n                                        return [4 /*yield*/, this.store.save(user, json, stableID, prefetchUsers.length > 0 ? keyedPrefetchUsers : undefined)];\n                                    case 1:\n                                        _b.sent();\n                                        return [3 /*break*/, 3];\n                                    case 2:\n                                        if (json === null || json === void 0 ? void 0 : json.is_no_content) {\n                                            this.store.setEvaluationReason(EvaluationReason_1.EvaluationReason.NetworkNotModified);\n                                        }\n                                        _b.label = 3;\n                                    case 3:\n                                        this.prefetchedUsersByCacheKey = __assign(__assign({}, this.prefetchedUsersByCacheKey), keyedPrefetchUsers);\n                                        Diagnostics_1.default.mark.initialize.process.end({ success: true });\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); });\n                    })];\n            });\n        });\n    };\n    StatsigClient.prototype.checkGateImpl = function (gateName, ignoreOverrides) {\n        this.ensureStoreLoaded();\n        if (typeof gateName !== 'string' || gateName.length === 0) {\n            throw new Errors_1.StatsigInvalidArgumentError('Must pass a valid string as the gateName.');\n        }\n        return this.store.checkGate(gateName, ignoreOverrides);\n    };\n    StatsigClient.prototype.logGateExposureImpl = function (gateName, fetchResult) {\n        var isManualExposure = !fetchResult;\n        var result = fetchResult !== null && fetchResult !== void 0 ? fetchResult : this.checkGateImpl(gateName, false);\n        var gate = result.gate;\n        this.logger.logGateExposure(this.getCurrentUser(), gateName, gate.value, gate.rule_id, gate.secondary_exposures, result.evaluationDetails, isManualExposure);\n    };\n    StatsigClient.prototype.getConfigImpl = function (configName, ignoreOverrides) {\n        this.ensureStoreLoaded();\n        if (typeof configName !== 'string' || configName.length === 0) {\n            throw new Errors_1.StatsigInvalidArgumentError('Must pass a valid string as the configName.');\n        }\n        return this.store.getConfig(configName, ignoreOverrides);\n    };\n    StatsigClient.prototype.logConfigExposureImpl = function (configName, config) {\n        var isManualExposure = !config;\n        var localConfig = config !== null && config !== void 0 ? config : this.getConfigImpl(configName, false);\n        this.logger.logConfigExposure(this.getCurrentUser(), configName, localConfig.getRuleID(), localConfig._getSecondaryExposures(), localConfig.getEvaluationDetails(), isManualExposure);\n    };\n    StatsigClient.prototype.getExperimentImpl = function (experimentName, keepDeviceValue, ignoreOverrides) {\n        this.ensureStoreLoaded();\n        if (typeof experimentName !== 'string' || experimentName.length === 0) {\n            throw new Errors_1.StatsigInvalidArgumentError('Must pass a valid string as the experimentName.');\n        }\n        return this.store.getExperiment(experimentName, keepDeviceValue, ignoreOverrides);\n    };\n    StatsigClient.prototype.logExperimentExposureImpl = function (experimentName, keepDeviceValue, config) {\n        var isManualExposure = !config;\n        var localConfig = config !== null && config !== void 0 ? config : this.getExperimentImpl(experimentName, keepDeviceValue, false);\n        this.logger.logConfigExposure(this.getCurrentUser(), experimentName, localConfig.getRuleID(), localConfig._getSecondaryExposures(), localConfig.getEvaluationDetails(), isManualExposure);\n    };\n    StatsigClient.prototype.getLayerImpl = function (logParameterFunction, layerName, keepDeviceValue) {\n        this.ensureStoreLoaded();\n        if (typeof layerName !== 'string' || layerName.length === 0) {\n            throw new Errors_1.StatsigInvalidArgumentError('Must pass a valid string as the layerName.');\n        }\n        return this.store.getLayer(logParameterFunction, layerName, keepDeviceValue);\n    };\n    StatsigClient.prototype.getEmptyConfig = function (configName) {\n        return new DynamicConfig_1.default(configName, {}, '', this.getEvalutionDetailsForError());\n    };\n    StatsigClient.prototype.fireAndForgetPrefechUsers = function () {\n        this.prefetchUsers(this.options.getPrefetchUsers()).catch(function () {\n            /* noop */\n        });\n    };\n    return StatsigClient;\n}());\nexports[\"default\"] = StatsigClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/StatsigClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/StatsigIdentity.js":
/*!*********************************************************!*\
  !*** ./node_modules/statsig-js/dist/StatsigIdentity.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar uuid_1 = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/index.js\");\nvar SDKVersion_1 = __webpack_require__(/*! ./SDKVersion */ \"(ssr)/./node_modules/statsig-js/dist/SDKVersion.js\");\nvar Constants_1 = __webpack_require__(/*! ./utils/Constants */ \"(ssr)/./node_modules/statsig-js/dist/utils/Constants.js\");\nvar StatsigAsyncStorage_1 = __importDefault(__webpack_require__(/*! ./utils/StatsigAsyncStorage */ \"(ssr)/./node_modules/statsig-js/dist/utils/StatsigAsyncStorage.js\"));\nvar StatsigLocalStorage_1 = __importDefault(__webpack_require__(/*! ./utils/StatsigLocalStorage */ \"(ssr)/./node_modules/statsig-js/dist/utils/StatsigLocalStorage.js\"));\nvar Identity = /** @class */ (function () {\n    function Identity(user, overrideStableID, reactNativeUUID) {\n        var _a;\n        this.platform = null;\n        this.nativeModules = null;\n        this.sdkType = 'js-client';\n        this.reactNativeUUID = reactNativeUUID;\n        this.user = user;\n        this.sdkVersion = SDKVersion_1.version;\n        this.statsigMetadata = {\n            sdkType: this.sdkType,\n            sdkVersion: this.sdkVersion,\n        };\n        var stableID = overrideStableID;\n        if (!StatsigAsyncStorage_1.default.asyncStorage) {\n            stableID =\n                (_a = stableID !== null && stableID !== void 0 ? stableID : StatsigLocalStorage_1.default.getItem(Constants_1.STATSIG_STABLE_ID_KEY)) !== null && _a !== void 0 ? _a : this.getUUID();\n        }\n        if (stableID) {\n            this.statsigMetadata.stableID = stableID;\n        }\n    }\n    Identity.prototype.saveStableID = function () {\n        if (this.statsigMetadata.stableID != null) {\n            StatsigLocalStorage_1.default.setItem(Constants_1.STATSIG_STABLE_ID_KEY, this.statsigMetadata.stableID);\n        }\n    };\n    Identity.prototype.initAsync = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var stableID;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        stableID = this.statsigMetadata.stableID;\n                        if (!!stableID) return [3 /*break*/, 2];\n                        return [4 /*yield*/, StatsigAsyncStorage_1.default.getItemAsync(Constants_1.STATSIG_STABLE_ID_KEY)];\n                    case 1:\n                        stableID = _a.sent();\n                        stableID = stableID !== null && stableID !== void 0 ? stableID : this.getUUID();\n                        _a.label = 2;\n                    case 2:\n                        this.statsigMetadata.stableID = stableID;\n                        StatsigAsyncStorage_1.default.setItemAsync(Constants_1.STATSIG_STABLE_ID_KEY, stableID).catch(function () {\n                            //noop\n                        });\n                        return [2 /*return*/, this];\n                }\n            });\n        });\n    };\n    Identity.prototype.getSDKType = function () {\n        return this.sdkType;\n    };\n    Identity.prototype.getSDKVersion = function () {\n        return this.sdkVersion;\n    };\n    Identity.prototype.getStatsigMetadata = function () {\n        this.statsigMetadata.sdkType = this.sdkType;\n        this.statsigMetadata.sdkVersion = this.sdkVersion;\n        return this.statsigMetadata;\n    };\n    Identity.prototype.getUser = function () {\n        return this.user;\n    };\n    Identity.prototype.updateUser = function (user) {\n        this.user = user;\n    };\n    Identity.prototype.setSDKPackageInfo = function (SDKPackageInfo) {\n        this.sdkType = SDKPackageInfo.sdkType;\n        this.sdkVersion = SDKPackageInfo.sdkVersion;\n    };\n    Identity.prototype.setPlatform = function (platform) {\n        this.platform = platform;\n        this.updateMetadataFromNativeModules();\n    };\n    Identity.prototype.setNativeModules = function (nativeModules) {\n        this.nativeModules = nativeModules;\n        this.updateMetadataFromNativeModules();\n    };\n    Identity.prototype.updateMetadataFromNativeModules = function () {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (this.platform == null || this.nativeModules == null) {\n            return;\n        }\n        if (((_a = this.platform.OS) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === 'android') {\n            this.statsigMetadata.locale =\n                (_b = this.nativeModules.I18nManager) === null || _b === void 0 ? void 0 : _b.localeIdentifier;\n        }\n        else if (((_c = this.platform.OS) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === 'ios') {\n            this.statsigMetadata.locale =\n                ((_e = (_d = this.nativeModules.SettingsManager) === null || _d === void 0 ? void 0 : _d.settings) === null || _e === void 0 ? void 0 : _e.AppleLocale) ||\n                    ((_g = (_f = this.nativeModules.SettingsManager) === null || _f === void 0 ? void 0 : _f.settings) === null || _g === void 0 ? void 0 : _g.AppleLanguages[0]);\n        }\n    };\n    Identity.prototype.getUUID = function () {\n        var _a, _b;\n        return (_b = (_a = this.reactNativeUUID) === null || _a === void 0 ? void 0 : _a.v4()) !== null && _b !== void 0 ? _b : (0, uuid_1.v4)();\n    };\n    Identity.prototype.setRNDeviceInfo = function (deviceInfo) {\n        var _a, _b, _c, _d, _e;\n        this.statsigMetadata.appVersion = (_a = deviceInfo.getVersion()) !== null && _a !== void 0 ? _a : ''; // e.g. 1.0.1\n        this.statsigMetadata.systemVersion = (_b = deviceInfo.getSystemVersion()) !== null && _b !== void 0 ? _b : ''; // Android: \"4.0.3\"; iOS: \"12.3.1\"\n        this.statsigMetadata.systemName = (_c = deviceInfo.getSystemName()) !== null && _c !== void 0 ? _c : ''; // e.g. Android, iOS, iPadOS\n        this.statsigMetadata.deviceModelName = (_d = deviceInfo.getModel()) !== null && _d !== void 0 ? _d : ''; // e.g. Pixel 2, iPhone XS\n        this.statsigMetadata.deviceModel = (_e = deviceInfo.getDeviceId()) !== null && _e !== void 0 ? _e : ''; // e.g. iPhone7,2\n    };\n    Identity.prototype.setExpoConstants = function (expoConstants) {\n        var _a, _b;\n        this.statsigMetadata.appVersion =\n            (_b = (_a = expoConstants.nativeAppVersion) !== null && _a !== void 0 ? _a : expoConstants.nativeBuildVersion) !== null && _b !== void 0 ? _b : ''; // e.g. 1.0.1\n    };\n    Identity.prototype.setExpoDevice = function (expoDevice) {\n        var _a, _b, _c, _d;\n        this.statsigMetadata.systemVersion = (_a = expoDevice.osVersion) !== null && _a !== void 0 ? _a : ''; // Android: \"4.0.3\"; iOS: \"12.3.1\"\n        this.statsigMetadata.systemName = (_b = expoDevice.osName) !== null && _b !== void 0 ? _b : ''; // e.g. Android, iOS, iPadOS\n        this.statsigMetadata.deviceModelName = (_c = expoDevice.modelName) !== null && _c !== void 0 ? _c : ''; // e.g. Pixel 2, iPhone XS\n        this.statsigMetadata.deviceModel = (_d = expoDevice.modelId) !== null && _d !== void 0 ? _d : ''; // e.g. iPhone7,2\n    };\n    return Identity;\n}());\nexports[\"default\"] = Identity;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/StatsigIdentity.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/StatsigLogger.js":
/*!*******************************************************!*\
  !*** ./node_modules/statsig-js/dist/StatsigLogger.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar uuid_1 = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/index.js\");\nvar LogEvent_1 = __importDefault(__webpack_require__(/*! ./LogEvent */ \"(ssr)/./node_modules/statsig-js/dist/LogEvent.js\"));\nvar StatsigNetwork_1 = __webpack_require__(/*! ./StatsigNetwork */ \"(ssr)/./node_modules/statsig-js/dist/StatsigNetwork.js\");\nvar Constants_1 = __webpack_require__(/*! ./utils/Constants */ \"(ssr)/./node_modules/statsig-js/dist/utils/Constants.js\");\nvar Diagnostics_1 = __importDefault(__webpack_require__(/*! ./utils/Diagnostics */ \"(ssr)/./node_modules/statsig-js/dist/utils/Diagnostics.js\"));\nvar OutputLogger_1 = __importDefault(__webpack_require__(/*! ./utils/OutputLogger */ \"(ssr)/./node_modules/statsig-js/dist/utils/OutputLogger.js\"));\nvar StatsigAsyncStorage_1 = __importDefault(__webpack_require__(/*! ./utils/StatsigAsyncStorage */ \"(ssr)/./node_modules/statsig-js/dist/utils/StatsigAsyncStorage.js\"));\nvar StatsigLocalStorage_1 = __importDefault(__webpack_require__(/*! ./utils/StatsigLocalStorage */ \"(ssr)/./node_modules/statsig-js/dist/utils/StatsigLocalStorage.js\"));\nvar INTERNAL_EVENT_PREFIX = 'statsig::';\nvar CONFIG_EXPOSURE_EVENT = INTERNAL_EVENT_PREFIX + 'config_exposure';\nvar LAYER_EXPOSURE_EVENT = INTERNAL_EVENT_PREFIX + 'layer_exposure';\nvar GATE_EXPOSURE_EVENT = INTERNAL_EVENT_PREFIX + 'gate_exposure';\nvar LOG_FAILURE_EVENT = INTERNAL_EVENT_PREFIX + 'log_event_failed';\nvar APP_ERROR_EVENT = INTERNAL_EVENT_PREFIX + 'app_error';\nvar APP_METRICS_PAGE_LOAD_EVENT = INTERNAL_EVENT_PREFIX + 'app_metrics::page_load_time';\nvar APP_METRICS_DOM_INTERACTIVE_EVENT = INTERNAL_EVENT_PREFIX + 'app_metrics::dom_interactive_time';\nvar APP_METRICS_SCROLL_DEPTH_EVENT = INTERNAL_EVENT_PREFIX + 'app_metrics::scroll_depth';\nvar APP_METRICS_SESSION_LENGTH_EVENT = INTERNAL_EVENT_PREFIX + 'app_metrics::time_on_page_ms';\nvar DIAGNOSTICS_EVENT = INTERNAL_EVENT_PREFIX + 'diagnostics';\nvar DEFAULT_VALUE_WARNING = INTERNAL_EVENT_PREFIX + 'default_value_type_mismatch';\nvar NON_EXPOSED_CHECKS_EVENT = INTERNAL_EVENT_PREFIX + 'non_exposed_checks';\nvar MS_RETRY_LOGS_CUTOFF = 5 * 24 * 60 * 60 * 1000;\nvar MAX_BATCHES_TO_RETRY = 100;\nvar MAX_FAILED_EVENTS = 1000;\nvar MAX_LOCAL_STORAGE_SIZE = 1024 * MAX_FAILED_EVENTS;\nvar MAX_ERRORS_TO_LOG = 10;\nvar StatsigLogger = /** @class */ (function () {\n    function StatsigLogger(sdkInternal) {\n        this.failedLogEventCount = 0;\n        this.debugInfo = undefined;\n        this.sdkInternal = sdkInternal;\n        this.queue = [];\n        this.nonExposedChecks = {};\n        this.flushInterval = null;\n        this.loggedErrors = new Set();\n        this.failedLogEvents = [];\n        this.exposureDedupeKeys = {};\n        this.failedLogEventCount = 0;\n        this.init();\n    }\n    StatsigLogger.prototype.init = function () {\n        var _this = this;\n        if (typeof window !== 'undefined' &&\n            typeof window.addEventListener === 'function') {\n            window.addEventListener('blur', function () { return _this.flush(true); });\n            window.addEventListener('beforeunload', function () { return _this.flush(true); });\n            window.addEventListener('load', function () {\n                setTimeout(function () { return _this.flush(); }, 100);\n                setTimeout(function () { return _this.flush(); }, 1000);\n            });\n        }\n        if (typeof document !== 'undefined' &&\n            typeof document.addEventListener === 'function') {\n            document.addEventListener('visibilitychange', function () {\n                _this.flush(document.visibilityState !== 'visible');\n            });\n        }\n        if (!this.sdkInternal.getOptions().getIgnoreWindowUndefined() &&\n            (typeof window === 'undefined' || window == null)) {\n            // dont set the flush interval outside of client browser environments\n            return;\n        }\n        if (this.sdkInternal.getOptions().getLocalModeEnabled()) {\n            // unnecessary interval in local mode since logs dont flush anyway\n            return;\n        }\n        this.flushInterval = setInterval(function () {\n            _this.flush();\n        }, this.sdkInternal.getOptions().getLoggingIntervalMillis());\n        // Quick flush\n        setTimeout(function () { return _this.flush(); }, 100);\n        setTimeout(function () { return _this.flush(); }, 1000);\n    };\n    StatsigLogger.prototype.log = function (event) {\n        if (this.sdkInternal.getOptions().isAllLoggingDisabled()) {\n            return;\n        }\n        try {\n            if (!this.sdkInternal.getOptions().getDisableCurrentPageLogging() &&\n                typeof window !== 'undefined' &&\n                window != null &&\n                typeof window.location === 'object' &&\n                typeof window.location.href === 'string') {\n                // https://stackoverflow.com/questions/6257463/how-to-get-the-url-without-any-parameters-in-javascript\n                var parts = window.location.href.split(/[?#]/);\n                if ((parts === null || parts === void 0 ? void 0 : parts.length) > 0) {\n                    event.addStatsigMetadata('currentPage', parts[0]);\n                }\n            }\n        }\n        catch (_a) {\n            // noop\n        }\n        this.queue.push(event.toJsonObject());\n        if (this.queue.length >=\n            this.sdkInternal.getOptions().getLoggingBufferMaxSize()) {\n            this.flush();\n        }\n    };\n    StatsigLogger.prototype.resetDedupeKeys = function () {\n        this.exposureDedupeKeys = {};\n    };\n    StatsigLogger.prototype.setDebugInfo = function (debugInfo) {\n        this.debugInfo = debugInfo;\n    };\n    StatsigLogger.prototype.shouldLogExposure = function (key) {\n        var lastTime = this.exposureDedupeKeys[key];\n        var now = Date.now();\n        if (lastTime == null) {\n            this.exposureDedupeKeys[key] = now;\n            return true;\n        }\n        if (lastTime >= now - 600 * 1000) {\n            return false;\n        }\n        this.exposureDedupeKeys[key] = now;\n        return true;\n    };\n    StatsigLogger.prototype.addNonExposedCheck = function (configName) {\n        if (this.nonExposedChecks[configName] == null) {\n            this.nonExposedChecks[configName] = 1;\n        }\n        else {\n            this.nonExposedChecks[configName]++;\n        }\n    };\n    StatsigLogger.prototype.logGateExposure = function (user, gateName, gateValue, ruleID, secondaryExposures, details, isManualExposure) {\n        var dedupeKey = gateName + String(gateValue) + ruleID + details.reason;\n        if (!this.shouldLogExposure(dedupeKey)) {\n            return;\n        }\n        var metadata = {\n            gate: gateName,\n            gateValue: String(gateValue),\n            ruleID: ruleID,\n            reason: details.reason,\n            time: details.time,\n            debugInfo: this.debugInfo,\n        };\n        if (isManualExposure) {\n            metadata['isManualExposure'] = 'true';\n        }\n        var gateExposure = new LogEvent_1.default(GATE_EXPOSURE_EVENT);\n        gateExposure.setUser(user);\n        gateExposure.setMetadata(metadata);\n        gateExposure.setSecondaryExposures(secondaryExposures);\n        this.log(gateExposure);\n    };\n    StatsigLogger.prototype.logConfigExposure = function (user, configName, ruleID, secondaryExposures, details, isManualExposure) {\n        var dedupeKey = configName + ruleID + details.reason;\n        if (!this.shouldLogExposure(dedupeKey)) {\n            return;\n        }\n        var metadata = {\n            config: configName,\n            ruleID: ruleID,\n            reason: details.reason,\n            time: details.time,\n            debugInfo: this.debugInfo,\n        };\n        if (isManualExposure) {\n            metadata['isManualExposure'] = 'true';\n        }\n        var configExposure = new LogEvent_1.default(CONFIG_EXPOSURE_EVENT);\n        configExposure.setUser(user);\n        configExposure.setMetadata(metadata);\n        configExposure.setSecondaryExposures(secondaryExposures);\n        this.log(configExposure);\n    };\n    StatsigLogger.prototype.logLayerExposure = function (user, configName, ruleID, secondaryExposures, allocatedExperiment, parameterName, isExplicitParameter, details, isManualExposure) {\n        var dedupeKey = [\n            configName,\n            ruleID,\n            allocatedExperiment,\n            parameterName,\n            String(isExplicitParameter),\n            details.reason,\n        ].join('|');\n        if (!this.shouldLogExposure(dedupeKey)) {\n            return;\n        }\n        var metadata = {\n            config: configName,\n            ruleID: ruleID,\n            allocatedExperiment: allocatedExperiment,\n            parameterName: parameterName,\n            isExplicitParameter: String(isExplicitParameter),\n            reason: details.reason,\n            time: details.time,\n            debugInfo: this.debugInfo,\n        };\n        if (isManualExposure) {\n            metadata['isManualExposure'] = 'true';\n        }\n        var configExposure = new LogEvent_1.default(LAYER_EXPOSURE_EVENT);\n        configExposure.setUser(user);\n        configExposure.setMetadata(metadata);\n        configExposure.setSecondaryExposures(secondaryExposures);\n        this.log(configExposure);\n    };\n    StatsigLogger.prototype.logConfigDefaultValueFallback = function (user, message, metadata) {\n        this.logGenericEvent(DEFAULT_VALUE_WARNING, user, message, metadata);\n        this.loggedErrors.add(message);\n        OutputLogger_1.default.error(message);\n    };\n    StatsigLogger.prototype.logAppError = function (user, message, metadata) {\n        var trimmedMessage = message.substring(0, 128);\n        if (this.loggedErrors.has(trimmedMessage) ||\n            this.loggedErrors.size > MAX_ERRORS_TO_LOG) {\n            return;\n        }\n        this.logGenericEvent(APP_ERROR_EVENT, user, trimmedMessage, metadata);\n        this.loggedErrors.add(trimmedMessage);\n    };\n    StatsigLogger.prototype.logDiagnostics = function (user, context) {\n        var markers = Diagnostics_1.default.getMarkers(context);\n        if (markers.length <= 0) {\n            return;\n        }\n        Diagnostics_1.default.clearContext(context);\n        var event = this.makeDiagnosticsEvent(user, {\n            markers: markers,\n            context: context,\n            statsigOptions: this.sdkInternal.getOptions().getLoggingCopy(),\n        });\n        this.log(event);\n    };\n    StatsigLogger.prototype.logAppMetrics = function (user) {\n        var _this = this;\n        var _a;\n        if (typeof ((_a = window === null || window === void 0 ? void 0 : window.performance) === null || _a === void 0 ? void 0 : _a.getEntriesByType) !== 'function') {\n            return;\n        }\n        var entries = window.performance.getEntriesByType('navigation');\n        if (!entries || entries.length < 1) {\n            return;\n        }\n        var navEntry = entries[0];\n        var metadata = {\n            url: navEntry.name,\n        };\n        if (navEntry instanceof PerformanceNavigationTiming) {\n            this.logGenericEvent(APP_METRICS_PAGE_LOAD_EVENT, user, navEntry.duration, metadata);\n            this.logGenericEvent(APP_METRICS_DOM_INTERACTIVE_EVENT, user, navEntry.domInteractive - navEntry.startTime, metadata);\n        }\n        if (typeof (window === null || window === void 0 ? void 0 : window.addEventListener) === 'function' && (document === null || document === void 0 ? void 0 : document.body)) {\n            var deepestScroll_1 = 0;\n            var canLogScrollEvent_1 = false;\n            window.addEventListener('scroll', function () {\n                if ((document === null || document === void 0 ? void 0 : document.body) == null) {\n                    return;\n                }\n                try {\n                    var scrollHeight = document.body.scrollHeight || 1;\n                    var scrollDepth = Math.min(100, Math.round(((window.scrollY + window.innerHeight) / scrollHeight) * 100));\n                    if (scrollDepth > deepestScroll_1) {\n                        deepestScroll_1 = scrollDepth;\n                    }\n                    canLogScrollEvent_1 = true;\n                }\n                catch (_) {\n                    // best effort for auto metrics\n                }\n            });\n            window.addEventListener('beforeunload', function () {\n                if (canLogScrollEvent_1) {\n                    _this.logGenericEvent(APP_METRICS_SCROLL_DEPTH_EVENT, user, deepestScroll_1, metadata);\n                }\n                _this.logGenericEvent(APP_METRICS_SESSION_LENGTH_EVENT, user, window.performance.now(), metadata);\n            });\n        }\n    };\n    StatsigLogger.prototype.logGenericEvent = function (eventName, user, value, metadata) {\n        var evt = new LogEvent_1.default(eventName);\n        evt.setUser(user);\n        evt.setValue(value);\n        evt.setMetadata(metadata);\n        this.log(evt);\n        return evt;\n    };\n    StatsigLogger.prototype.shutdown = function () {\n        if (this.flushInterval) {\n            clearInterval(this.flushInterval);\n            this.flushInterval = null;\n        }\n        this.flush(true);\n    };\n    StatsigLogger.prototype.flush = function (isClosing) {\n        var _this = this;\n        if (isClosing === void 0) { isClosing = false; }\n        this.addErrorBoundaryDiagnostics();\n        this.addNonExposedChecksEvent();\n        if (this.queue.length === 0) {\n            if (isClosing) {\n                this.saveFailedRequests();\n            }\n            return;\n        }\n        var statsigMetadata = this.sdkInternal.getStatsigMetadata();\n        if (statsigMetadata.sessionID == null) {\n            statsigMetadata.sessionID = (0, uuid_1.v4)();\n        }\n        var oldQueue = this.queue;\n        this.queue = [];\n        if (isClosing &&\n            !this.sdkInternal.getNetwork().supportsKeepalive() &&\n            typeof navigator !== 'undefined' &&\n            (navigator === null || navigator === void 0 ? void 0 : navigator.sendBeacon) != null) {\n            var beacon = this.sdkInternal.getNetwork().sendLogBeacon({\n                events: oldQueue,\n                statsigMetadata: this.sdkInternal.getStatsigMetadata(),\n            });\n            if (!beacon) {\n                this.queue = oldQueue.concat(this.queue);\n                if (this.queue.length > 0) {\n                    this.addFailedRequest({\n                        events: this.queue,\n                        statsigMetadata: this.sdkInternal.getStatsigMetadata(),\n                        time: Date.now(),\n                    });\n                    this.queue = [];\n                }\n            }\n            this.saveFailedRequests();\n            return;\n        }\n        this.sdkInternal\n            .getNetwork()\n            .postToEndpoint(StatsigNetwork_1.StatsigEndpoint.Rgstr, {\n            events: oldQueue,\n            statsigMetadata: this.sdkInternal.getStatsigMetadata(),\n        }, {\n            retryOptions: {\n                retryLimit: 3,\n                backoff: 1000,\n            },\n            useKeepalive: isClosing,\n            additionalHeaders: { 'STATSIG-EVENT-COUNT': String(oldQueue.length) },\n        })\n            .then(function (response) {\n            if (!response.ok) {\n                throw response;\n            }\n        })\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            .catch(function (error) {\n            _this.addFailedRequest({\n                events: oldQueue,\n                statsigMetadata: _this.sdkInternal.getStatsigMetadata(),\n                time: Date.now(),\n            });\n        })\n            .finally(function () {\n            if (isClosing) {\n                _this.saveFailedRequests();\n            }\n        });\n    };\n    StatsigLogger.prototype.saveFailedRequests = function () {\n        var _this = this;\n        if (this.failedLogEvents.length > 0) {\n            var requestsCopy = JSON.stringify(this.failedLogEvents);\n            if (requestsCopy.length > MAX_LOCAL_STORAGE_SIZE) {\n                this.logDroppedLogEventsException(this.failedLogEventCount, 'Exceeds local storage size');\n                return;\n            }\n            if (StatsigAsyncStorage_1.default.asyncStorage) {\n                StatsigAsyncStorage_1.default.setItemAsync(Constants_1.STATSIG_LOCAL_STORAGE_LOGGING_REQUEST_KEY, requestsCopy).catch(function (reason) {\n                    return _this.sdkInternal\n                        .getErrorBoundary()\n                        .logError('saveFailedRequests', reason);\n                });\n                return;\n            }\n            StatsigLocalStorage_1.default.setItem(Constants_1.STATSIG_LOCAL_STORAGE_LOGGING_REQUEST_KEY, requestsCopy);\n        }\n    };\n    StatsigLogger.prototype.sendSavedRequests = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var failedRequests, fireAndForget, requestBodies, _loop_1, this_1, _i, requestBodies_1, requestBody;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        fireAndForget = false;\n                        if (!StatsigAsyncStorage_1.default.asyncStorage) return [3 /*break*/, 2];\n                        return [4 /*yield*/, StatsigAsyncStorage_1.default.getItemAsync(Constants_1.STATSIG_LOCAL_STORAGE_LOGGING_REQUEST_KEY)];\n                    case 1:\n                        failedRequests = _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        failedRequests = StatsigLocalStorage_1.default.getItem(Constants_1.STATSIG_LOCAL_STORAGE_LOGGING_REQUEST_KEY);\n                        _a.label = 3;\n                    case 3:\n                        if (failedRequests == null) {\n                            return [2 /*return*/];\n                        }\n                        if (failedRequests.length > MAX_LOCAL_STORAGE_SIZE) {\n                            fireAndForget = true;\n                        }\n                        requestBodies = [];\n                        try {\n                            requestBodies = JSON.parse(failedRequests);\n                            _loop_1 = function (requestBody) {\n                                if (requestBody != null &&\n                                    requestBody.events &&\n                                    Array.isArray(requestBody.events)) {\n                                    this_1.sdkInternal\n                                        .getNetwork()\n                                        .postToEndpoint(StatsigNetwork_1.StatsigEndpoint.Rgstr, requestBody, {\n                                        additionalHeaders: {\n                                            'STATSIG-EVENT-COUNT': String(requestBody.events.length),\n                                        },\n                                    })\n                                        .then(function (response) {\n                                        if (!response.ok) {\n                                            throw Error(response.status + '');\n                                        }\n                                    })\n                                        .catch(function () {\n                                        if (fireAndForget) {\n                                            _this.logDroppedLogEventsException(requestBody.events.length, 'Flush while shutting down');\n                                            return;\n                                        }\n                                        _this.addFailedRequest(requestBody);\n                                    });\n                                }\n                            };\n                            this_1 = this;\n                            for (_i = 0, requestBodies_1 = requestBodies; _i < requestBodies_1.length; _i++) {\n                                requestBody = requestBodies_1[_i];\n                                _loop_1(requestBody);\n                            }\n                        }\n                        catch (e) {\n                            OutputLogger_1.default.error('sendSavedRequests ', e);\n                            this.sdkInternal.getErrorBoundary().logError('sendSavedRequests', e);\n                        }\n                        finally {\n                            this.clearLocalStorageRequests();\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StatsigLogger.prototype.addFailedRequest = function (requestBody) {\n        var eventSize = requestBody.events.length;\n        if (requestBody.time < Date.now() - MS_RETRY_LOGS_CUTOFF) {\n            this.logDroppedLogEventsException(eventSize, 'Events too old');\n            return;\n        }\n        if (this.failedLogEvents.length > MAX_BATCHES_TO_RETRY) {\n            this.logDroppedLogEventsException(eventSize, 'Exceed max batches to retry');\n            return;\n        }\n        var additionalEvents = requestBody.events.length;\n        if (this.failedLogEventCount + additionalEvents > MAX_FAILED_EVENTS) {\n            this.logDroppedLogEventsException(eventSize, 'Exceeds max failed events');\n            return;\n        }\n        this.failedLogEvents.push(requestBody);\n        this.failedLogEventCount += additionalEvents;\n    };\n    StatsigLogger.prototype.clearLocalStorageRequests = function () {\n        var _this = this;\n        if (StatsigAsyncStorage_1.default.asyncStorage) {\n            StatsigAsyncStorage_1.default.removeItemAsync(Constants_1.STATSIG_LOCAL_STORAGE_LOGGING_REQUEST_KEY).catch(function (reason) {\n                return _this.sdkInternal\n                    .getErrorBoundary()\n                    .logError('clearLocalStorageRequests', reason);\n            });\n        }\n        else {\n            StatsigLocalStorage_1.default.removeItem(Constants_1.STATSIG_LOCAL_STORAGE_LOGGING_REQUEST_KEY);\n        }\n    };\n    StatsigLogger.prototype.makeDiagnosticsEvent = function (user, data) {\n        var latencyEvent = new LogEvent_1.default(DIAGNOSTICS_EVENT);\n        latencyEvent.setUser(user);\n        latencyEvent.setMetadata(data);\n        return latencyEvent;\n    };\n    StatsigLogger.prototype.addErrorBoundaryDiagnostics = function () {\n        if (Diagnostics_1.default.getMarkerCount('api_call') === 0) {\n            return;\n        }\n        var diagEvent = this.makeDiagnosticsEvent(this.sdkInternal.getCurrentUser(), {\n            context: 'api_call',\n            markers: Diagnostics_1.default.getMarkers('api_call'),\n        });\n        this.queue.push(diagEvent);\n        Diagnostics_1.default.clearContext('api_call');\n    };\n    StatsigLogger.prototype.addNonExposedChecksEvent = function () {\n        if (Object.keys(this.nonExposedChecks).length === 0) {\n            return;\n        }\n        var event = new LogEvent_1.default(NON_EXPOSED_CHECKS_EVENT);\n        event.setMetadata({\n            checks: __assign({}, this.nonExposedChecks),\n        });\n        this.queue.push(event);\n        this.nonExposedChecks = {};\n    };\n    StatsigLogger.prototype.logDroppedLogEventsException = function (count, reason) {\n        this.sdkInternal\n            .getErrorBoundary()\n            .logError(LOG_FAILURE_EVENT, new Error(reason), {\n            getExtraData: function () {\n                return {\n                    eventCount: count,\n                };\n            },\n        });\n    };\n    return StatsigLogger;\n}());\nexports[\"default\"] = StatsigLogger;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/StatsigLogger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/StatsigNetwork.js":
/*!********************************************************!*\
  !*** ./node_modules/statsig-js/dist/StatsigNetwork.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StatsigEndpoint = void 0;\nvar Errors_1 = __webpack_require__(/*! ./Errors */ \"(ssr)/./node_modules/statsig-js/dist/Errors.js\");\nvar StatsigRuntime_1 = __importDefault(__webpack_require__(/*! ./StatsigRuntime */ \"(ssr)/./node_modules/statsig-js/dist/StatsigRuntime.js\"));\nvar Diagnostics_1 = __importDefault(__webpack_require__(/*! ./utils/Diagnostics */ \"(ssr)/./node_modules/statsig-js/dist/utils/Diagnostics.js\"));\nvar OutputLogger_1 = __importDefault(__webpack_require__(/*! ./utils/OutputLogger */ \"(ssr)/./node_modules/statsig-js/dist/utils/OutputLogger.js\"));\nvar StatsigEndpoint;\n(function (StatsigEndpoint) {\n    StatsigEndpoint[\"Initialize\"] = \"initialize\";\n    StatsigEndpoint[\"Rgstr\"] = \"rgstr\";\n    StatsigEndpoint[\"LogEventBeacon\"] = \"log_event_beacon\";\n})(StatsigEndpoint = exports.StatsigEndpoint || (exports.StatsigEndpoint = {}));\nvar NO_CONTENT = 204;\nvar StatsigNetwork = /** @class */ (function () {\n    function StatsigNetwork(sdkInternal) {\n        this.retryCodes = {\n            408: true,\n            500: true,\n            502: true,\n            503: true,\n            504: true,\n            522: true,\n            524: true,\n            599: true,\n        };\n        this.canUseKeepalive = false;\n        this.sdkInternal = sdkInternal;\n        this.leakyBucket = {};\n        this.init();\n    }\n    StatsigNetwork.prototype.init = function () {\n        if (!this.sdkInternal.getOptions().getDisableNetworkKeepalive()) {\n            try {\n                this.canUseKeepalive = 'keepalive' in new Request('');\n            }\n            catch (_e) {\n                this.canUseKeepalive = false;\n            }\n        }\n    };\n    StatsigNetwork.prototype.fetchValues = function (args) {\n        var user = args.user, sinceTime = args.sinceTime, timeout = args.timeout, useDeltas = args.useDeltas, prefetchUsers = args.prefetchUsers, previousDerivedFields = args.previousDerivedFields, hadBadDeltaChecksum = args.hadBadDeltaChecksum, badChecksum = args.badChecksum, badMergedConfigs = args.badMergedConfigs, badFullResponse = args.badFullResponse;\n        var input = {\n            user: user,\n            prefetchUsers: prefetchUsers,\n            statsigMetadata: this.sdkInternal.getStatsigMetadata(),\n            sinceTime: sinceTime !== null && sinceTime !== void 0 ? sinceTime : undefined,\n            deltasResponseRequested: useDeltas,\n            hash: this.sdkInternal.getOptions().getDisableHashing() ? 'none' : 'djb2',\n            previousDerivedFields: previousDerivedFields,\n            hadBadDeltaChecksum: hadBadDeltaChecksum,\n            badChecksum: badChecksum,\n            badMergedConfigs: badMergedConfigs,\n            badFullResponse: badFullResponse,\n        };\n        return this.postWithTimeout(StatsigEndpoint.Initialize, input, {\n            timeout: timeout,\n            retries: this.sdkInternal.getOptions().getInitRequestRetries(),\n            diagnostics: Diagnostics_1.default.mark.initialize.networkRequest,\n        });\n    };\n    StatsigNetwork.prototype.postWithTimeout = function (endpointName, body, options) {\n        var _this = this;\n        var _a = options !== null && options !== void 0 ? options : {}, _b = _a.timeout, timeout = _b === void 0 ? 0 : _b, _c = _a.retries, retries = _c === void 0 ? 0 : _c, _d = _a.backoff, backoff = _d === void 0 ? 1000 : _d, _f = _a.diagnostics, diagnostics = _f === void 0 ? null : _f;\n        var hasTimedOut = false;\n        var timer = null;\n        var timerId;\n        var cachedReturnValue = null;\n        var eventuals = [];\n        var eventually = function (boundScope) { return function (fn) {\n            if (hasTimedOut && cachedReturnValue) {\n                fn(cachedReturnValue);\n            }\n            else {\n                eventuals.push(fn);\n            }\n            return boundScope;\n        }; };\n        if (timeout != 0) {\n            timer = new Promise(function (_, reject) {\n                timerId = setTimeout(function () {\n                    hasTimedOut = true;\n                    reject(new Errors_1.StatsigInitializationTimeoutError(timeout));\n                }, timeout);\n            });\n        }\n        var res;\n        var fetchPromise = this.postToEndpoint(endpointName, body, {\n            retryOptions: {\n                retryLimit: retries,\n                backoff: backoff,\n            },\n            diagnostics: diagnostics,\n        })\n            .then(function (localRes) {\n            res = localRes;\n            if (!res.ok) {\n                var errorMessage = \"Request to \".concat(endpointName, \" failed with status \").concat(res.status);\n                OutputLogger_1.default.error(errorMessage);\n                return Promise.reject(new Error(errorMessage));\n            }\n            if (typeof res.data !== 'object') {\n                var errorMessage = \"Request to \".concat(endpointName, \" received invalid response type. Expected 'object' but got '\").concat(typeof res.data, \"'\");\n                OutputLogger_1.default.error(errorMessage);\n                var error = new Error(errorMessage);\n                _this.sdkInternal\n                    .getErrorBoundary()\n                    .logError('postWithTimeoutInvalidRes', error, {\n                    getExtraData: function () {\n                        return _this.getErrorData(endpointName, body, retries, backoff, res);\n                    },\n                });\n                return Promise.reject(error);\n            }\n            var json = res.data;\n            return _this.sdkInternal.getErrorBoundary().capture('postWithTimeout', function () { return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    cachedReturnValue = json;\n                    if (hasTimedOut) {\n                        eventuals.forEach(function (fn) { return fn(json); });\n                        eventuals = [];\n                    }\n                    return [2 /*return*/, Promise.resolve(json)];\n                });\n            }); }, function () {\n                return Promise.resolve({});\n            }, {\n                getExtraData: function () {\n                    return _this.getErrorData(endpointName, body, retries, backoff, res);\n                },\n            });\n        })\n            .catch(function (e) {\n            return Promise.reject(e);\n        })\n            .finally(function () {\n            clearTimeout(timerId);\n        });\n        var racingPromise = (timer ? Promise.race([fetchPromise, timer]) : fetchPromise);\n        racingPromise.eventually = eventually(racingPromise);\n        return racingPromise;\n    };\n    StatsigNetwork.prototype.sendLogBeacon = function (payload) {\n        var statsigOpts = this.sdkInternal.getOptions();\n        if (statsigOpts.getLocalModeEnabled()) {\n            return true;\n        }\n        var url = new URL(statsigOpts.getEventLoggingApi() + StatsigEndpoint.LogEventBeacon);\n        url.searchParams.append('k', this.sdkInternal.getSDKKey());\n        payload.clientTime = Date.now() + '';\n        var stringPayload = null;\n        try {\n            stringPayload = JSON.stringify(payload);\n        }\n        catch (_e) {\n            return false;\n        }\n        return navigator.sendBeacon(url.toString(), stringPayload);\n    };\n    StatsigNetwork.prototype.postToEndpoint = function (endpointName, body, options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var _b, _c, useKeepalive, _d, diagnostics, _f, _g, retryLimit, _h, attempt, _j, backoff, statsigOpts, api, url, counter, shouldEncode, postBody, encoded, params, res, isRetryCode;\n            var _this = this;\n            return __generator(this, function (_k) {\n                _b = options !== null && options !== void 0 ? options : {}, _c = _b.useKeepalive, useKeepalive = _c === void 0 ? false : _c, _d = _b.diagnostics, diagnostics = _d === void 0 ? null : _d;\n                _f = (_a = options === null || options === void 0 ? void 0 : options.retryOptions) !== null && _a !== void 0 ? _a : {}, _g = _f.retryLimit, retryLimit = _g === void 0 ? 0 : _g, _h = _f.attempt, attempt = _h === void 0 ? 1 : _h, _j = _f.backoff, backoff = _j === void 0 ? 1000 : _j;\n                statsigOpts = this.sdkInternal.getOptions();\n                if (statsigOpts.getLocalModeEnabled()) {\n                    return [2 /*return*/, Promise.reject('no network requests in localMode')];\n                }\n                if (typeof fetch !== 'function') {\n                    // fetch is not defined in this environment, short circuit\n                    return [2 /*return*/, Promise.reject('fetch is not defined')];\n                }\n                if (typeof window === 'undefined' &&\n                    !statsigOpts.getIgnoreWindowUndefined()) {\n                    // by default, dont issue requests from the server\n                    return [2 /*return*/, Promise.reject('window is not defined')];\n                }\n                api = [StatsigEndpoint.Initialize].includes(endpointName)\n                    ? statsigOpts.getApi()\n                    : statsigOpts.getEventLoggingApi();\n                url = api + endpointName;\n                counter = this.leakyBucket[url];\n                if (counter != null && counter >= 30) {\n                    return [2 /*return*/, Promise.reject(new Error('Request failed because you are making the same request too frequently.'))];\n                }\n                if (counter == null) {\n                    this.leakyBucket[url] = 1;\n                }\n                else {\n                    this.leakyBucket[url] = counter + 1;\n                }\n                shouldEncode = endpointName === StatsigEndpoint.Initialize &&\n                    StatsigRuntime_1.default.encodeInitializeCall &&\n                    typeof window !== 'undefined' &&\n                    typeof (window === null || window === void 0 ? void 0 : window.btoa) === 'function';\n                postBody = JSON.stringify(body);\n                if (shouldEncode) {\n                    try {\n                        encoded = window.btoa(postBody).split('').reverse().join('');\n                        postBody = encoded;\n                    }\n                    catch (_e) {\n                        shouldEncode = false;\n                    }\n                }\n                params = {\n                    method: 'POST',\n                    body: postBody,\n                    headers: __assign({ 'Content-type': 'application/json; charset=UTF-8', 'STATSIG-API-KEY': this.sdkInternal.getSDKKey(), 'STATSIG-CLIENT-TIME': Date.now() + '', 'STATSIG-SDK-TYPE': this.sdkInternal.getSDKType(), 'STATSIG-SDK-VERSION': this.sdkInternal.getSDKVersion(), 'STATSIG-ENCODED': shouldEncode ? '1' : '0' }, options === null || options === void 0 ? void 0 : options.additionalHeaders),\n                };\n                if (this.canUseKeepalive && useKeepalive) {\n                    params.keepalive = true;\n                }\n                diagnostics === null || diagnostics === void 0 ? void 0 : diagnostics.start({ attempt: attempt });\n                isRetryCode = true;\n                return [2 /*return*/, fetch(url, params)\n                        .then(function (localRes) { return __awaiter(_this, void 0, void 0, function () {\n                        var networkResponse, text, errorText;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    res = localRes;\n                                    if (!res.ok) return [3 /*break*/, 4];\n                                    networkResponse = res;\n                                    if (!(res.status === NO_CONTENT)) return [3 /*break*/, 1];\n                                    networkResponse.data = { has_updates: false, is_no_content: true };\n                                    return [3 /*break*/, 3];\n                                case 1: return [4 /*yield*/, res.text()];\n                                case 2:\n                                    text = _a.sent();\n                                    networkResponse.data = JSON.parse(text);\n                                    _a.label = 3;\n                                case 3:\n                                    diagnostics === null || diagnostics === void 0 ? void 0 : diagnostics.end(this.getDiagnosticsData(res, attempt));\n                                    return [2 /*return*/, Promise.resolve(networkResponse)];\n                                case 4:\n                                    if (!this.retryCodes[res.status]) {\n                                        isRetryCode = false;\n                                    }\n                                    return [4 /*yield*/, res.text()];\n                                case 5:\n                                    errorText = _a.sent();\n                                    return [2 /*return*/, Promise.reject(new Error(\"\".concat(res.status, \": \").concat(errorText)))];\n                            }\n                        });\n                    }); })\n                        .catch(function (e) {\n                        diagnostics === null || diagnostics === void 0 ? void 0 : diagnostics.end(_this.getDiagnosticsData(res, attempt, e));\n                        var errorMessage = \"Error occurred while posting to endpoint: \".concat(e.message, \"\\n\") +\n                            \"Error Details: \".concat(JSON.stringify(e), \"\\n\") +\n                            \"Endpoint: \".concat(endpointName, \"\\n\") +\n                            \"Attempt: \".concat(attempt, \"\\n\") +\n                            \"Retry Limit: \".concat(retryLimit, \"\\n\") +\n                            \"Backoff: \".concat(backoff);\n                        OutputLogger_1.default.error(errorMessage);\n                        if (attempt < retryLimit && isRetryCode) {\n                            return new Promise(function (resolve, reject) {\n                                setTimeout(function () {\n                                    _this.leakyBucket[url] = Math.max(_this.leakyBucket[url] - 1, 0);\n                                    _this.postToEndpoint(endpointName, body, {\n                                        retryOptions: {\n                                            retryLimit: retryLimit,\n                                            attempt: attempt + 1,\n                                            backoff: backoff * 2,\n                                        },\n                                        useKeepalive: useKeepalive,\n                                        diagnostics: diagnostics,\n                                    })\n                                        .then(resolve)\n                                        .catch(reject);\n                                }, backoff);\n                            });\n                        }\n                        return Promise.reject(e);\n                    })\n                        .finally(function () {\n                        _this.leakyBucket[url] = Math.max(_this.leakyBucket[url] - 1, 0);\n                    })];\n            });\n        });\n    };\n    StatsigNetwork.prototype.supportsKeepalive = function () {\n        return this.canUseKeepalive;\n    };\n    StatsigNetwork.prototype.getDiagnosticsData = function (res, attempt, e) {\n        var _a, _b;\n        return {\n            success: (res === null || res === void 0 ? void 0 : res.ok) === true,\n            statusCode: res === null || res === void 0 ? void 0 : res.status,\n            sdkRegion: (_a = res === null || res === void 0 ? void 0 : res.headers) === null || _a === void 0 ? void 0 : _a.get('x-statsig-region'),\n            isDelta: ((_b = res === null || res === void 0 ? void 0 : res.data) === null || _b === void 0 ? void 0 : _b.is_delta) === true,\n            attempt: attempt,\n            error: Diagnostics_1.default.formatError(e),\n        };\n    };\n    StatsigNetwork.prototype.getErrorData = function (endpointName, body, retries, backoff, res) {\n        var _a;\n        try {\n            var headers_1 = {};\n            ((_a = res.headers) !== null && _a !== void 0 ? _a : []).forEach(function (value, key) {\n                headers_1[key] = value;\n            });\n            return {\n                responseInfo: {\n                    headers: headers_1,\n                    status: res.status,\n                    statusText: res.statusText,\n                    type: res.type,\n                    url: res.url,\n                    redirected: res.redirected,\n                    bodySnippet: res.data ? JSON.stringify(res.data).slice(0, 500) : null,\n                },\n                requestInfo: {\n                    endpointName: endpointName,\n                    bodySnippet: JSON.stringify(body).slice(0, 500),\n                    retries: retries,\n                    backoff: backoff,\n                },\n            };\n        }\n        catch (_e) {\n            return {\n                statusText: 'statsig::failed to extract extra data',\n            };\n        }\n    };\n    return StatsigNetwork;\n}());\nexports[\"default\"] = StatsigNetwork;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/StatsigNetwork.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/StatsigRuntime.js":
/*!********************************************************!*\
  !*** ./node_modules/statsig-js/dist/StatsigRuntime.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar StatsigRuntime = /** @class */ (function () {\n    function StatsigRuntime() {\n    }\n    StatsigRuntime.encodeInitializeCall = true;\n    return StatsigRuntime;\n}());\nexports[\"default\"] = StatsigRuntime;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L1N0YXRzaWdSdW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbWF6b24tZnJlc2gtZGVtby8uL25vZGVfbW9kdWxlcy9zdGF0c2lnLWpzL2Rpc3QvU3RhdHNpZ1J1bnRpbWUuanM/NDJjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdGF0c2lnUnVudGltZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdGF0c2lnUnVudGltZSgpIHtcbiAgICB9XG4gICAgU3RhdHNpZ1J1bnRpbWUuZW5jb2RlSW5pdGlhbGl6ZUNhbGwgPSB0cnVlO1xuICAgIHJldHVybiBTdGF0c2lnUnVudGltZTtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTdGF0c2lnUnVudGltZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/StatsigRuntime.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/StatsigSDKOptions.js":
/*!***********************************************************!*\
  !*** ./node_modules/statsig-js/dist/StatsigSDKOptions.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LogLevel = exports.INIT_TIMEOUT_DEFAULT_MS = void 0;\nvar DEFAULT_FEATURE_GATE_API = 'https://featuregates.org/v1/';\nvar DEFAULT_EVENT_LOGGING_API = 'https://events.statsigapi.net/v1/';\nvar DEFAULT_INIT_NETWORK_RETRIES = 3;\nexports.INIT_TIMEOUT_DEFAULT_MS = 3000;\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[\"NONE\"] = \"NONE\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"WARN\"] = \"WARN\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\nvar StatsigSDKOptions = /** @class */ (function () {\n    function StatsigSDKOptions(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;\n        if (options == null) {\n            options = {};\n        }\n        var api = (_a = options.api) !== null && _a !== void 0 ? _a : DEFAULT_FEATURE_GATE_API;\n        this.api = api.endsWith('/') ? api : api + '/';\n        this.disableCurrentPageLogging = (_b = options.disableCurrentPageLogging) !== null && _b !== void 0 ? _b : false;\n        this.environment = (_c = options.environment) !== null && _c !== void 0 ? _c : null;\n        this.loggingIntervalMillis = this.normalizeNumberInput(options.loggingIntervalMillis, {\n            default: 10000,\n            min: 1000,\n            max: 60000,\n        });\n        this.loggingBufferMaxSize = this.normalizeNumberInput(options.loggingBufferMaxSize, {\n            default: 100,\n            min: 2,\n            max: 500,\n        });\n        this.disableNetworkKeepalive = (_d = options.disableNetworkKeepalive) !== null && _d !== void 0 ? _d : false;\n        this.initRequestRetries =\n            (_e = options.initRequestRetries) !== null && _e !== void 0 ? _e : DEFAULT_INIT_NETWORK_RETRIES;\n        this.overrideStableID = (_f = options.overrideStableID) !== null && _f !== void 0 ? _f : null;\n        this.localMode = (_g = options.localMode) !== null && _g !== void 0 ? _g : false;\n        this.initTimeoutMs =\n            options.initTimeoutMs && options.initTimeoutMs >= 0\n                ? options.initTimeoutMs\n                : exports.INIT_TIMEOUT_DEFAULT_MS;\n        this.disableErrorLogging = (_h = options.disableErrorLogging) !== null && _h !== void 0 ? _h : false;\n        this.disableAutoMetricsLogging = (_j = options.disableAutoMetricsLogging) !== null && _j !== void 0 ? _j : false;\n        this.initializeValues = (_k = options.initializeValues) !== null && _k !== void 0 ? _k : null;\n        var eventLoggingApi = (_m = (_l = options.eventLoggingApi) !== null && _l !== void 0 ? _l : options.api) !== null && _m !== void 0 ? _m : DEFAULT_EVENT_LOGGING_API;\n        this.eventLoggingApi = eventLoggingApi.endsWith('/')\n            ? eventLoggingApi\n            : eventLoggingApi + '/';\n        this.prefetchUsers = (_o = options.prefetchUsers) !== null && _o !== void 0 ? _o : [];\n        this.disableLocalStorage = (_p = options.disableLocalStorage) !== null && _p !== void 0 ? _p : false;\n        this.initCompletionCallback = (_q = options.initCompletionCallback) !== null && _q !== void 0 ? _q : null;\n        this.updateCompletionCallback =\n            (_r = options.updateUserCompletionCallback) !== null && _r !== void 0 ? _r : null;\n        this.disableDiagnosticsLogging = (_s = options.disableDiagnosticsLogging) !== null && _s !== void 0 ? _s : false;\n        this.logLevel = (_t = options === null || options === void 0 ? void 0 : options.logLevel) !== null && _t !== void 0 ? _t : LogLevel.NONE;\n        this.logger = (_u = options === null || options === void 0 ? void 0 : options.logger) !== null && _u !== void 0 ? _u : console;\n        this.ignoreWindowUndefined = (_v = options === null || options === void 0 ? void 0 : options.ignoreWindowUndefined) !== null && _v !== void 0 ? _v : false;\n        this.fetchMode = (_w = options.fetchMode) !== null && _w !== void 0 ? _w : 'network-only';\n        this.disableLocalOverrides = (_x = options === null || options === void 0 ? void 0 : options.disableLocalOverrides) !== null && _x !== void 0 ? _x : false;\n        this.gateEvaluationCallback = (_y = options === null || options === void 0 ? void 0 : options.gateEvaluationCallback) !== null && _y !== void 0 ? _y : null;\n        this.userPersistentStorage = (_z = options === null || options === void 0 ? void 0 : options.userPersistentStorage) !== null && _z !== void 0 ? _z : null;\n        this.disableAllLogging = (_0 = options.disableAllLogging) !== null && _0 !== void 0 ? _0 : false;\n        this.setLoggingCopy(options);\n        this.disableHashing = (_1 = options.disableHashing) !== null && _1 !== void 0 ? _1 : false;\n        this.evaluationCallback = (_2 = options.evaluationCallback) !== null && _2 !== void 0 ? _2 : null;\n    }\n    StatsigSDKOptions.prototype.setLoggingCopy = function (options) {\n        if (options == null || this.loggingCopy != null) {\n            return;\n        }\n        var loggingCopy = {};\n        Object.entries(options).forEach(function (_a) {\n            var _b, _c;\n            var option = _a[0], value = _a[1];\n            var valueType = typeof value;\n            switch (valueType) {\n                case 'number':\n                case 'bigint':\n                case 'boolean':\n                    loggingCopy[String(option)] = value;\n                    break;\n                case 'string':\n                    if (value.length < 50) {\n                        loggingCopy[String(option)] = value;\n                    }\n                    else {\n                        loggingCopy[String(option)] = 'set';\n                    }\n                    break;\n                case 'object':\n                    if (option === 'environment') {\n                        loggingCopy['environment'] = value;\n                    }\n                    else if (option === 'prefetchUsers') {\n                        loggingCopy['prefetchUsers'] =\n                            ((_c = (_b = options.prefetchUsers) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0) > 0;\n                    }\n                    else {\n                        loggingCopy[String(option)] = value != null ? 'set' : 'unset';\n                    }\n                    break;\n                case 'function':\n                    if (option === 'userPersistentStorage') {\n                        loggingCopy['userPersistentStorage'] =\n                            value != null ? 'set' : 'unset';\n                    }\n            }\n        });\n        this.loggingCopy = loggingCopy;\n    };\n    StatsigSDKOptions.prototype.getLoggingCopy = function () {\n        return this.loggingCopy;\n    };\n    StatsigSDKOptions.prototype.getOutputLogger = function () {\n        return this.logger;\n    };\n    StatsigSDKOptions.prototype.getApi = function () {\n        return this.api;\n    };\n    StatsigSDKOptions.prototype.getEnvironment = function () {\n        return this.environment;\n    };\n    StatsigSDKOptions.prototype.getDisableCurrentPageLogging = function () {\n        return this.disableCurrentPageLogging;\n    };\n    StatsigSDKOptions.prototype.getLoggingIntervalMillis = function () {\n        return this.loggingIntervalMillis;\n    };\n    StatsigSDKOptions.prototype.getLoggingBufferMaxSize = function () {\n        return this.loggingBufferMaxSize;\n    };\n    StatsigSDKOptions.prototype.getDisableNetworkKeepalive = function () {\n        return this.disableNetworkKeepalive;\n    };\n    StatsigSDKOptions.prototype.getOverrideStableID = function () {\n        return this.overrideStableID;\n    };\n    StatsigSDKOptions.prototype.getLocalModeEnabled = function () {\n        return this.localMode;\n    };\n    StatsigSDKOptions.prototype.getInitTimeoutMs = function () {\n        return this.initTimeoutMs;\n    };\n    StatsigSDKOptions.prototype.getDisableErrorLogging = function () {\n        return this.disableErrorLogging;\n    };\n    StatsigSDKOptions.prototype.getDisableAutoMetricsLogging = function () {\n        return this.disableAutoMetricsLogging;\n    };\n    StatsigSDKOptions.prototype.getInitializeValues = function () {\n        return this.initializeValues;\n    };\n    StatsigSDKOptions.prototype.getEventLoggingApi = function () {\n        return this.eventLoggingApi;\n    };\n    StatsigSDKOptions.prototype.getPrefetchUsers = function () {\n        return this.prefetchUsers;\n    };\n    StatsigSDKOptions.prototype.getDisableLocalStorage = function () {\n        return this.disableLocalStorage;\n    };\n    StatsigSDKOptions.prototype.getInitCompletionCallback = function () {\n        return this.initCompletionCallback;\n    };\n    StatsigSDKOptions.prototype.getUpdateUserCompletionCallback = function () {\n        return this.updateCompletionCallback;\n    };\n    StatsigSDKOptions.prototype.getDisableDiagnosticsLogging = function () {\n        return this.disableDiagnosticsLogging;\n    };\n    StatsigSDKOptions.prototype.getLogLevel = function () {\n        return this.logLevel;\n    };\n    StatsigSDKOptions.prototype.getIgnoreWindowUndefined = function () {\n        return this.ignoreWindowUndefined;\n    };\n    StatsigSDKOptions.prototype.getFetchMode = function () {\n        return this.fetchMode;\n    };\n    StatsigSDKOptions.prototype.getDisableLocalOverrides = function () {\n        return this.disableLocalOverrides;\n    };\n    StatsigSDKOptions.prototype.getGateEvaluationCallback = function () {\n        return this.gateEvaluationCallback;\n    };\n    StatsigSDKOptions.prototype.getUserPersistentStorage = function () {\n        return this.userPersistentStorage;\n    };\n    StatsigSDKOptions.prototype.getDisableHashing = function () {\n        return this.disableHashing;\n    };\n    StatsigSDKOptions.prototype.getInitRequestRetries = function () {\n        return this.initRequestRetries;\n    };\n    StatsigSDKOptions.prototype.isAllLoggingDisabled = function () {\n        return this.disableAllLogging;\n    };\n    StatsigSDKOptions.prototype.reenableAllLogging = function () {\n        this.disableAllLogging = false;\n    };\n    StatsigSDKOptions.prototype.getEvaluationCallback = function () {\n        return this.evaluationCallback;\n    };\n    StatsigSDKOptions.prototype.normalizeNumberInput = function (input, bounds) {\n        if (input == null) {\n            return bounds.default;\n        }\n        return Math.max(Math.min(input, bounds.max), bounds.min);\n    };\n    return StatsigSDKOptions;\n}());\nexports[\"default\"] = StatsigSDKOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/StatsigSDKOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/StatsigStore.js":
/*!******************************************************!*\
  !*** ./node_modules/statsig-js/dist/StatsigStore.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar DynamicConfig_1 = __importDefault(__webpack_require__(/*! ./DynamicConfig */ \"(ssr)/./node_modules/statsig-js/dist/DynamicConfig.js\"));\nvar Layer_1 = __importDefault(__webpack_require__(/*! ./Layer */ \"(ssr)/./node_modules/statsig-js/dist/Layer.js\"));\nvar BootstrapValidator_1 = __importDefault(__webpack_require__(/*! ./utils/BootstrapValidator */ \"(ssr)/./node_modules/statsig-js/dist/utils/BootstrapValidator.js\"));\nvar Constants_1 = __webpack_require__(/*! ./utils/Constants */ \"(ssr)/./node_modules/statsig-js/dist/utils/Constants.js\");\nvar EvaluationReason_1 = __webpack_require__(/*! ./utils/EvaluationReason */ \"(ssr)/./node_modules/statsig-js/dist/utils/EvaluationReason.js\");\nvar Hashing_1 = __webpack_require__(/*! ./utils/Hashing */ \"(ssr)/./node_modules/statsig-js/dist/utils/Hashing.js\");\nvar OutputLogger_1 = __importDefault(__webpack_require__(/*! ./utils/OutputLogger */ \"(ssr)/./node_modules/statsig-js/dist/utils/OutputLogger.js\"));\nvar ResponseVerification_1 = __webpack_require__(/*! ./utils/ResponseVerification */ \"(ssr)/./node_modules/statsig-js/dist/utils/ResponseVerification.js\");\nvar StatsigAsyncStorage_1 = __importDefault(__webpack_require__(/*! ./utils/StatsigAsyncStorage */ \"(ssr)/./node_modules/statsig-js/dist/utils/StatsigAsyncStorage.js\"));\nvar StatsigLocalStorage_1 = __importDefault(__webpack_require__(/*! ./utils/StatsigLocalStorage */ \"(ssr)/./node_modules/statsig-js/dist/utils/StatsigLocalStorage.js\"));\nvar MAX_USER_VALUE_CACHED = 10;\nvar StatsigStore = /** @class */ (function () {\n    function StatsigStore(sdkInternal, initializeValues) {\n        this.overrides = {\n            gates: {},\n            configs: {},\n            layers: {},\n        };\n        this.sdkInternal = sdkInternal;\n        this.userCacheKey = this.sdkInternal.getCurrentUserCacheKey();\n        this.values = {};\n        this.userValues = {\n            feature_gates: {},\n            dynamic_configs: {},\n            sticky_experiments: {},\n            layer_configs: {},\n            has_updates: false,\n            time: 0,\n            evaluation_time: 0,\n            derived_fields: {},\n        };\n        this.stickyDeviceExperiments = {};\n        this.loaded = false;\n        this.reason = EvaluationReason_1.EvaluationReason.Uninitialized;\n        this.userPersistentStorageAdapter = this.sdkInternal\n            .getOptions()\n            .getUserPersistentStorage();\n        this.userPersistentStorageData = { experiments: {} };\n        if (initializeValues) {\n            this.bootstrap(initializeValues);\n        }\n        else {\n            this.load();\n        }\n    }\n    StatsigStore.prototype.load = function () {\n        this.loadFromLocalStorage();\n        this.partialLoadFromPersistentStorageAdapter();\n    };\n    StatsigStore.prototype.loadAsync = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.loadFromAsyncStorage()];\n                    case 1:\n                        _a.sent();\n                        this.partialLoadFromPersistentStorageAdapter();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StatsigStore.prototype.updateUser = function (isUserPrefetched) {\n        this.userCacheKey = this.sdkInternal.getCurrentUserCacheKey();\n        var evaluationTime = this.setUserValueFromCache(isUserPrefetched);\n        this.partialLoadFromPersistentStorageAdapter();\n        return evaluationTime;\n    };\n    StatsigStore.prototype.getInitializeResponseJson = function () {\n        return JSON.stringify(this.userValues);\n    };\n    StatsigStore.prototype.loadFromAsyncStorage = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _a = this.parseCachedValues;\n                        return [4 /*yield*/, StatsigAsyncStorage_1.default.getItemAsync(Constants_1.INTERNAL_STORE_KEY)];\n                    case 1:\n                        _b = [_c.sent()];\n                        return [4 /*yield*/, StatsigAsyncStorage_1.default.getItemAsync(Constants_1.STICKY_DEVICE_EXPERIMENTS_KEY)];\n                    case 2:\n                        _a.apply(this, _b.concat([_c.sent()]));\n                        // triggered for react native, when async storage is setup.  Need to update the cache key\n                        // as the stableID is not available when this is set in the constructor (RN/async storage clients only)\n                        this.userCacheKey = this.sdkInternal.getCurrentUserCacheKey();\n                        this.loaded = true;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StatsigStore.prototype.bootstrap = function (initializeValues) {\n        var _a, _b, _c, _d, _f, _g;\n        var key = this.sdkInternal.getCurrentUserCacheKey();\n        var user = this.sdkInternal.getCurrentUser();\n        var stableID = (_c = (_b = (_a = user === null || user === void 0 ? void 0 : user.customIDs) === null || _a === void 0 ? void 0 : _a.stableID) !== null && _b !== void 0 ? _b : this.sdkInternal.getStatsigMetadata().stableID) !== null && _c !== void 0 ? _c : null;\n        var reason = BootstrapValidator_1.default.getEvaluationReasonForBootstrap(user, initializeValues, stableID);\n        // clients are going to assume that the SDK is bootstraped after this method runs\n        // if we fail to parse, we will fall back to defaults, but we dont want to throw\n        // when clients try to check gates/configs/etc after this point\n        this.loaded = true;\n        try {\n            /* eslint-disable @typescript-eslint/no-explicit-any */\n            var values = initializeValues;\n            this.userValues.feature_gates = (_d = values.feature_gates) !== null && _d !== void 0 ? _d : {};\n            this.userValues.dynamic_configs = (_f = values.dynamic_configs) !== null && _f !== void 0 ? _f : {};\n            this.userValues.layer_configs = (_g = values.layer_configs) !== null && _g !== void 0 ? _g : {};\n            this.userValues.evaluation_time = Date.now();\n            this.userValues.time = Date.now();\n            this.userValues.hash_used = values.hash_used;\n            this.values[key.v3] = this.userValues;\n            this.reason = reason;\n            this.loadOverrides();\n        }\n        catch (_e) {\n            return;\n        }\n    };\n    StatsigStore.prototype.loadFromLocalStorage = function () {\n        if (StatsigAsyncStorage_1.default.asyncStorage) {\n            return;\n        }\n        this.parseCachedValues(StatsigLocalStorage_1.default.getItem(Constants_1.INTERNAL_STORE_KEY), StatsigLocalStorage_1.default.getItem(Constants_1.STICKY_DEVICE_EXPERIMENTS_KEY));\n        this.loaded = true;\n    };\n    // Currently only loads experiments, cannot rely on storage adapter for all user values.\n    StatsigStore.prototype.partialLoadFromPersistentStorageAdapter = function () {\n        var _a;\n        if (this.userPersistentStorageAdapter) {\n            var idType = (_a = this.userPersistentStorageAdapter.userIDType) !== null && _a !== void 0 ? _a : 'userID';\n            var unitID = this.sdkInternal.getCurrentUserUnitID(idType);\n            if (unitID) {\n                try {\n                    this.userPersistentStorageData = JSON.parse(this.userPersistentStorageAdapter.load(\"\".concat(unitID, \":\").concat(idType)));\n                }\n                catch (e) {\n                    OutputLogger_1.default.warn('Failed to load from user persistent storage.', e);\n                }\n                this.userValues.sticky_experiments = this.userPersistentStorageData\n                    .experiments;\n            }\n        }\n    };\n    StatsigStore.prototype.saveStickyExperimentsToPersistentStorageAdapter = function () {\n        var _a;\n        if (this.userPersistentStorageAdapter) {\n            var idType = (_a = this.userPersistentStorageAdapter.userIDType) !== null && _a !== void 0 ? _a : 'userID';\n            var unitID = this.sdkInternal.getCurrentUserUnitID(idType);\n            if (unitID) {\n                var data = __assign(__assign({}, this.userPersistentStorageData), { experiments: this.userValues.sticky_experiments });\n                try {\n                    this.userPersistentStorageAdapter.save(\"\".concat(unitID, \":\").concat(idType), JSON.stringify(data));\n                }\n                catch (e) {\n                    OutputLogger_1.default.warn('Failed to save user experiment values to persistent storage.', e);\n                }\n            }\n        }\n    };\n    StatsigStore.prototype.isLoaded = function () {\n        return this.loaded;\n    };\n    StatsigStore.prototype.getLastUpdateTime = function (user, stableID) {\n        var requestedUserCacheKey = (0, Hashing_1.getUserCacheKey)(stableID, user, this.sdkInternal.getSDKKey());\n        var userValues = this.getUserValues(requestedUserCacheKey);\n        var userHash = (0, Hashing_1.djb2HashForObject)(__assign(__assign({}, user), { stableID: stableID }));\n        if ((userValues === null || userValues === void 0 ? void 0 : userValues.user_hash) == userHash) {\n            return this.userValues.time;\n        }\n        return null;\n    };\n    StatsigStore.prototype.getPreviousDerivedFields = function (user, stableID) {\n        var requestedUserCacheKey = (0, Hashing_1.getUserCacheKey)(stableID, user, this.sdkInternal.getSDKKey());\n        var userValues = this.getUserValues(requestedUserCacheKey);\n        var userHash = (0, Hashing_1.djb2HashForObject)(__assign(__assign({}, user), { stableID: stableID }));\n        if ((userValues === null || userValues === void 0 ? void 0 : userValues.user_hash) == userHash) {\n            return this.userValues.derived_fields;\n        }\n        return undefined;\n    };\n    StatsigStore.prototype.getPreviousHashUsed = function (user, stableID) {\n        var requestedUserCacheKey = (0, Hashing_1.getUserCacheKey)(stableID, user, this.sdkInternal.getSDKKey());\n        var userValues = this.getUserValues(requestedUserCacheKey);\n        return userValues === null || userValues === void 0 ? void 0 : userValues.hash_used;\n    };\n    StatsigStore.prototype.parseCachedValues = function (allValues, deviceExperiments) {\n        try {\n            this.values = allValues ? JSON.parse(allValues) : this.values;\n            this.setUserValueFromCache();\n        }\n        catch (e) {\n            // Cached value corrupted, remove cache\n            this.removeFromStorage(Constants_1.INTERNAL_STORE_KEY);\n        }\n        try {\n            var deviceExpParsed = deviceExperiments\n                ? JSON.parse(deviceExperiments)\n                : null;\n            if (deviceExpParsed) {\n                this.stickyDeviceExperiments = deviceExpParsed;\n            }\n        }\n        catch (e) {\n            this.removeFromStorage(Constants_1.STICKY_DEVICE_EXPERIMENTS_KEY);\n        }\n        this.loadOverrides();\n    };\n    StatsigStore.prototype.getUserValues = function (key) {\n        var _a, _b;\n        return (_b = (_a = this.values[key.v3]) !== null && _a !== void 0 ? _a : this.values[key.v2]) !== null && _b !== void 0 ? _b : this.values[key.v1];\n    };\n    StatsigStore.prototype.setUserValueFromCache = function (isUserPrefetched) {\n        var _a, _b;\n        if (isUserPrefetched === void 0) { isUserPrefetched = false; }\n        var cachedValues = this.getUserValues(this.userCacheKey);\n        if (cachedValues == null) {\n            this.resetUserValues();\n            this.reason = EvaluationReason_1.EvaluationReason.Uninitialized;\n            return null;\n        }\n        if (cachedValues.stableIDUsed != null &&\n            cachedValues.stableIDUsed !== this.getStableID()) {\n            this.sdkInternal.getErrorBoundary().logError('stableIDChanged', new Error(\"StableID changed from \".concat(cachedValues.stableIDUsed, \" to \").concat(this.getStableID(), \",\\n            override stableID \").concat((_a = this.sdkInternal.getOptions().getOverrideStableID()) !== null && _a !== void 0 ? _a : '')));\n        }\n        this.userValues = cachedValues;\n        this.reason = isUserPrefetched\n            ? EvaluationReason_1.EvaluationReason.Prefetch\n            : EvaluationReason_1.EvaluationReason.Cache;\n        return (_b = cachedValues.evaluation_time) !== null && _b !== void 0 ? _b : 0;\n    };\n    StatsigStore.prototype.removeFromStorage = function (key) {\n        var _this = this;\n        StatsigAsyncStorage_1.default.removeItemAsync(key).catch(function (reason) {\n            return _this.sdkInternal.getErrorBoundary().logError('removeFromStorage', reason);\n        });\n        StatsigLocalStorage_1.default.removeItem(key);\n    };\n    StatsigStore.prototype.loadOverrides = function () {\n        if (this.sdkInternal.getOptions().getDisableLocalOverrides()) {\n            return;\n        }\n        var overrides = StatsigLocalStorage_1.default.getItem(Constants_1.OVERRIDES_STORE_KEY);\n        if (overrides != null) {\n            try {\n                this.overrides = JSON.parse(overrides);\n            }\n            catch (e) {\n                StatsigLocalStorage_1.default.removeItem(Constants_1.OVERRIDES_STORE_KEY);\n            }\n        }\n    };\n    StatsigStore.prototype.setEvaluationReason = function (evalReason) {\n        this.reason = evalReason;\n    };\n    StatsigStore.prototype.save = function (user, response, stableID, prefetchUsers) {\n        return __awaiter(this, void 0, void 0, function () {\n            var requestedUserCacheKey, initResponse, userValues, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        requestedUserCacheKey = (0, Hashing_1.getUserCacheKey)(stableID, user, this.sdkInternal.getSDKKey());\n                        initResponse = response;\n                        if (initResponse.is_delta) {\n                            return [2 /*return*/, this.saveInitDeltas(user, response, true, stableID, prefetchUsers)];\n                        }\n                        this.mergeInitializeResponseIntoUserMap(initResponse, this.values, requestedUserCacheKey, user, function (userValues) { return userValues; }, stableID, prefetchUsers);\n                        userValues = this.getUserValues(requestedUserCacheKey);\n                        if (userValues &&\n                            requestedUserCacheKey &&\n                            requestedUserCacheKey.v3 === this.userCacheKey.v3) {\n                            this.userValues = userValues;\n                            this.reason = EvaluationReason_1.EvaluationReason.Network;\n                        }\n                        _a = this;\n                        return [4 /*yield*/, this.writeValuesToStorage(this.values)];\n                    case 1:\n                        _a.values = _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Persists the init values to storage, but DOES NOT update the state of the store.\n     */\n    StatsigStore.prototype.saveWithoutUpdatingClientState = function (user, response, stableID, prefetchUsers) {\n        return __awaiter(this, void 0, void 0, function () {\n            var requestedUserCacheKey, initResponse, copiedValues;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        requestedUserCacheKey = (0, Hashing_1.getUserCacheKey)(stableID, user, this.sdkInternal.getSDKKey());\n                        initResponse = response;\n                        if (initResponse.is_delta) {\n                            return [2 /*return*/, this.saveInitDeltas(user, response, false, stableID, prefetchUsers)];\n                        }\n                        copiedValues = JSON.parse(JSON.stringify(this.values));\n                        this.mergeInitializeResponseIntoUserMap(initResponse, copiedValues, requestedUserCacheKey, user, function (userValues) { return userValues; }, stableID, prefetchUsers);\n                        return [4 /*yield*/, this.writeValuesToStorage(copiedValues)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StatsigStore.prototype.getDeltasMergeFunction = function (mergedValues) {\n        var _this = this;\n        return function (deltas, key) {\n            var _a, _b, _c;\n            var baseValues = (_c = (_b = (_a = mergedValues[key.v3]) !== null && _a !== void 0 ? _a : mergedValues[key.v2]) !== null && _b !== void 0 ? _b : mergedValues[key.v1]) !== null && _c !== void 0 ? _c : _this.getDefaultUserCacheValues();\n            return _this.mergeUserCacheValues(baseValues, deltas);\n        };\n    };\n    StatsigStore.prototype.saveInitDeltas = function (user, response, updateState, stableID, prefetchUsers) {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var requestedUserCacheKey, initResponse, mergedValues, hasBadHash, badChecksum, hashChanged, cacheKeys, userValues, expectedFullHash, mergedConfigs, currentFullHash, _d;\n            var _this = this;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        requestedUserCacheKey = (0, Hashing_1.getUserCacheKey)(stableID, user, this.sdkInternal.getSDKKey());\n                        initResponse = response;\n                        mergedValues = JSON.parse(JSON.stringify(this.values));\n                        // Merge delta values into the previous values\n                        this.mergeInitializeResponseIntoUserMap(initResponse, mergedValues, requestedUserCacheKey, user, this.getDeltasMergeFunction(mergedValues), stableID, prefetchUsers);\n                        hasBadHash = false;\n                        badChecksum = undefined;\n                        hashChanged = false;\n                        cacheKeys = Object.keys((_a = initResponse.prefetched_user_values) !== null && _a !== void 0 ? _a : {});\n                        cacheKeys.forEach(function (userKey) {\n                            var _a;\n                            var user = mergedValues[userKey];\n                            var reponseForUser = (_a = initResponse.prefetched_user_values) === null || _a === void 0 ? void 0 : _a[userKey];\n                            if (user && reponseForUser) {\n                                removeDeletedKeysFromUserValues(reponseForUser, user);\n                                var expectedFullHash_1 = reponseForUser.checksum;\n                                var currentFullHash_1 = (0, Hashing_1.djb2HashForObject)({\n                                    feature_gates: mergedValues[userKey].feature_gates,\n                                    dynamic_configs: mergedValues[userKey].dynamic_configs,\n                                    layer_configs: mergedValues[userKey].layer_configs,\n                                });\n                                if (expectedFullHash_1 && expectedFullHash_1 !== currentFullHash_1) {\n                                    hasBadHash = true;\n                                    badChecksum = currentFullHash_1;\n                                }\n                                if (userValues.hash_used !== initResponse.hash_used) {\n                                    hashChanged = true;\n                                }\n                            }\n                        });\n                        userValues = (_c = (_b = mergedValues[requestedUserCacheKey.v3]) !== null && _b !== void 0 ? _b : mergedValues[requestedUserCacheKey.v2]) !== null && _c !== void 0 ? _c : mergedValues[requestedUserCacheKey.v1];\n                        removeDeletedKeysFromUserValues(initResponse, userValues);\n                        expectedFullHash = initResponse.checksum;\n                        mergedConfigs = {\n                            feature_gates: userValues.feature_gates,\n                            dynamic_configs: userValues.dynamic_configs,\n                            layer_configs: userValues.layer_configs,\n                        };\n                        currentFullHash = (0, Hashing_1.djb2HashForObject)(mergedConfigs);\n                        if (expectedFullHash && expectedFullHash !== currentFullHash) {\n                            hasBadHash = true;\n                            badChecksum = currentFullHash;\n                        }\n                        if (userValues.hash_used !== initResponse.hash_used) {\n                            hashChanged = true;\n                        }\n                        if (hasBadHash || hashChanged) {\n                            if (initResponse.deltas_full_response != null) {\n                                // retry\n                                this.refetchAndSaveValues(user, stableID, prefetchUsers, undefined, badChecksum, hasBadHash, mergedConfigs, initResponse.deltas_full_response).catch(function (reason) {\n                                    return _this.sdkInternal\n                                        .getErrorBoundary()\n                                        .logError('refetchAndSaveValues', reason);\n                                });\n                                return [2 /*return*/];\n                            }\n                            // retry\n                            this.refetchAndSaveValues(user, stableID, prefetchUsers, undefined, badChecksum, hasBadHash).catch(function (reason) {\n                                return _this.sdkInternal\n                                    .getErrorBoundary()\n                                    .logError('refetchAndSaveValues', reason);\n                            });\n                            return [2 /*return*/];\n                        }\n                        if (!updateState) return [3 /*break*/, 2];\n                        if (userValues && requestedUserCacheKey.v3 === this.userCacheKey.v3) {\n                            this.userValues = userValues;\n                            this.reason = EvaluationReason_1.EvaluationReason.Network;\n                        }\n                        _d = this;\n                        return [4 /*yield*/, this.writeValuesToStorage(mergedValues)];\n                    case 1:\n                        _d.values = _f.sent();\n                        return [3 /*break*/, 4];\n                    case 2: return [4 /*yield*/, this.writeValuesToStorage(mergedValues)];\n                    case 3:\n                        _f.sent();\n                        _f.label = 4;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StatsigStore.prototype.refetchAndSaveValues = function (user, stableID, prefetchUsers, timeout, badChecksum, hadBadChecksum, badMergedConfigs, badFullResponse) {\n        if (timeout === void 0) { timeout = this.sdkInternal.getOptions().getInitTimeoutMs(); }\n        return __awaiter(this, void 0, void 0, function () {\n            var sinceTime, previousDerivedFields;\n            var _this = this;\n            return __generator(this, function (_a) {\n                sinceTime = this.getLastUpdateTime(user, stableID);\n                previousDerivedFields = this.getPreviousDerivedFields(user, stableID);\n                return [2 /*return*/, this.sdkInternal\n                        .getNetwork()\n                        .fetchValues({\n                        user: user,\n                        sinceTime: sinceTime,\n                        timeout: timeout,\n                        useDeltas: false,\n                        prefetchUsers: prefetchUsers,\n                        previousDerivedFields: previousDerivedFields,\n                        hadBadDeltaChecksum: hadBadChecksum,\n                        badChecksum: badChecksum,\n                        badMergedConfigs: badMergedConfigs,\n                        badFullResponse: badFullResponse,\n                    })\n                        .then(function (json) {\n                        if (!(0, ResponseVerification_1.verifySDKKeyUsed)(json, _this.sdkInternal.getSDKKey(), _this.sdkInternal.getErrorBoundary())) {\n                            return;\n                        }\n                        if (json === null || json === void 0 ? void 0 : json.has_updates) {\n                            _this.saveWithoutUpdatingClientState(user, json, stableID, prefetchUsers).catch(function (reason) {\n                                return _this.sdkInternal\n                                    .getErrorBoundary()\n                                    .logError('refetchAndSaveValues:then', reason);\n                            });\n                        }\n                    })\n                        .catch(function (reason) {\n                        return _this.sdkInternal\n                            .getErrorBoundary()\n                            .logError('refetchAndSaveValues', reason);\n                    })];\n            });\n        });\n    };\n    StatsigStore.prototype.getStableID = function () {\n        return this.sdkInternal.getStableID();\n    };\n    /**\n     * Merges the provided init configs into the provided config map, according to the provided merge function\n     */\n    StatsigStore.prototype.mergeInitializeResponseIntoUserMap = function (data, configMap, requestedUserCacheKey, user, mergeFn, stableID, prefetchUsers) {\n        if (data.prefetched_user_values) {\n            var cacheKeys = Object.keys(data.prefetched_user_values);\n            for (var _i = 0, cacheKeys_1 = cacheKeys; _i < cacheKeys_1.length; _i++) {\n                var key = cacheKeys_1[_i];\n                var prefetched = data.prefetched_user_values[key];\n                var values = mergeFn(this.convertAPIDataToCacheValues(prefetched, key), { v1: key, v2: key, v3: key });\n                if (prefetchUsers) {\n                    var userHash = (0, Hashing_1.djb2HashForObject)(prefetchUsers[key]);\n                    values.user_hash = userHash;\n                    values.stableIDUsed = stableID;\n                }\n                configMap[key] = values;\n            }\n        }\n        if (requestedUserCacheKey) {\n            var requestedUserValues = this.convertAPIDataToCacheValues(data, requestedUserCacheKey.v3);\n            var userHash = (0, Hashing_1.djb2HashForObject)(__assign(__assign({}, user), { stableID: stableID }));\n            requestedUserValues.user_hash = userHash;\n            requestedUserValues.stableIDUsed = stableID;\n            configMap[requestedUserCacheKey.v3] = mergeFn(requestedUserValues, requestedUserCacheKey);\n        }\n    };\n    StatsigStore.prototype.getDefaultUserCacheValues = function () {\n        return {\n            feature_gates: {},\n            layer_configs: {},\n            dynamic_configs: {},\n            sticky_experiments: {},\n            time: 0,\n            evaluation_time: 0,\n            derived_fields: {},\n        };\n    };\n    StatsigStore.prototype.mergeUserCacheValues = function (baseValues, valuesToMerge) {\n        return {\n            feature_gates: __assign(__assign({}, baseValues.feature_gates), valuesToMerge.feature_gates),\n            layer_configs: __assign(__assign({}, baseValues.layer_configs), valuesToMerge.layer_configs),\n            dynamic_configs: __assign(__assign({}, baseValues.dynamic_configs), valuesToMerge.dynamic_configs),\n            sticky_experiments: baseValues.sticky_experiments,\n            time: valuesToMerge.time,\n            evaluation_time: valuesToMerge.evaluation_time,\n            derived_fields: valuesToMerge.derived_fields,\n            hash_used: valuesToMerge.hash_used,\n            user_hash: valuesToMerge.user_hash,\n            stableIDUsed: valuesToMerge.stableIDUsed,\n        };\n    };\n    /**\n     * Writes the provided values to storage, truncating down to\n     * MAX_USER_VALUE_CACHED number entries.\n     * @returns The truncated entry list\n     */\n    StatsigStore.prototype.writeValuesToStorage = function (valuesToWrite) {\n        return __awaiter(this, void 0, void 0, function () {\n            var filteredValues;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // delete the older version of cache\n                        if (valuesToWrite[this.userCacheKey.v3]) {\n                            delete valuesToWrite[this.userCacheKey.v2];\n                            delete valuesToWrite[this.userCacheKey.v1];\n                        }\n                        else if (valuesToWrite[this.userCacheKey.v2]) {\n                            delete valuesToWrite[this.userCacheKey.v1];\n                        }\n                        filteredValues = Object.entries(valuesToWrite)\n                            .sort(function (_a, _b) {\n                            var _c, _d;\n                            var a = _a[1];\n                            var b = _b[1];\n                            if (a == null) {\n                                return 1;\n                            }\n                            if (b == null) {\n                                return -1;\n                            }\n                            return (((_c = b === null || b === void 0 ? void 0 : b.evaluation_time) !== null && _c !== void 0 ? _c : b === null || b === void 0 ? void 0 : b.time) - ((_d = a === null || a === void 0 ? void 0 : a.evaluation_time) !== null && _d !== void 0 ? _d : a === null || a === void 0 ? void 0 : a.time));\n                        })\n                            .slice(0, MAX_USER_VALUE_CACHED);\n                        valuesToWrite = Object.fromEntries(filteredValues);\n                        if (!StatsigAsyncStorage_1.default.asyncStorage) return [3 /*break*/, 2];\n                        return [4 /*yield*/, StatsigAsyncStorage_1.default.setItemAsync(Constants_1.INTERNAL_STORE_KEY, JSON.stringify(valuesToWrite))];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        StatsigLocalStorage_1.default.setItem(Constants_1.INTERNAL_STORE_KEY, JSON.stringify(valuesToWrite));\n                        _a.label = 3;\n                    case 3: return [2 /*return*/, valuesToWrite];\n                }\n            });\n        });\n    };\n    StatsigStore.prototype.checkGate = function (gateName, ignoreOverrides) {\n        var _a;\n        if (ignoreOverrides === void 0) { ignoreOverrides = false; }\n        var gateNameHash = this.getHashedSpecName(gateName);\n        var gateValue = {\n            name: gateName,\n            value: false,\n            rule_id: '',\n            secondary_exposures: [],\n        };\n        var details;\n        if (!ignoreOverrides && this.overrides.gates[gateName] != null) {\n            gateValue = {\n                name: gateName,\n                value: this.overrides.gates[gateName],\n                rule_id: 'override',\n                secondary_exposures: [],\n            };\n            details = this.getEvaluationDetails(false, EvaluationReason_1.EvaluationReason.LocalOverride);\n        }\n        else {\n            var value = (_a = this.userValues) === null || _a === void 0 ? void 0 : _a.feature_gates[gateNameHash];\n            if (value) {\n                gateValue = value;\n            }\n            details = this.getEvaluationDetails(value != null);\n        }\n        return { evaluationDetails: details, gate: gateValue };\n    };\n    StatsigStore.prototype.getConfig = function (configName, ignoreOverrides) {\n        var _a, _b;\n        if (ignoreOverrides === void 0) { ignoreOverrides = false; }\n        var configNameHash = this.getHashedSpecName(configName);\n        var configValue;\n        var details;\n        if (!ignoreOverrides && this.overrides.configs[configName] != null) {\n            details = this.getEvaluationDetails(false, EvaluationReason_1.EvaluationReason.LocalOverride);\n            configValue = new DynamicConfig_1.default(configName, this.overrides.configs[configName], 'override', details, [], '', this.makeOnConfigDefaultValueFallback(this.sdkInternal.getCurrentUser()));\n        }\n        else if (((_a = this.userValues) === null || _a === void 0 ? void 0 : _a.dynamic_configs[configNameHash]) != null) {\n            var rawConfigValue = (_b = this.userValues) === null || _b === void 0 ? void 0 : _b.dynamic_configs[configNameHash];\n            details = this.getEvaluationDetails(true);\n            configValue = this.createDynamicConfig(configName, rawConfigValue, details);\n        }\n        else {\n            details = this.getEvaluationDetails(false);\n            configValue = new DynamicConfig_1.default(configName, {}, '', details);\n        }\n        return configValue;\n    };\n    StatsigStore.prototype.getExperiment = function (expName, keepDeviceValue, ignoreOverrides) {\n        if (keepDeviceValue === void 0) { keepDeviceValue = false; }\n        if (ignoreOverrides === void 0) { ignoreOverrides = false; }\n        var exp;\n        var details;\n        if (!ignoreOverrides && this.overrides.configs[expName] != null) {\n            details = this.getEvaluationDetails(false, EvaluationReason_1.EvaluationReason.LocalOverride);\n            exp = new DynamicConfig_1.default(expName, this.overrides.configs[expName], 'override', details);\n        }\n        else {\n            var latestValue = this.getLatestValue(expName, 'dynamic_configs');\n            details = this.getEvaluationDetails(latestValue != null);\n            var finalValue = this.getPossiblyStickyValue(expName, latestValue, keepDeviceValue, false /* isLayer */, details);\n            exp = this.createDynamicConfig(expName, finalValue, details);\n        }\n        return exp;\n    };\n    StatsigStore.prototype.getLayer = function (logParameterFunction, layerName, keepDeviceValue) {\n        var _a, _b, _c, _d;\n        if (this.overrides.layers[layerName] != null) {\n            var details_1 = this.getEvaluationDetails(false, EvaluationReason_1.EvaluationReason.LocalOverride);\n            return Layer_1.default._create(layerName, (_a = this.overrides.layers[layerName]) !== null && _a !== void 0 ? _a : {}, 'override', details_1, logParameterFunction);\n        }\n        var latestValue = this.getLatestValue(layerName, 'layer_configs');\n        var details = this.getEvaluationDetails(latestValue != null);\n        var finalValue = this.getPossiblyStickyValue(layerName, latestValue, keepDeviceValue, true /* isLayer */, details);\n        return Layer_1.default._create(layerName, (_b = finalValue === null || finalValue === void 0 ? void 0 : finalValue.value) !== null && _b !== void 0 ? _b : {}, (_c = finalValue === null || finalValue === void 0 ? void 0 : finalValue.rule_id) !== null && _c !== void 0 ? _c : '', details, logParameterFunction, finalValue === null || finalValue === void 0 ? void 0 : finalValue.secondary_exposures, finalValue === null || finalValue === void 0 ? void 0 : finalValue.undelegated_secondary_exposures, (_d = finalValue === null || finalValue === void 0 ? void 0 : finalValue.allocated_experiment_name) !== null && _d !== void 0 ? _d : '', finalValue === null || finalValue === void 0 ? void 0 : finalValue.explicit_parameters, finalValue === null || finalValue === void 0 ? void 0 : finalValue.group_name);\n    };\n    StatsigStore.prototype.overrideConfig = function (configName, value) {\n        try {\n            JSON.stringify(value);\n        }\n        catch (e) {\n            OutputLogger_1.default.warn('Failed to stringify given config override.  Dropping', e);\n            return;\n        }\n        this.overrides.configs[configName] = value;\n        this.saveOverrides();\n    };\n    StatsigStore.prototype.overrideLayer = function (layerName, value) {\n        try {\n            JSON.stringify(value);\n        }\n        catch (e) {\n            OutputLogger_1.default.warn('Failed to stringify given layer override.  Dropping', e);\n            return;\n        }\n        this.overrides.layers[layerName] = value;\n        this.saveOverrides();\n    };\n    StatsigStore.prototype.overrideGate = function (gateName, value) {\n        this.overrides.gates[gateName] = value;\n        this.saveOverrides();\n    };\n    StatsigStore.prototype.removeGateOverride = function (gateName) {\n        if (gateName == null) {\n            this.overrides.gates = {};\n        }\n        else {\n            delete this.overrides.gates[gateName];\n        }\n        this.saveOverrides();\n    };\n    StatsigStore.prototype.removeConfigOverride = function (configName) {\n        if (configName == null) {\n            this.overrides.configs = {};\n        }\n        else {\n            delete this.overrides.configs[configName];\n        }\n        this.saveOverrides();\n    };\n    StatsigStore.prototype.removeLayerOverride = function (layerName) {\n        if (layerName == null) {\n            this.overrides.layers = {};\n        }\n        else {\n            delete this.overrides.layers[layerName];\n        }\n        this.saveOverrides();\n    };\n    StatsigStore.prototype.getAllOverrides = function () {\n        return this.overrides;\n    };\n    StatsigStore.prototype.saveOverrides = function () {\n        try {\n            StatsigLocalStorage_1.default.setItem(Constants_1.OVERRIDES_STORE_KEY, JSON.stringify(this.overrides));\n        }\n        catch (e) {\n            OutputLogger_1.default.warn('Failed to persist gate/config overrides');\n        }\n    };\n    StatsigStore.prototype.getLatestValue = function (name, topLevelKey) {\n        var _a, _b, _c, _d, _f;\n        var hash = this.getHashedSpecName(name);\n        return ((_c = (_b = (_a = this.userValues) === null || _a === void 0 ? void 0 : _a[topLevelKey]) === null || _b === void 0 ? void 0 : _b[hash]) !== null && _c !== void 0 ? _c : (_f = (_d = this.userValues) === null || _d === void 0 ? void 0 : _d[topLevelKey]) === null || _f === void 0 ? void 0 : _f[name]);\n    };\n    // Sticky Logic: https://gist.github.com/daniel-statsig/3d8dfc9bdee531cffc96901c1a06a402\n    StatsigStore.prototype.getPossiblyStickyValue = function (name, latestValue, keepDeviceValue, isLayer, details) {\n        var _a;\n        var key = this.getHashedSpecName(name);\n        // We don't want sticky behavior. Clear any sticky values and return latest.\n        if (!keepDeviceValue) {\n            this.removeStickyValue(key);\n            return latestValue;\n        }\n        // If there is no sticky value, save latest as sticky and return latest.\n        var stickyValue = this.getStickyValue(key);\n        if (!stickyValue) {\n            this.attemptToSaveStickyValue(key, latestValue);\n            return latestValue;\n        }\n        // Get the latest config value. Layers require a lookup by allocated_experiment_name.\n        var latestExperimentValue = null;\n        if (isLayer) {\n            latestExperimentValue = this.getLatestValue((_a = stickyValue === null || stickyValue === void 0 ? void 0 : stickyValue.allocated_experiment_name) !== null && _a !== void 0 ? _a : '', 'dynamic_configs');\n        }\n        else {\n            latestExperimentValue = latestValue;\n        }\n        if ((latestExperimentValue === null || latestExperimentValue === void 0 ? void 0 : latestExperimentValue.is_experiment_active) == true) {\n            details.reason = EvaluationReason_1.EvaluationReason.Sticky;\n            return stickyValue;\n        }\n        if ((latestValue === null || latestValue === void 0 ? void 0 : latestValue.is_experiment_active) == true) {\n            this.attemptToSaveStickyValue(key, latestValue);\n        }\n        else {\n            this.removeStickyValue(key);\n        }\n        return latestValue;\n    };\n    StatsigStore.prototype.createDynamicConfig = function (name, apiConfig, details) {\n        var _a, _b, _c;\n        return new DynamicConfig_1.default(name, (_a = apiConfig === null || apiConfig === void 0 ? void 0 : apiConfig.value) !== null && _a !== void 0 ? _a : {}, (_b = apiConfig === null || apiConfig === void 0 ? void 0 : apiConfig.rule_id) !== null && _b !== void 0 ? _b : '', details, apiConfig === null || apiConfig === void 0 ? void 0 : apiConfig.secondary_exposures, (_c = apiConfig === null || apiConfig === void 0 ? void 0 : apiConfig.allocated_experiment_name) !== null && _c !== void 0 ? _c : '', this.makeOnConfigDefaultValueFallback(this.sdkInternal.getCurrentUser()), apiConfig === null || apiConfig === void 0 ? void 0 : apiConfig.group_name, apiConfig === null || apiConfig === void 0 ? void 0 : apiConfig.id_type, apiConfig === null || apiConfig === void 0 ? void 0 : apiConfig.is_experiment_active);\n    };\n    StatsigStore.prototype.getStickyValue = function (key) {\n        var _a, _b;\n        return ((_b = (_a = this.userValues) === null || _a === void 0 ? void 0 : _a.sticky_experiments[key]) !== null && _b !== void 0 ? _b : this.stickyDeviceExperiments[key]);\n    };\n    StatsigStore.prototype.attemptToSaveStickyValue = function (key, config) {\n        var _a;\n        if (!config ||\n            !config.is_user_in_experiment ||\n            !config.is_experiment_active) {\n            return;\n        }\n        if (config.is_device_based === true) {\n            // save sticky values in memory\n            this.stickyDeviceExperiments[key] = config;\n        }\n        else if ((_a = this.userValues) === null || _a === void 0 ? void 0 : _a.sticky_experiments) {\n            this.userValues.sticky_experiments[key] = config;\n        }\n        // also save to persistent storage\n        this.saveStickyValuesToStorage();\n    };\n    StatsigStore.prototype.removeStickyValue = function (key) {\n        var _a, _b, _c, _d;\n        if (Object.keys((_b = (_a = this.userValues) === null || _a === void 0 ? void 0 : _a.sticky_experiments) !== null && _b !== void 0 ? _b : {}).length === 0 &&\n            Object.keys((_c = this.stickyDeviceExperiments) !== null && _c !== void 0 ? _c : {}).length === 0) {\n            return;\n        }\n        (_d = this.userValues) === null || _d === void 0 ? true : delete _d.sticky_experiments[key];\n        delete this.stickyDeviceExperiments[key];\n        this.saveStickyValuesToStorage();\n    };\n    StatsigStore.prototype.saveStickyValuesToStorage = function () {\n        if (this.userPersistentStorageAdapter) {\n            this.saveStickyExperimentsToPersistentStorageAdapter();\n        }\n        else {\n            this.values[this.userCacheKey.v3] = this.userValues;\n            this.setItemToStorage(Constants_1.INTERNAL_STORE_KEY, JSON.stringify(this.values));\n            this.setItemToStorage(Constants_1.STICKY_DEVICE_EXPERIMENTS_KEY, JSON.stringify(this.stickyDeviceExperiments));\n        }\n    };\n    StatsigStore.prototype.getGlobalEvaluationDetails = function () {\n        var _a, _b;\n        return {\n            reason: (_a = this.reason) !== null && _a !== void 0 ? _a : EvaluationReason_1.EvaluationReason.Uninitialized,\n            time: (_b = this.userValues.evaluation_time) !== null && _b !== void 0 ? _b : 0,\n        };\n    };\n    StatsigStore.prototype.getEvaluationDetails = function (valueExists, reasonOverride) {\n        var _a;\n        if (valueExists) {\n            return {\n                reason: this.reason,\n                time: (_a = this.userValues.evaluation_time) !== null && _a !== void 0 ? _a : Date.now(),\n            };\n        }\n        else {\n            return {\n                reason: reasonOverride !== null && reasonOverride !== void 0 ? reasonOverride : (this.reason == EvaluationReason_1.EvaluationReason.Uninitialized\n                    ? EvaluationReason_1.EvaluationReason.Uninitialized\n                    : EvaluationReason_1.EvaluationReason.Unrecognized),\n                time: Date.now(),\n            };\n        }\n    };\n    StatsigStore.prototype.resetUserValues = function () {\n        this.userValues = {\n            feature_gates: {},\n            dynamic_configs: {},\n            sticky_experiments: {},\n            layer_configs: {},\n            time: 0,\n            evaluation_time: 0,\n            derived_fields: {},\n        };\n    };\n    StatsigStore.prototype.getHashedSpecName = function (input) {\n        switch (this.userValues.hash_used) {\n            case 'djb2':\n                return (0, Hashing_1.djb2Hash)(input);\n            case 'none':\n                return input;\n            default:\n                return (0, Hashing_1.sha256Hash)(input);\n        }\n    };\n    StatsigStore.prototype.convertAPIDataToCacheValues = function (data, cacheKey) {\n        var _a, _b;\n        // Specifically pulling keys from data here to avoid pulling in unwanted keys\n        return {\n            feature_gates: data.feature_gates,\n            layer_configs: data.layer_configs,\n            dynamic_configs: data.dynamic_configs,\n            sticky_experiments: (_b = (_a = this.values[cacheKey]) === null || _a === void 0 ? void 0 : _a.sticky_experiments) !== null && _b !== void 0 ? _b : {},\n            time: data.time == null || isNaN(data.time) ? 0 : data.time,\n            evaluation_time: Date.now(),\n            hash_used: data.hash_used,\n            derived_fields: data.derived_fields,\n        };\n    };\n    StatsigStore.prototype.setItemToStorage = function (key, value) {\n        var _this = this;\n        if (StatsigAsyncStorage_1.default.asyncStorage) {\n            StatsigAsyncStorage_1.default.setItemAsync(key, value).catch(function (reason) {\n                void _this.sdkInternal\n                    .getErrorBoundary()\n                    .logError('setItemToStorage', reason);\n            });\n        }\n        else {\n            StatsigLocalStorage_1.default.setItem(key, value);\n        }\n    };\n    StatsigStore.prototype.makeOnConfigDefaultValueFallback = function (user) {\n        var _this = this;\n        return function (config, parameter, defaultValueType, valueType) {\n            if (!_this.isLoaded()) {\n                return;\n            }\n            _this.sdkInternal.getLogger().logConfigDefaultValueFallback(user, \"Parameter \".concat(parameter, \" is a value of type \").concat(valueType, \".\\n          Returning requested defaultValue type \").concat(defaultValueType), {\n                name: config.getName(),\n                ruleID: config.getRuleID(),\n                parameter: parameter,\n                defaultValueType: defaultValueType,\n                valueType: valueType,\n            });\n        };\n    };\n    return StatsigStore;\n}());\nexports[\"default\"] = StatsigStore;\nfunction removeDeletedKeysFromUserValues(initResponse, userValues) {\n    var _a, _b, _c;\n    ((_a = initResponse.deleted_configs) !== null && _a !== void 0 ? _a : []).forEach(function (key) {\n        delete userValues.dynamic_configs[key];\n    });\n    ((_b = initResponse.deleted_gates) !== null && _b !== void 0 ? _b : []).forEach(function (key) {\n        delete userValues.feature_gates[key];\n    });\n    ((_c = initResponse.deleted_layers) !== null && _c !== void 0 ? _c : []).forEach(function (key) {\n        delete userValues.layer_configs[key];\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/StatsigStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/StatsigUser.js":
/*!*****************************************************!*\
  !*** ./node_modules/statsig-js/dist/StatsigUser.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getUserHashWithoutStableID = void 0;\nvar Hashing_1 = __webpack_require__(/*! ./utils/Hashing */ \"(ssr)/./node_modules/statsig-js/dist/utils/Hashing.js\");\nfunction getUserHashWithoutStableID(user) {\n    var customIDs = user.customIDs, rest = __rest(user, [\"customIDs\"]);\n    var copyCustomIDs = __assign({}, customIDs);\n    delete copyCustomIDs.stableID;\n    return (0, Hashing_1.djb2HashForObject)(__assign(__assign({}, rest), { customIDs: copyCustomIDs }));\n}\nexports.getUserHashWithoutStableID = getUserHashWithoutStableID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L1N0YXRzaWdVc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLGlEQUFpRCxPQUFPO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGNBQWM7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0M7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMsOEVBQWlCO0FBQ3pDO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQSxnRUFBZ0UsV0FBVywwQkFBMEI7QUFDckc7QUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbWF6b24tZnJlc2gtZGVtby8uL25vZGVfbW9kdWxlcy9zdGF0c2lnLWpzL2Rpc3QvU3RhdHNpZ1VzZXIuanM/OTA4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFVzZXJIYXNoV2l0aG91dFN0YWJsZUlEID0gdm9pZCAwO1xudmFyIEhhc2hpbmdfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL0hhc2hpbmdcIik7XG5mdW5jdGlvbiBnZXRVc2VySGFzaFdpdGhvdXRTdGFibGVJRCh1c2VyKSB7XG4gICAgdmFyIGN1c3RvbUlEcyA9IHVzZXIuY3VzdG9tSURzLCByZXN0ID0gX19yZXN0KHVzZXIsIFtcImN1c3RvbUlEc1wiXSk7XG4gICAgdmFyIGNvcHlDdXN0b21JRHMgPSBfX2Fzc2lnbih7fSwgY3VzdG9tSURzKTtcbiAgICBkZWxldGUgY29weUN1c3RvbUlEcy5zdGFibGVJRDtcbiAgICByZXR1cm4gKDAsIEhhc2hpbmdfMS5kamIySGFzaEZvck9iamVjdCkoX19hc3NpZ24oX19hc3NpZ24oe30sIHJlc3QpLCB7IGN1c3RvbUlEczogY29weUN1c3RvbUlEcyB9KSk7XG59XG5leHBvcnRzLmdldFVzZXJIYXNoV2l0aG91dFN0YWJsZUlEID0gZ2V0VXNlckhhc2hXaXRob3V0U3RhYmxlSUQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/StatsigUser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/statsig-js/dist/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StatsigAsyncStorage = exports.EvaluationReason = exports.StatsigClient = exports.Layer = exports.DynamicConfig = exports.FeatureGate = void 0;\nvar Errors_1 = __webpack_require__(/*! ./Errors */ \"(ssr)/./node_modules/statsig-js/dist/Errors.js\");\nvar StatsigClient_1 = __importDefault(__webpack_require__(/*! ./StatsigClient */ \"(ssr)/./node_modules/statsig-js/dist/StatsigClient.js\"));\nvar StatsigRuntime_1 = __importDefault(__webpack_require__(/*! ./StatsigRuntime */ \"(ssr)/./node_modules/statsig-js/dist/StatsigRuntime.js\"));\nvar EvaluationReason_1 = __webpack_require__(/*! ./utils/EvaluationReason */ \"(ssr)/./node_modules/statsig-js/dist/utils/EvaluationReason.js\");\nvar Object_entries_1 = __importDefault(__webpack_require__(/*! ./utils/Object.entries */ \"(ssr)/./node_modules/statsig-js/dist/utils/Object.entries.js\"));\nvar Object_fromEntries_1 = __importDefault(__webpack_require__(/*! ./utils/Object.fromEntries */ \"(ssr)/./node_modules/statsig-js/dist/utils/Object.fromEntries.js\"));\nvar Promise_finally_1 = __importDefault(__webpack_require__(/*! ./utils/Promise.finally */ \"(ssr)/./node_modules/statsig-js/dist/utils/Promise.finally.js\"));\nvar FeatureGate_1 = __webpack_require__(/*! ./FeatureGate */ \"(ssr)/./node_modules/statsig-js/dist/FeatureGate.js\");\nObject.defineProperty(exports, \"FeatureGate\", ({ enumerable: true, get: function () { return __importDefault(FeatureGate_1).default; } }));\nvar DynamicConfig_1 = __webpack_require__(/*! ./DynamicConfig */ \"(ssr)/./node_modules/statsig-js/dist/DynamicConfig.js\");\nObject.defineProperty(exports, \"DynamicConfig\", ({ enumerable: true, get: function () { return __importDefault(DynamicConfig_1).default; } }));\nvar Layer_1 = __webpack_require__(/*! ./Layer */ \"(ssr)/./node_modules/statsig-js/dist/Layer.js\");\nObject.defineProperty(exports, \"Layer\", ({ enumerable: true, get: function () { return __importDefault(Layer_1).default; } }));\nvar StatsigClient_2 = __webpack_require__(/*! ./StatsigClient */ \"(ssr)/./node_modules/statsig-js/dist/StatsigClient.js\");\nObject.defineProperty(exports, \"StatsigClient\", ({ enumerable: true, get: function () { return __importDefault(StatsigClient_2).default; } }));\nvar EvaluationReason_2 = __webpack_require__(/*! ./utils/EvaluationReason */ \"(ssr)/./node_modules/statsig-js/dist/utils/EvaluationReason.js\");\nObject.defineProperty(exports, \"EvaluationReason\", ({ enumerable: true, get: function () { return EvaluationReason_2.EvaluationReason; } }));\nvar StatsigAsyncStorage_1 = __webpack_require__(/*! ./utils/StatsigAsyncStorage */ \"(ssr)/./node_modules/statsig-js/dist/utils/StatsigAsyncStorage.js\");\nObject.defineProperty(exports, \"StatsigAsyncStorage\", ({ enumerable: true, get: function () { return __importDefault(StatsigAsyncStorage_1).default; } }));\n(0, Object_entries_1.default)();\n(0, Object_fromEntries_1.default)();\n(0, Promise_finally_1.default)();\nvar Statsig = /** @class */ (function () {\n    function Statsig() {\n    }\n    Object.defineProperty(Statsig, \"encodeIntializeCall\", {\n        get: function () {\n            return StatsigRuntime_1.default.encodeInitializeCall;\n        },\n        set: function (value) {\n            StatsigRuntime_1.default.encodeInitializeCall = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Statsig.initialize = function (sdkKey, user, options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var inst;\n            return __generator(this, function (_b) {\n                inst = (_a = Statsig.instance) !== null && _a !== void 0 ? _a : new StatsigClient_1.default(sdkKey, user, options);\n                if (!Statsig.instance) {\n                    Statsig.instance = inst;\n                }\n                return [2 /*return*/, inst.initializeAsync()];\n            });\n        });\n    };\n    Statsig.prefetchUsers = function (users) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Statsig.getClientX().prefetchUsers(users)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    Statsig.setInitializeValues = function (initializeValues) {\n        Statsig.getClientX().setInitializeValues(initializeValues);\n    };\n    Statsig.checkGate = function (gateName, ignoreOverrides) {\n        if (ignoreOverrides === void 0) { ignoreOverrides = false; }\n        return Statsig.getClientX().checkGate(gateName, ignoreOverrides);\n    };\n    Statsig.checkGateWithExposureLoggingDisabled = function (gateName, ignoreOverrides) {\n        if (ignoreOverrides === void 0) { ignoreOverrides = false; }\n        return Statsig.getClientX().checkGateWithExposureLoggingDisabled(gateName, ignoreOverrides);\n    };\n    Statsig.getFeatureGate = function (gateName, options) {\n        if (options === void 0) { options = null; }\n        return Statsig.getClientX().getFeatureGate(gateName, options);\n    };\n    Statsig.manuallyLogGateExposure = function (gateName) {\n        Statsig.getClientX().logGateExposure(gateName);\n    };\n    Statsig.getConfig = function (configName, ignoreOverrides) {\n        if (ignoreOverrides === void 0) { ignoreOverrides = false; }\n        return Statsig.getClientX().getConfig(configName, ignoreOverrides);\n    };\n    Statsig.getConfigWithExposureLoggingDisabled = function (configName, ignoreOverrides) {\n        if (ignoreOverrides === void 0) { ignoreOverrides = false; }\n        return Statsig.getClientX().getConfigWithExposureLoggingDisabled(configName, ignoreOverrides);\n    };\n    Statsig.manuallyLogConfigExposure = function (configName) {\n        Statsig.getClientX().logConfigExposure(configName);\n    };\n    Statsig.getExperiment = function (experimentName, keepDeviceValue, ignoreOverrides) {\n        if (keepDeviceValue === void 0) { keepDeviceValue = false; }\n        if (ignoreOverrides === void 0) { ignoreOverrides = false; }\n        return Statsig.getClientX().getExperiment(experimentName, keepDeviceValue, ignoreOverrides);\n    };\n    Statsig.getExperimentWithExposureLoggingDisabled = function (experimentName, keepDeviceValue, ignoreOverrides) {\n        if (keepDeviceValue === void 0) { keepDeviceValue = false; }\n        if (ignoreOverrides === void 0) { ignoreOverrides = false; }\n        return Statsig.getClientX().getExperimentWithExposureLoggingDisabled(experimentName, keepDeviceValue, ignoreOverrides);\n    };\n    Statsig.manuallyLogExperimentExposure = function (configName, keepDeviceValue) {\n        if (keepDeviceValue === void 0) { keepDeviceValue = false; }\n        Statsig.getClientX().logExperimentExposure(configName, keepDeviceValue);\n    };\n    Statsig.getLayer = function (layerName, keepDeviceValue) {\n        if (keepDeviceValue === void 0) { keepDeviceValue = false; }\n        return Statsig.getClientX().getLayer(layerName, keepDeviceValue);\n    };\n    Statsig.getLayerWithExposureLoggingDisabled = function (layerName, keepDeviceValue) {\n        if (keepDeviceValue === void 0) { keepDeviceValue = false; }\n        return Statsig.getClientX().getLayerWithExposureLoggingDisabled(layerName, keepDeviceValue);\n    };\n    Statsig.manuallyLogLayerParameterExposure = function (layerName, parameterName, keepDeviceValue) {\n        if (keepDeviceValue === void 0) { keepDeviceValue = false; }\n        Statsig.getClientX().logLayerParameterExposure(layerName, parameterName, keepDeviceValue);\n    };\n    Statsig.logEvent = function (eventName, value, metadata) {\n        if (value === void 0) { value = null; }\n        if (metadata === void 0) { metadata = null; }\n        return Statsig.getClientX().logEvent(eventName, value, metadata);\n    };\n    Statsig.updateUser = function (user) {\n        return Statsig.getClientX().updateUser(user);\n    };\n    Statsig.updateUserWithValues = function (user, values) {\n        return Statsig.getClientX().updateUserWithValues(user, values);\n    };\n    Statsig.shutdown = function () {\n        Statsig.getClientX().shutdown();\n        Statsig.instance = null;\n    };\n    /**\n     * Overrides the given gate locally with the given value\n     * @param gateName - name of the gate to override\n     * @param value - value to assign to the gate\n     */\n    Statsig.overrideGate = function (gateName, value) {\n        Statsig.getClientX().overrideGate(gateName, value);\n    };\n    /**\n     * Overrides the given config locally with the given value\n     * @param configName - name of the config to override\n     * @param value - value to assign to the config\n     */\n    Statsig.overrideConfig = function (configName, value) {\n        Statsig.getClientX().overrideConfig(configName, value);\n    };\n    /**\n     * Overrides the given layer locally with the given value\n     * @param layerName - name of the layer to override\n     * @param value - value to assign to the layer\n     */\n    Statsig.overrideLayer = function (layerName, value) {\n        Statsig.getClientX().overrideLayer(layerName, value);\n    };\n    /**\n     * @param name the gate override to remove. Leave this parameter empty to remove all gate overrides.\n     */\n    Statsig.removeGateOverride = function (name) {\n        Statsig.getClientX().removeGateOverride(name);\n    };\n    /**\n     * @param name the config override to remove. Leave this parameter empty to remove all config overrides.\n     */\n    Statsig.removeConfigOverride = function (name) {\n        Statsig.getClientX().removeConfigOverride(name);\n    };\n    /**\n     * @param name the layer override to remove. Leave this parameter empty to remove all layer overrides.\n     */\n    Statsig.removeLayerOverride = function (name) {\n        Statsig.getClientX().removeLayerOverride(name);\n    };\n    /**\n     * @returns The local gate and config overrides\n     */\n    Statsig.getAllOverrides = function () {\n        return Statsig.getClientX().getAllOverrides();\n    };\n    /**\n     * @returns The Statsig stable ID used for device level experiments\n     */\n    Statsig.getStableID = function () {\n        return Statsig.getClientX().getStableID();\n    };\n    /**\n     *\n     * @returns The reason and time associated with the evaluation for the current set\n     * of gates and configs\n     */\n    Statsig.getEvaluationDetails = function () {\n        var _a, _b;\n        return ((_b = (_a = Statsig.instance) === null || _a === void 0 ? void 0 : _a.getEvaluationDetails()) !== null && _b !== void 0 ? _b : {\n            reason: EvaluationReason_1.EvaluationReason.Uninitialized,\n            time: 0,\n        });\n    };\n    Statsig.getInitializeResponseJson = function () {\n        return Statsig.getClientX().getInitializeResponseJson();\n    };\n    /**\n     * @deprecated use removeGateOverride or removeConfigOverride\n     * @param name the gate override to remove\n     */\n    Statsig.removeOverride = function (name) {\n        Statsig.getClientX().removeOverride(name);\n    };\n    /**\n     * @deprecated use getAllOverrides\n     * @returns the gate overrides\n     */\n    Statsig.getOverrides = function () {\n        return Statsig.getClientX().getOverrides();\n    };\n    /**\n     * @returns true if initialize has already been called, false otherwise\n     */\n    Statsig.initializeCalled = function () {\n        return Statsig.instance != null && Statsig.instance.initializeCalled();\n    };\n    /**\n     * Send any currently queued events to Statsig\n     */\n    Statsig.flushEvents = function () {\n        Statsig.getClientX().flushEvents();\n    };\n    /**\n     * @params Debug information log with exposure event, and information will be living in metadata\n     */\n    Statsig.setDebugInfo = function (debugInfo) {\n        Statsig.getClientX().setDebugInfo(debugInfo);\n    };\n    /**\n     * Intended to be used in conjunction with StatsigOptions.disableAllLogging.\n     * This will set StatsigOptions.disableAllLogging to false, thereby enabling logs to function normally.\n     */\n    Statsig.reenableAllLogging = function () {\n        Statsig.getClientX().reenableAllLogging();\n    };\n    Statsig.getClientX = function () {\n        if (!Statsig.instance) {\n            throw new Errors_1.StatsigUninitializedError();\n        }\n        return Statsig.instance;\n    };\n    Statsig.instance = null;\n    return Statsig;\n}());\nexports[\"default\"] = Statsig;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/utils/Base64.js":
/*!******************************************************!*\
  !*** ./node_modules/statsig-js/dist/utils/Base64.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Base64 = void 0;\n// Encoding logic from https://stackoverflow.com/a/246813/1524355, with slight modifications to make it work for binary strings\nexports.Base64 = {\n    _keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n    _encodeBinary: function (input) {\n        var output = '';\n        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n        var i = 0;\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n            if (isNaN(chr2)) {\n                enc3 = enc4 = 64;\n            }\n            else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n            output =\n                output +\n                    this._keyStr.charAt(enc1) +\n                    this._keyStr.charAt(enc2) +\n                    this._keyStr.charAt(enc3) +\n                    this._keyStr.charAt(enc4);\n        }\n        return output;\n    },\n    encodeArrayBuffer: function (buffer) {\n        var binary = '';\n        var bytes = new Uint8Array(buffer);\n        var len = bytes.byteLength;\n        for (var i = 0; i < len; i++) {\n            binary += String.fromCharCode(bytes[i]);\n        }\n        return exports.Base64._encodeBinary(binary);\n    },\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL0Jhc2U2NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFNBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW1hem9uLWZyZXNoLWRlbW8vLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL0Jhc2U2NC5qcz8xNGRhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CYXNlNjQgPSB2b2lkIDA7XG4vLyBFbmNvZGluZyBsb2dpYyBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNDY4MTMvMTUyNDM1NSwgd2l0aCBzbGlnaHQgbW9kaWZpY2F0aW9ucyB0byBtYWtlIGl0IHdvcmsgZm9yIGJpbmFyeSBzdHJpbmdzXG5leHBvcnRzLkJhc2U2NCA9IHtcbiAgICBfa2V5U3RyOiAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nLFxuICAgIF9lbmNvZGVCaW5hcnk6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gJyc7XG4gICAgICAgIHZhciBjaHIxLCBjaHIyLCBjaHIzLCBlbmMxLCBlbmMyLCBlbmMzLCBlbmM0O1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICBjaHIxID0gaW5wdXQuY2hhckNvZGVBdChpKyspO1xuICAgICAgICAgICAgY2hyMiA9IGlucHV0LmNoYXJDb2RlQXQoaSsrKTtcbiAgICAgICAgICAgIGNocjMgPSBpbnB1dC5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICAgICAgICBlbmMxID0gY2hyMSA+PiAyO1xuICAgICAgICAgICAgZW5jMiA9ICgoY2hyMSAmIDMpIDw8IDQpIHwgKGNocjIgPj4gNCk7XG4gICAgICAgICAgICBlbmMzID0gKChjaHIyICYgMTUpIDw8IDIpIHwgKGNocjMgPj4gNik7XG4gICAgICAgICAgICBlbmM0ID0gY2hyMyAmIDYzO1xuICAgICAgICAgICAgaWYgKGlzTmFOKGNocjIpKSB7XG4gICAgICAgICAgICAgICAgZW5jMyA9IGVuYzQgPSA2NDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzTmFOKGNocjMpKSB7XG4gICAgICAgICAgICAgICAgZW5jNCA9IDY0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICBvdXRwdXQgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlTdHIuY2hhckF0KGVuYzEpICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5U3RyLmNoYXJBdChlbmMyKSArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleVN0ci5jaGFyQXQoZW5jMykgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlTdHIuY2hhckF0KGVuYzQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfSxcbiAgICBlbmNvZGVBcnJheUJ1ZmZlcjogZnVuY3Rpb24gKGJ1ZmZlcikge1xuICAgICAgICB2YXIgYmluYXJ5ID0gJyc7XG4gICAgICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gICAgICAgIHZhciBsZW4gPSBieXRlcy5ieXRlTGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBiaW5hcnkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuQmFzZTY0Ll9lbmNvZGVCaW5hcnkoYmluYXJ5KTtcbiAgICB9LFxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/utils/Base64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/utils/BootstrapValidator.js":
/*!******************************************************************!*\
  !*** ./node_modules/statsig-js/dist/utils/BootstrapValidator.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar StatsigUser_1 = __webpack_require__(/*! ../StatsigUser */ \"(ssr)/./node_modules/statsig-js/dist/StatsigUser.js\");\nvar EvaluationReason_1 = __webpack_require__(/*! ./EvaluationReason */ \"(ssr)/./node_modules/statsig-js/dist/utils/EvaluationReason.js\");\nvar Hashing_1 = __webpack_require__(/*! ./Hashing */ \"(ssr)/./node_modules/statsig-js/dist/utils/Hashing.js\");\nvar BootstrapValidator = /** @class */ (function () {\n    function BootstrapValidator() {\n    }\n    BootstrapValidator.getEvaluationReasonForBootstrap = function (user, values, stableID) {\n        var isValid = true;\n        var stableIDMistmatch = false;\n        try {\n            var evaluatedKeys = values['evaluated_keys'];\n            if (evaluatedKeys && typeof evaluatedKeys === 'object') {\n                var evaluatedKeysRecord = this.copyObject(evaluatedKeys);\n                var userToCompare = user == null ? null : this.copyObject(user);\n                isValid =\n                    isValid &&\n                        BootstrapValidator.validate(evaluatedKeysRecord, userToCompare) &&\n                        BootstrapValidator.validate(userToCompare, evaluatedKeysRecord);\n                var customIDs = evaluatedKeys\n                    .customIDs;\n                if (stableID != (customIDs === null || customIDs === void 0 ? void 0 : customIDs.stableID)) {\n                    stableIDMistmatch = true;\n                }\n            }\n            var userHash = values['user_hash'];\n            if (userHash && typeof userHash === 'string' && user != null) {\n                var userHashGood = userHash === (0, StatsigUser_1.getUserHashWithoutStableID)(user) ||\n                    userHash === (0, Hashing_1.djb2HashForObject)(__assign(__assign({}, user), { stableID: stableID }));\n                isValid = isValid && userHashGood;\n            }\n        }\n        catch (error) {\n            // This is best-effort. If we fail, return true.\n        }\n        return !isValid\n            ? EvaluationReason_1.EvaluationReason.InvalidBootstrap\n            : stableIDMistmatch\n                ? EvaluationReason_1.EvaluationReason.BootstrapStableIDMismatch\n                : EvaluationReason_1.EvaluationReason.Bootstrap;\n    };\n    BootstrapValidator.validate = function (one, two) {\n        if (one == null) {\n            return two == null;\n        }\n        else if (two == null) {\n            return false;\n        }\n        for (var _i = 0, _a = Object.entries(one); _i < _a.length; _i++) {\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            if (key === 'stableID') {\n                continue;\n            }\n            if (typeof value !== typeof two[key]) {\n                return false;\n            }\n            if (typeof value === 'string') {\n                if (value !== two[key]) {\n                    return false;\n                }\n            }\n            else if (typeof value === 'object') {\n                return this.validate(value, two[key]);\n            }\n            else {\n                // unexpected\n                return false;\n            }\n        }\n        return true;\n    };\n    BootstrapValidator.copyObject = function (obj) {\n        if (obj == null) {\n            return null;\n        }\n        var copy = {};\n        if (obj === null || obj === void 0 ? void 0 : obj.userID) {\n            copy['userID'] = obj === null || obj === void 0 ? void 0 : obj.userID;\n        }\n        if (obj === null || obj === void 0 ? void 0 : obj.customIDs) {\n            var customIDs = __assign({}, obj.customIDs);\n            delete customIDs['stableID'];\n            if (Object.keys(customIDs).length !== 0) {\n                copy['customIDs'] = customIDs;\n            }\n        }\n        return copy;\n    };\n    return BootstrapValidator;\n}());\nexports[\"default\"] = BootstrapValidator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL0Jvb3RzdHJhcFZhbGlkYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSxpREFBaUQsT0FBTztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixtQkFBTyxDQUFDLDJFQUFnQjtBQUM1Qyx5QkFBeUIsbUJBQU8sQ0FBQywwRkFBb0I7QUFDckQsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0ZBQXNGLFdBQVcsb0JBQW9CO0FBQ3JIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELGdCQUFnQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW1hem9uLWZyZXNoLWRlbW8vLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL0Jvb3RzdHJhcFZhbGlkYXRvci5qcz9lN2ZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdGF0c2lnVXNlcl8xID0gcmVxdWlyZShcIi4uL1N0YXRzaWdVc2VyXCIpO1xudmFyIEV2YWx1YXRpb25SZWFzb25fMSA9IHJlcXVpcmUoXCIuL0V2YWx1YXRpb25SZWFzb25cIik7XG52YXIgSGFzaGluZ18xID0gcmVxdWlyZShcIi4vSGFzaGluZ1wiKTtcbnZhciBCb290c3RyYXBWYWxpZGF0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQm9vdHN0cmFwVmFsaWRhdG9yKCkge1xuICAgIH1cbiAgICBCb290c3RyYXBWYWxpZGF0b3IuZ2V0RXZhbHVhdGlvblJlYXNvbkZvckJvb3RzdHJhcCA9IGZ1bmN0aW9uICh1c2VyLCB2YWx1ZXMsIHN0YWJsZUlEKSB7XG4gICAgICAgIHZhciBpc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHN0YWJsZUlETWlzdG1hdGNoID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgZXZhbHVhdGVkS2V5cyA9IHZhbHVlc1snZXZhbHVhdGVkX2tleXMnXTtcbiAgICAgICAgICAgIGlmIChldmFsdWF0ZWRLZXlzICYmIHR5cGVvZiBldmFsdWF0ZWRLZXlzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHZhciBldmFsdWF0ZWRLZXlzUmVjb3JkID0gdGhpcy5jb3B5T2JqZWN0KGV2YWx1YXRlZEtleXMpO1xuICAgICAgICAgICAgICAgIHZhciB1c2VyVG9Db21wYXJlID0gdXNlciA9PSBudWxsID8gbnVsbCA6IHRoaXMuY29weU9iamVjdCh1c2VyKTtcbiAgICAgICAgICAgICAgICBpc1ZhbGlkID1cbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgQm9vdHN0cmFwVmFsaWRhdG9yLnZhbGlkYXRlKGV2YWx1YXRlZEtleXNSZWNvcmQsIHVzZXJUb0NvbXBhcmUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBCb290c3RyYXBWYWxpZGF0b3IudmFsaWRhdGUodXNlclRvQ29tcGFyZSwgZXZhbHVhdGVkS2V5c1JlY29yZCk7XG4gICAgICAgICAgICAgICAgdmFyIGN1c3RvbUlEcyA9IGV2YWx1YXRlZEtleXNcbiAgICAgICAgICAgICAgICAgICAgLmN1c3RvbUlEcztcbiAgICAgICAgICAgICAgICBpZiAoc3RhYmxlSUQgIT0gKGN1c3RvbUlEcyA9PT0gbnVsbCB8fCBjdXN0b21JRHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGN1c3RvbUlEcy5zdGFibGVJRCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhYmxlSURNaXN0bWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB1c2VySGFzaCA9IHZhbHVlc1sndXNlcl9oYXNoJ107XG4gICAgICAgICAgICBpZiAodXNlckhhc2ggJiYgdHlwZW9mIHVzZXJIYXNoID09PSAnc3RyaW5nJyAmJiB1c2VyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgdXNlckhhc2hHb29kID0gdXNlckhhc2ggPT09ICgwLCBTdGF0c2lnVXNlcl8xLmdldFVzZXJIYXNoV2l0aG91dFN0YWJsZUlEKSh1c2VyKSB8fFxuICAgICAgICAgICAgICAgICAgICB1c2VySGFzaCA9PT0gKDAsIEhhc2hpbmdfMS5kamIySGFzaEZvck9iamVjdCkoX19hc3NpZ24oX19hc3NpZ24oe30sIHVzZXIpLCB7IHN0YWJsZUlEOiBzdGFibGVJRCB9KSk7XG4gICAgICAgICAgICAgICAgaXNWYWxpZCA9IGlzVmFsaWQgJiYgdXNlckhhc2hHb29kO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gVGhpcyBpcyBiZXN0LWVmZm9ydC4gSWYgd2UgZmFpbCwgcmV0dXJuIHRydWUuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFpc1ZhbGlkXG4gICAgICAgICAgICA/IEV2YWx1YXRpb25SZWFzb25fMS5FdmFsdWF0aW9uUmVhc29uLkludmFsaWRCb290c3RyYXBcbiAgICAgICAgICAgIDogc3RhYmxlSURNaXN0bWF0Y2hcbiAgICAgICAgICAgICAgICA/IEV2YWx1YXRpb25SZWFzb25fMS5FdmFsdWF0aW9uUmVhc29uLkJvb3RzdHJhcFN0YWJsZUlETWlzbWF0Y2hcbiAgICAgICAgICAgICAgICA6IEV2YWx1YXRpb25SZWFzb25fMS5FdmFsdWF0aW9uUmVhc29uLkJvb3RzdHJhcDtcbiAgICB9O1xuICAgIEJvb3RzdHJhcFZhbGlkYXRvci52YWxpZGF0ZSA9IGZ1bmN0aW9uIChvbmUsIHR3bykge1xuICAgICAgICBpZiAob25lID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0d28gPT0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0d28gPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3QuZW50cmllcyhvbmUpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIF9iID0gX2FbX2ldLCBrZXkgPSBfYlswXSwgdmFsdWUgPSBfYlsxXTtcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdzdGFibGVJRCcpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IHR5cGVvZiB0d29ba2V5XSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB0d29ba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlKHZhbHVlLCB0d29ba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyB1bmV4cGVjdGVkXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgQm9vdHN0cmFwVmFsaWRhdG9yLmNvcHlPYmplY3QgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIGlmIChvYmogPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvcHkgPSB7fTtcbiAgICAgICAgaWYgKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iai51c2VySUQpIHtcbiAgICAgICAgICAgIGNvcHlbJ3VzZXJJRCddID0gb2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqLnVzZXJJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqLmN1c3RvbUlEcykge1xuICAgICAgICAgICAgdmFyIGN1c3RvbUlEcyA9IF9fYXNzaWduKHt9LCBvYmouY3VzdG9tSURzKTtcbiAgICAgICAgICAgIGRlbGV0ZSBjdXN0b21JRHNbJ3N0YWJsZUlEJ107XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoY3VzdG9tSURzKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICBjb3B5WydjdXN0b21JRHMnXSA9IGN1c3RvbUlEcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9O1xuICAgIHJldHVybiBCb290c3RyYXBWYWxpZGF0b3I7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQm9vdHN0cmFwVmFsaWRhdG9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/utils/BootstrapValidator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/utils/Constants.js":
/*!*********************************************************!*\
  !*** ./node_modules/statsig-js/dist/utils/Constants.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.STORAGE_PREFIX = exports.LOCAL_STORAGE_KEYS = exports.STATSIG_LOCAL_STORAGE_LOGGING_REQUEST_KEY = exports.STATSIG_STABLE_ID_KEY = exports.INTERNAL_STORE_KEY = exports.STICKY_DEVICE_EXPERIMENTS_KEY = exports.OVERRIDES_STORE_KEY = void 0;\nexports.OVERRIDES_STORE_KEY = 'STATSIG_LOCAL_STORAGE_INTERNAL_STORE_OVERRIDES_V3';\nexports.STICKY_DEVICE_EXPERIMENTS_KEY = 'STATSIG_LOCAL_STORAGE_STICKY_DEVICE_EXPERIMENTS';\n// V4 change: values are now cached on a specific user ID\n// We store values for up to 10 different user IDs at a time.\nexports.INTERNAL_STORE_KEY = 'STATSIG_LOCAL_STORAGE_INTERNAL_STORE_V4';\nexports.STATSIG_STABLE_ID_KEY = 'STATSIG_LOCAL_STORAGE_STABLE_ID';\nexports.STATSIG_LOCAL_STORAGE_LOGGING_REQUEST_KEY = 'STATSIG_LOCAL_STORAGE_LOGGING_REQUEST';\nexports.LOCAL_STORAGE_KEYS = {\n    STATSIG_LOCAL_STORAGE_STABLE_ID: true,\n    STATSIG_LOCAL_STORAGE_INTERNAL_STORE_V4: true,\n    STATSIG_LOCAL_STORAGE_STICKY_DEVICE_EXPERIMENTS: true,\n    STATSIG_LOCAL_STORAGE_INTERNAL_STORE_OVERRIDES_V3: true,\n    STATSIG_LOCAL_STORAGE_LOGGING_REQUEST: true,\n};\nexports.STORAGE_PREFIX = 'STATSIG_LOCAL_STORAGE';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL0NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRywwQkFBMEIsR0FBRyxpREFBaUQsR0FBRyw2QkFBNkIsR0FBRywwQkFBMEIsR0FBRyxxQ0FBcUMsR0FBRywyQkFBMkI7QUFDMU8sMkJBQTJCO0FBQzNCLHFDQUFxQztBQUNyQztBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCLDZCQUE2QjtBQUM3QixpREFBaUQ7QUFDakQsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FtYXpvbi1mcmVzaC1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0YXRzaWctanMvZGlzdC91dGlscy9Db25zdGFudHMuanM/NjBlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU1RPUkFHRV9QUkVGSVggPSBleHBvcnRzLkxPQ0FMX1NUT1JBR0VfS0VZUyA9IGV4cG9ydHMuU1RBVFNJR19MT0NBTF9TVE9SQUdFX0xPR0dJTkdfUkVRVUVTVF9LRVkgPSBleHBvcnRzLlNUQVRTSUdfU1RBQkxFX0lEX0tFWSA9IGV4cG9ydHMuSU5URVJOQUxfU1RPUkVfS0VZID0gZXhwb3J0cy5TVElDS1lfREVWSUNFX0VYUEVSSU1FTlRTX0tFWSA9IGV4cG9ydHMuT1ZFUlJJREVTX1NUT1JFX0tFWSA9IHZvaWQgMDtcbmV4cG9ydHMuT1ZFUlJJREVTX1NUT1JFX0tFWSA9ICdTVEFUU0lHX0xPQ0FMX1NUT1JBR0VfSU5URVJOQUxfU1RPUkVfT1ZFUlJJREVTX1YzJztcbmV4cG9ydHMuU1RJQ0tZX0RFVklDRV9FWFBFUklNRU5UU19LRVkgPSAnU1RBVFNJR19MT0NBTF9TVE9SQUdFX1NUSUNLWV9ERVZJQ0VfRVhQRVJJTUVOVFMnO1xuLy8gVjQgY2hhbmdlOiB2YWx1ZXMgYXJlIG5vdyBjYWNoZWQgb24gYSBzcGVjaWZpYyB1c2VyIElEXG4vLyBXZSBzdG9yZSB2YWx1ZXMgZm9yIHVwIHRvIDEwIGRpZmZlcmVudCB1c2VyIElEcyBhdCBhIHRpbWUuXG5leHBvcnRzLklOVEVSTkFMX1NUT1JFX0tFWSA9ICdTVEFUU0lHX0xPQ0FMX1NUT1JBR0VfSU5URVJOQUxfU1RPUkVfVjQnO1xuZXhwb3J0cy5TVEFUU0lHX1NUQUJMRV9JRF9LRVkgPSAnU1RBVFNJR19MT0NBTF9TVE9SQUdFX1NUQUJMRV9JRCc7XG5leHBvcnRzLlNUQVRTSUdfTE9DQUxfU1RPUkFHRV9MT0dHSU5HX1JFUVVFU1RfS0VZID0gJ1NUQVRTSUdfTE9DQUxfU1RPUkFHRV9MT0dHSU5HX1JFUVVFU1QnO1xuZXhwb3J0cy5MT0NBTF9TVE9SQUdFX0tFWVMgPSB7XG4gICAgU1RBVFNJR19MT0NBTF9TVE9SQUdFX1NUQUJMRV9JRDogdHJ1ZSxcbiAgICBTVEFUU0lHX0xPQ0FMX1NUT1JBR0VfSU5URVJOQUxfU1RPUkVfVjQ6IHRydWUsXG4gICAgU1RBVFNJR19MT0NBTF9TVE9SQUdFX1NUSUNLWV9ERVZJQ0VfRVhQRVJJTUVOVFM6IHRydWUsXG4gICAgU1RBVFNJR19MT0NBTF9TVE9SQUdFX0lOVEVSTkFMX1NUT1JFX09WRVJSSURFU19WMzogdHJ1ZSxcbiAgICBTVEFUU0lHX0xPQ0FMX1NUT1JBR0VfTE9HR0lOR19SRVFVRVNUOiB0cnVlLFxufTtcbmV4cG9ydHMuU1RPUkFHRV9QUkVGSVggPSAnU1RBVFNJR19MT0NBTF9TVE9SQUdFJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/utils/Constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/utils/Diagnostics.js":
/*!***********************************************************!*\
  !*** ./node_modules/statsig-js/dist/utils/Diagnostics.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DiagnosticsImpl = void 0;\nvar Timing_1 = __webpack_require__(/*! ./Timing */ \"(ssr)/./node_modules/statsig-js/dist/utils/Timing.js\");\nvar DiagnosticsImpl = /** @class */ (function () {\n    function DiagnosticsImpl(args) {\n        var _this = this;\n        var _a, _b, _c;\n        this.mark = {\n            overall: this.selectAction('overall'),\n            initialize: this.selectStep('initialize'),\n            bootstrap: this.selectStep('bootstrap'),\n            api_call: function (tag) {\n                switch (tag) {\n                    case 'getConfig':\n                        return _this.selectAction('get_config');\n                    case 'getExperiment':\n                        return _this.selectAction('get_experiment');\n                    case 'checkGate':\n                        return _this.selectAction('check_gate');\n                    case 'getLayer':\n                        return _this.selectAction('get_layer');\n                }\n                return null;\n            },\n        };\n        this.context = 'initialize';\n        this.defaultMaxMarkers = 30;\n        this.maxMarkers = {\n            initialize: this.defaultMaxMarkers,\n            config_sync: this.defaultMaxMarkers,\n            event_logging: this.defaultMaxMarkers,\n            api_call: this.defaultMaxMarkers,\n        };\n        this.markers = (_a = args.markers) !== null && _a !== void 0 ? _a : {\n            initialize: [],\n            config_sync: [],\n            event_logging: [],\n            api_call: [],\n        };\n        this.disabled = (_c = (_b = args.options) === null || _b === void 0 ? void 0 : _b.getDisableDiagnosticsLogging()) !== null && _c !== void 0 ? _c : false;\n    }\n    DiagnosticsImpl.prototype.setContext = function (context) {\n        this.context = context;\n    };\n    DiagnosticsImpl.prototype.selectAction = function (key, step) {\n        var _this = this;\n        return {\n            start: function (data, context) {\n                return _this.addMarker(__assign({ key: key, step: step, action: 'start', timestamp: (0, Timing_1.now)({ withPrecision: true }) }, (data !== null && data !== void 0 ? data : {})), context);\n            },\n            end: function (data, context) {\n                return _this.addMarker(__assign({ key: key, step: step, action: 'end', timestamp: (0, Timing_1.now)({ withPrecision: true }) }, (data !== null && data !== void 0 ? data : {})), context);\n            },\n        };\n    };\n    DiagnosticsImpl.prototype.selectStep = function (key) {\n        return {\n            process: this.selectAction(key, 'process'),\n            networkRequest: this.selectAction(key, 'network_request'),\n        };\n    };\n    DiagnosticsImpl.prototype.addMarker = function (marker, overrideContext) {\n        var _a;\n        var context = overrideContext !== null && overrideContext !== void 0 ? overrideContext : this.context;\n        if (this.disabled && context === 'api_call') {\n            return false;\n        }\n        if (this.maxMarkers[context] !== undefined &&\n            this.markers[context].length >=\n                ((_a = this.maxMarkers[context]) !== null && _a !== void 0 ? _a : this.defaultMaxMarkers)) {\n            return false;\n        }\n        this.markers[context].push(marker);\n        return true;\n    };\n    DiagnosticsImpl.prototype.getMarkers = function (context) {\n        return this.markers[context];\n    };\n    DiagnosticsImpl.prototype.setMaxMarkers = function (context, max) {\n        this.maxMarkers[context] = max;\n    };\n    DiagnosticsImpl.prototype.getMarkerCount = function (context) {\n        return this.markers[context].length;\n    };\n    DiagnosticsImpl.prototype.clearContext = function (context) {\n        this.markers[context] = [];\n    };\n    return DiagnosticsImpl;\n}());\nexports.DiagnosticsImpl = DiagnosticsImpl;\nvar Diagnostics = /** @class */ (function () {\n    function Diagnostics() {\n    }\n    Diagnostics.initialize = function (args) {\n        this.instance = new DiagnosticsImpl(args);\n        this.mark = this.instance.mark;\n        this.disabled = this.instance.disabled;\n        this.getMarkers = this.instance.getMarkers.bind(this.instance);\n        this.getMarkerCount = this.instance.getMarkerCount.bind(this.instance);\n        this.setMaxMarkers = this.instance.setMaxMarkers.bind(this.instance);\n        this.setContext = this.instance.setContext.bind(this.instance);\n        this.clearContext = this.instance.clearContext.bind(this.instance);\n    };\n    Diagnostics.formatError = function (e) {\n        if (!(e && typeof e === 'object')) {\n            return;\n        }\n        return {\n            code: this.safeGetField(e, 'code'),\n            name: this.safeGetField(e, 'name'),\n            message: this.safeGetField(e, 'message'),\n        };\n    };\n    Diagnostics.safeGetField = function (data, field) {\n        if (field in data) {\n            return data[field];\n        }\n        return undefined;\n    };\n    return Diagnostics;\n}());\nexports[\"default\"] = Diagnostics;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/utils/Diagnostics.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/utils/EvaluationReason.js":
/*!****************************************************************!*\
  !*** ./node_modules/statsig-js/dist/utils/EvaluationReason.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EvaluationReason = void 0;\nvar EvaluationReason;\n(function (EvaluationReason) {\n    EvaluationReason[\"Network\"] = \"Network\";\n    EvaluationReason[\"Bootstrap\"] = \"Bootstrap\";\n    EvaluationReason[\"InvalidBootstrap\"] = \"InvalidBootstrap\";\n    EvaluationReason[\"Cache\"] = \"Cache\";\n    EvaluationReason[\"Prefetch\"] = \"Prefetch\";\n    EvaluationReason[\"Sticky\"] = \"Sticky\";\n    EvaluationReason[\"LocalOverride\"] = \"LocalOverride\";\n    EvaluationReason[\"Unrecognized\"] = \"Unrecognized\";\n    EvaluationReason[\"Uninitialized\"] = \"Uninitialized\";\n    EvaluationReason[\"Error\"] = \"Error\";\n    EvaluationReason[\"NetworkNotModified\"] = \"NetworkNotModified\";\n    EvaluationReason[\"BootstrapStableIDMismatch\"] = \"BootstrapStableIDMismatch\";\n})(EvaluationReason = exports.EvaluationReason || (exports.EvaluationReason = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL0V2YWx1YXRpb25SZWFzb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGtEQUFrRCx3QkFBd0IsS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL2FtYXpvbi1mcmVzaC1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0YXRzaWctanMvZGlzdC91dGlscy9FdmFsdWF0aW9uUmVhc29uLmpzPzNhMDQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV2YWx1YXRpb25SZWFzb24gPSB2b2lkIDA7XG52YXIgRXZhbHVhdGlvblJlYXNvbjtcbihmdW5jdGlvbiAoRXZhbHVhdGlvblJlYXNvbikge1xuICAgIEV2YWx1YXRpb25SZWFzb25bXCJOZXR3b3JrXCJdID0gXCJOZXR3b3JrXCI7XG4gICAgRXZhbHVhdGlvblJlYXNvbltcIkJvb3RzdHJhcFwiXSA9IFwiQm9vdHN0cmFwXCI7XG4gICAgRXZhbHVhdGlvblJlYXNvbltcIkludmFsaWRCb290c3RyYXBcIl0gPSBcIkludmFsaWRCb290c3RyYXBcIjtcbiAgICBFdmFsdWF0aW9uUmVhc29uW1wiQ2FjaGVcIl0gPSBcIkNhY2hlXCI7XG4gICAgRXZhbHVhdGlvblJlYXNvbltcIlByZWZldGNoXCJdID0gXCJQcmVmZXRjaFwiO1xuICAgIEV2YWx1YXRpb25SZWFzb25bXCJTdGlja3lcIl0gPSBcIlN0aWNreVwiO1xuICAgIEV2YWx1YXRpb25SZWFzb25bXCJMb2NhbE92ZXJyaWRlXCJdID0gXCJMb2NhbE92ZXJyaWRlXCI7XG4gICAgRXZhbHVhdGlvblJlYXNvbltcIlVucmVjb2duaXplZFwiXSA9IFwiVW5yZWNvZ25pemVkXCI7XG4gICAgRXZhbHVhdGlvblJlYXNvbltcIlVuaW5pdGlhbGl6ZWRcIl0gPSBcIlVuaW5pdGlhbGl6ZWRcIjtcbiAgICBFdmFsdWF0aW9uUmVhc29uW1wiRXJyb3JcIl0gPSBcIkVycm9yXCI7XG4gICAgRXZhbHVhdGlvblJlYXNvbltcIk5ldHdvcmtOb3RNb2RpZmllZFwiXSA9IFwiTmV0d29ya05vdE1vZGlmaWVkXCI7XG4gICAgRXZhbHVhdGlvblJlYXNvbltcIkJvb3RzdHJhcFN0YWJsZUlETWlzbWF0Y2hcIl0gPSBcIkJvb3RzdHJhcFN0YWJsZUlETWlzbWF0Y2hcIjtcbn0pKEV2YWx1YXRpb25SZWFzb24gPSBleHBvcnRzLkV2YWx1YXRpb25SZWFzb24gfHwgKGV4cG9ydHMuRXZhbHVhdGlvblJlYXNvbiA9IHt9KSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/utils/EvaluationReason.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/utils/Hashing.js":
/*!*******************************************************!*\
  !*** ./node_modules/statsig-js/dist/utils/Hashing.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getUserCacheKey = exports.getSortedObject = exports.djb2HashForObject = exports.sha256Hash = exports.djb2Hash = exports.memoizedUserCacheKeyHash = exports.fasthash = void 0;\nvar js_sha256_1 = __webpack_require__(/*! js-sha256 */ \"(ssr)/./node_modules/js-sha256/src/sha256.js\");\nvar Base64_1 = __webpack_require__(/*! ./Base64 */ \"(ssr)/./node_modules/statsig-js/dist/utils/Base64.js\");\nvar hashLookupTable = {};\nfunction fasthash(value) {\n    var hash = 0;\n    for (var i = 0; i < value.length; i++) {\n        var character = value.charCodeAt(i);\n        hash = (hash << 5) - hash + character;\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash;\n}\nexports.fasthash = fasthash;\n// Keeping this around to prevent busting existing caches\n// This is just the same as djb2Hash but it can have negative values\nfunction memoizedUserCacheKeyHash(value) {\n    var seen = hashLookupTable[value];\n    if (seen) {\n        return seen;\n    }\n    var hash = String(fasthash(value));\n    hashLookupTable[value] = hash;\n    return hash;\n}\nexports.memoizedUserCacheKeyHash = memoizedUserCacheKeyHash;\nfunction djb2Hash(value) {\n    return String(fasthash(value) >>> 0);\n}\nexports.djb2Hash = djb2Hash;\nfunction sha256Hash(value) {\n    var seen = hashLookupTable[value];\n    if (seen) {\n        return seen;\n    }\n    var buffer = js_sha256_1.sha256.create().update(value).arrayBuffer();\n    var hash = Base64_1.Base64.encodeArrayBuffer(buffer);\n    hashLookupTable[value] = hash;\n    return hash;\n}\nexports.sha256Hash = sha256Hash;\nfunction djb2HashForObject(object) {\n    return djb2Hash(JSON.stringify(getSortedObject(object)));\n}\nexports.djb2HashForObject = djb2HashForObject;\nfunction getSortedObject(object) {\n    if (object == null) {\n        return null;\n    }\n    var keys = Object.keys(object).sort();\n    var sortedObject = {};\n    keys.forEach(function (key) {\n        var value = object[key];\n        if (value instanceof Object) {\n            value = getSortedObject(value);\n        }\n        sortedObject[key] = value;\n    });\n    return sortedObject;\n}\nexports.getSortedObject = getSortedObject;\nfunction getUserCacheKey(stableID, user, sdkKey) {\n    var _a;\n    var parts = [\"userID:\".concat(String((_a = user === null || user === void 0 ? void 0 : user.userID) !== null && _a !== void 0 ? _a : ''))];\n    var customIDs = user === null || user === void 0 ? void 0 : user.customIDs;\n    if (customIDs != null) {\n        for (var _i = 0, _b = Object.entries(customIDs); _i < _b.length; _i++) {\n            var _c = _b[_i], type = _c[0], value = _c[1];\n            parts.push(\"\".concat(type, \":\").concat(value));\n        }\n    }\n    var v2 = memoizedUserCacheKeyHash(parts.join(';'));\n    var v3 = memoizedUserCacheKeyHash(parts.join(';') + \";sdkKey:\".concat(sdkKey));\n    parts.splice(1, 0, \"stableID:\".concat(stableID));\n    var v1 = memoizedUserCacheKeyHash(parts.join(';'));\n    return {\n        v1: v1,\n        v2: v2,\n        v3: v3,\n    };\n}\nexports.getUserCacheKey = getUserCacheKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL0hhc2hpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCLEdBQUcsdUJBQXVCLEdBQUcseUJBQXlCLEdBQUcsa0JBQWtCLEdBQUcsZ0JBQWdCLEdBQUcsZ0NBQWdDLEdBQUcsZ0JBQWdCO0FBQzNLLGtCQUFrQixtQkFBTyxDQUFDLCtEQUFXO0FBQ3JDLGVBQWUsbUJBQU8sQ0FBQyxzRUFBVTtBQUNqQztBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELGdCQUFnQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRCxtREFBbUQsT0FBTztBQUMxRDtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbWF6b24tZnJlc2gtZGVtby8uL25vZGVfbW9kdWxlcy9zdGF0c2lnLWpzL2Rpc3QvdXRpbHMvSGFzaGluZy5qcz9lN2ZmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRVc2VyQ2FjaGVLZXkgPSBleHBvcnRzLmdldFNvcnRlZE9iamVjdCA9IGV4cG9ydHMuZGpiMkhhc2hGb3JPYmplY3QgPSBleHBvcnRzLnNoYTI1Nkhhc2ggPSBleHBvcnRzLmRqYjJIYXNoID0gZXhwb3J0cy5tZW1vaXplZFVzZXJDYWNoZUtleUhhc2ggPSBleHBvcnRzLmZhc3RoYXNoID0gdm9pZCAwO1xudmFyIGpzX3NoYTI1Nl8xID0gcmVxdWlyZShcImpzLXNoYTI1NlwiKTtcbnZhciBCYXNlNjRfMSA9IHJlcXVpcmUoXCIuL0Jhc2U2NFwiKTtcbnZhciBoYXNoTG9va3VwVGFibGUgPSB7fTtcbmZ1bmN0aW9uIGZhc3RoYXNoKHZhbHVlKSB7XG4gICAgdmFyIGhhc2ggPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGhhc2ggPSAoaGFzaCA8PCA1KSAtIGhhc2ggKyBjaGFyYWN0ZXI7XG4gICAgICAgIGhhc2ggPSBoYXNoICYgaGFzaDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gICAgfVxuICAgIHJldHVybiBoYXNoO1xufVxuZXhwb3J0cy5mYXN0aGFzaCA9IGZhc3RoYXNoO1xuLy8gS2VlcGluZyB0aGlzIGFyb3VuZCB0byBwcmV2ZW50IGJ1c3RpbmcgZXhpc3RpbmcgY2FjaGVzXG4vLyBUaGlzIGlzIGp1c3QgdGhlIHNhbWUgYXMgZGpiMkhhc2ggYnV0IGl0IGNhbiBoYXZlIG5lZ2F0aXZlIHZhbHVlc1xuZnVuY3Rpb24gbWVtb2l6ZWRVc2VyQ2FjaGVLZXlIYXNoKHZhbHVlKSB7XG4gICAgdmFyIHNlZW4gPSBoYXNoTG9va3VwVGFibGVbdmFsdWVdO1xuICAgIGlmIChzZWVuKSB7XG4gICAgICAgIHJldHVybiBzZWVuO1xuICAgIH1cbiAgICB2YXIgaGFzaCA9IFN0cmluZyhmYXN0aGFzaCh2YWx1ZSkpO1xuICAgIGhhc2hMb29rdXBUYWJsZVt2YWx1ZV0gPSBoYXNoO1xuICAgIHJldHVybiBoYXNoO1xufVxuZXhwb3J0cy5tZW1vaXplZFVzZXJDYWNoZUtleUhhc2ggPSBtZW1vaXplZFVzZXJDYWNoZUtleUhhc2g7XG5mdW5jdGlvbiBkamIySGFzaCh2YWx1ZSkge1xuICAgIHJldHVybiBTdHJpbmcoZmFzdGhhc2godmFsdWUpID4+PiAwKTtcbn1cbmV4cG9ydHMuZGpiMkhhc2ggPSBkamIySGFzaDtcbmZ1bmN0aW9uIHNoYTI1Nkhhc2godmFsdWUpIHtcbiAgICB2YXIgc2VlbiA9IGhhc2hMb29rdXBUYWJsZVt2YWx1ZV07XG4gICAgaWYgKHNlZW4pIHtcbiAgICAgICAgcmV0dXJuIHNlZW47XG4gICAgfVxuICAgIHZhciBidWZmZXIgPSBqc19zaGEyNTZfMS5zaGEyNTYuY3JlYXRlKCkudXBkYXRlKHZhbHVlKS5hcnJheUJ1ZmZlcigpO1xuICAgIHZhciBoYXNoID0gQmFzZTY0XzEuQmFzZTY0LmVuY29kZUFycmF5QnVmZmVyKGJ1ZmZlcik7XG4gICAgaGFzaExvb2t1cFRhYmxlW3ZhbHVlXSA9IGhhc2g7XG4gICAgcmV0dXJuIGhhc2g7XG59XG5leHBvcnRzLnNoYTI1Nkhhc2ggPSBzaGEyNTZIYXNoO1xuZnVuY3Rpb24gZGpiMkhhc2hGb3JPYmplY3Qob2JqZWN0KSB7XG4gICAgcmV0dXJuIGRqYjJIYXNoKEpTT04uc3RyaW5naWZ5KGdldFNvcnRlZE9iamVjdChvYmplY3QpKSk7XG59XG5leHBvcnRzLmRqYjJIYXNoRm9yT2JqZWN0ID0gZGpiMkhhc2hGb3JPYmplY3Q7XG5mdW5jdGlvbiBnZXRTb3J0ZWRPYmplY3Qob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCkuc29ydCgpO1xuICAgIHZhciBzb3J0ZWRPYmplY3QgPSB7fTtcbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGdldFNvcnRlZE9iamVjdCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgc29ydGVkT2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gc29ydGVkT2JqZWN0O1xufVxuZXhwb3J0cy5nZXRTb3J0ZWRPYmplY3QgPSBnZXRTb3J0ZWRPYmplY3Q7XG5mdW5jdGlvbiBnZXRVc2VyQ2FjaGVLZXkoc3RhYmxlSUQsIHVzZXIsIHNka0tleSkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgcGFydHMgPSBbXCJ1c2VySUQ6XCIuY29uY2F0KFN0cmluZygoX2EgPSB1c2VyID09PSBudWxsIHx8IHVzZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHVzZXIudXNlcklEKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJykpXTtcbiAgICB2YXIgY3VzdG9tSURzID0gdXNlciA9PT0gbnVsbCB8fCB1c2VyID09PSB2b2lkIDAgPyB2b2lkIDAgOiB1c2VyLmN1c3RvbUlEcztcbiAgICBpZiAoY3VzdG9tSURzICE9IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYiA9IE9iamVjdC5lbnRyaWVzKGN1c3RvbUlEcyk7IF9pIDwgX2IubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgX2MgPSBfYltfaV0sIHR5cGUgPSBfY1swXSwgdmFsdWUgPSBfY1sxXTtcbiAgICAgICAgICAgIHBhcnRzLnB1c2goXCJcIi5jb25jYXQodHlwZSwgXCI6XCIpLmNvbmNhdCh2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciB2MiA9IG1lbW9pemVkVXNlckNhY2hlS2V5SGFzaChwYXJ0cy5qb2luKCc7JykpO1xuICAgIHZhciB2MyA9IG1lbW9pemVkVXNlckNhY2hlS2V5SGFzaChwYXJ0cy5qb2luKCc7JykgKyBcIjtzZGtLZXk6XCIuY29uY2F0KHNka0tleSkpO1xuICAgIHBhcnRzLnNwbGljZSgxLCAwLCBcInN0YWJsZUlEOlwiLmNvbmNhdChzdGFibGVJRCkpO1xuICAgIHZhciB2MSA9IG1lbW9pemVkVXNlckNhY2hlS2V5SGFzaChwYXJ0cy5qb2luKCc7JykpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHYxOiB2MSxcbiAgICAgICAgdjI6IHYyLFxuICAgICAgICB2MzogdjMsXG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0VXNlckNhY2hlS2V5ID0gZ2V0VXNlckNhY2hlS2V5O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/utils/Hashing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/utils/Object.entries.js":
/*!**************************************************************!*\
  !*** ./node_modules/statsig-js/dist/utils/Object.entries.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nfunction Polyfill() {\n    if (!Object.entries) {\n        // Pollyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\n        Object.entries = function (obj) {\n            var ownProps = Object.keys(obj);\n            var i = ownProps.length;\n            var resArray = new Array(i); // preallocate the Array\n            while (i--)\n                resArray[i] = [ownProps[i], obj[ownProps[i]]];\n            return resArray;\n        };\n    }\n}\nexports[\"default\"] = Polyfill;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL09iamVjdC5lbnRyaWVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2FtYXpvbi1mcmVzaC1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0YXRzaWctanMvZGlzdC91dGlscy9PYmplY3QuZW50cmllcy5qcz9lYzkxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gUG9seWZpbGwoKSB7XG4gICAgaWYgKCFPYmplY3QuZW50cmllcykge1xuICAgICAgICAvLyBQb2xseWZpbGwgZnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvZW50cmllc1xuICAgICAgICBPYmplY3QuZW50cmllcyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHZhciBvd25Qcm9wcyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgICAgICB2YXIgaSA9IG93blByb3BzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciByZXNBcnJheSA9IG5ldyBBcnJheShpKTsgLy8gcHJlYWxsb2NhdGUgdGhlIEFycmF5XG4gICAgICAgICAgICB3aGlsZSAoaS0tKVxuICAgICAgICAgICAgICAgIHJlc0FycmF5W2ldID0gW293blByb3BzW2ldLCBvYmpbb3duUHJvcHNbaV1dXTtcbiAgICAgICAgICAgIHJldHVybiByZXNBcnJheTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBQb2x5ZmlsbDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/utils/Object.entries.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/utils/Object.fromEntries.js":
/*!******************************************************************!*\
  !*** ./node_modules/statsig-js/dist/utils/Object.fromEntries.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nfunction Polyfill() {\n    if (!Object.fromEntries) {\n        // @ts-ignore polyfill from https://github.com/tc39/proposal-object-from-entries/blob/main/polyfill.js\n        Object.fromEntries = function (iter) {\n            var obj = {};\n            for (var _i = 0, iter_1 = iter; _i < iter_1.length; _i++) {\n                var pair = iter_1[_i];\n                if (Object(pair) !== pair) {\n                    throw new TypeError('iterable for fromEntries should yield objects');\n                }\n                // Consistency with Map: contract is that entry has \"0\" and \"1\" keys, not\n                // that it is an array or iterable.\n                var key = pair[0], val = pair[1];\n                Object.defineProperty(obj, key, {\n                    configurable: true,\n                    enumerable: true,\n                    writable: true,\n                    value: val,\n                });\n            }\n            return obj;\n        };\n    }\n}\nexports[\"default\"] = Polyfill;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL09iamVjdC5mcm9tRW50cmllcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLG9CQUFvQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW1hem9uLWZyZXNoLWRlbW8vLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL09iamVjdC5mcm9tRW50cmllcy5qcz8wNzBiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gUG9seWZpbGwoKSB7XG4gICAgaWYgKCFPYmplY3QuZnJvbUVudHJpZXMpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBwb2x5ZmlsbCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1mcm9tLWVudHJpZXMvYmxvYi9tYWluL3BvbHlmaWxsLmpzXG4gICAgICAgIE9iamVjdC5mcm9tRW50cmllcyA9IGZ1bmN0aW9uIChpdGVyKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGl0ZXJfMSA9IGl0ZXI7IF9pIDwgaXRlcl8xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBwYWlyID0gaXRlcl8xW19pXTtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0KHBhaXIpICE9PSBwYWlyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2l0ZXJhYmxlIGZvciBmcm9tRW50cmllcyBzaG91bGQgeWllbGQgb2JqZWN0cycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBDb25zaXN0ZW5jeSB3aXRoIE1hcDogY29udHJhY3QgaXMgdGhhdCBlbnRyeSBoYXMgXCIwXCIgYW5kIFwiMVwiIGtleXMsIG5vdFxuICAgICAgICAgICAgICAgIC8vIHRoYXQgaXQgaXMgYW4gYXJyYXkgb3IgaXRlcmFibGUuXG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IHBhaXJbMF0sIHZhbCA9IHBhaXJbMV07XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFBvbHlmaWxsO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/utils/Object.fromEntries.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/utils/OutputLogger.js":
/*!************************************************************!*\
  !*** ./node_modules/statsig-js/dist/utils/OutputLogger.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar StatsigSDKOptions_1 = __webpack_require__(/*! ../StatsigSDKOptions */ \"(ssr)/./node_modules/statsig-js/dist/StatsigSDKOptions.js\");\nvar _logger = console;\nvar _logLevel = StatsigSDKOptions_1.LogLevel.WARN;\nvar OutputLogger = /** @class */ (function () {\n    function OutputLogger() {\n    }\n    OutputLogger.getLogger = function () {\n        return _logger;\n    };\n    OutputLogger.debug = function (message) {\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        if (_logLevel !== StatsigSDKOptions_1.LogLevel.NONE) {\n            _logger.debug && _logger.debug.apply(_logger, __spreadArray([\"\".concat(this.LOG_PREFIX, \" \").concat(message)], optionalParams, false));\n        }\n    };\n    OutputLogger.info = function (message) {\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        if (_logLevel === StatsigSDKOptions_1.LogLevel.INFO) {\n            _logger.info.apply(_logger, __spreadArray([\"\".concat(this.LOG_PREFIX, \" \").concat(message)], optionalParams, false));\n        }\n    };\n    OutputLogger.warn = function (message) {\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        if (_logLevel === StatsigSDKOptions_1.LogLevel.WARN) {\n            _logger.warn.apply(_logger, __spreadArray([\"\".concat(this.LOG_PREFIX, \" \").concat(message)], optionalParams, false));\n        }\n    };\n    OutputLogger.error = function (message) {\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        if (_logLevel === StatsigSDKOptions_1.LogLevel.ERROR) {\n            _logger.error.apply(_logger, __spreadArray([\"\".concat(this.LOG_PREFIX, \" \").concat(message)], optionalParams, false));\n        }\n    };\n    OutputLogger.setLogger = function (logger) {\n        _logger = logger;\n    };\n    OutputLogger.setLogLevel = function (logLevel) {\n        _logLevel = logLevel;\n    };\n    OutputLogger.resetLogger = function () {\n        _logger = console;\n        _logLevel = StatsigSDKOptions_1.LogLevel.WARN;\n    };\n    OutputLogger.LOG_PREFIX = '[Statsig]';\n    return OutputLogger;\n}());\nexports[\"default\"] = OutputLogger;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL091dHB1dExvZ2dlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkVBQTZFLE9BQU87QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQSwwQkFBMEIsbUJBQU8sQ0FBQyx1RkFBc0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUJBQXVCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUJBQXVCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUJBQXVCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUJBQXVCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2FtYXpvbi1mcmVzaC1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0YXRzaWctanMvZGlzdC91dGlscy9PdXRwdXRMb2dnZXIuanM/MDlkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbnZhciBTdGF0c2lnU0RLT3B0aW9uc18xID0gcmVxdWlyZShcIi4uL1N0YXRzaWdTREtPcHRpb25zXCIpO1xudmFyIF9sb2dnZXIgPSBjb25zb2xlO1xudmFyIF9sb2dMZXZlbCA9IFN0YXRzaWdTREtPcHRpb25zXzEuTG9nTGV2ZWwuV0FSTjtcbnZhciBPdXRwdXRMb2dnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT3V0cHV0TG9nZ2VyKCkge1xuICAgIH1cbiAgICBPdXRwdXRMb2dnZXIuZ2V0TG9nZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX2xvZ2dlcjtcbiAgICB9O1xuICAgIE91dHB1dExvZ2dlci5kZWJ1ZyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgIHZhciBvcHRpb25hbFBhcmFtcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgb3B0aW9uYWxQYXJhbXNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9sb2dMZXZlbCAhPT0gU3RhdHNpZ1NES09wdGlvbnNfMS5Mb2dMZXZlbC5OT05FKSB7XG4gICAgICAgICAgICBfbG9nZ2VyLmRlYnVnICYmIF9sb2dnZXIuZGVidWcuYXBwbHkoX2xvZ2dlciwgX19zcHJlYWRBcnJheShbXCJcIi5jb25jYXQodGhpcy5MT0dfUFJFRklYLCBcIiBcIikuY29uY2F0KG1lc3NhZ2UpXSwgb3B0aW9uYWxQYXJhbXMsIGZhbHNlKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE91dHB1dExvZ2dlci5pbmZvID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIG9wdGlvbmFsUGFyYW1zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcHRpb25hbFBhcmFtc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2xvZ0xldmVsID09PSBTdGF0c2lnU0RLT3B0aW9uc18xLkxvZ0xldmVsLklORk8pIHtcbiAgICAgICAgICAgIF9sb2dnZXIuaW5mby5hcHBseShfbG9nZ2VyLCBfX3NwcmVhZEFycmF5KFtcIlwiLmNvbmNhdCh0aGlzLkxPR19QUkVGSVgsIFwiIFwiKS5jb25jYXQobWVzc2FnZSldLCBvcHRpb25hbFBhcmFtcywgZmFsc2UpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT3V0cHV0TG9nZ2VyLndhcm4gPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB2YXIgb3B0aW9uYWxQYXJhbXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG9wdGlvbmFsUGFyYW1zW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfbG9nTGV2ZWwgPT09IFN0YXRzaWdTREtPcHRpb25zXzEuTG9nTGV2ZWwuV0FSTikge1xuICAgICAgICAgICAgX2xvZ2dlci53YXJuLmFwcGx5KF9sb2dnZXIsIF9fc3ByZWFkQXJyYXkoW1wiXCIuY29uY2F0KHRoaXMuTE9HX1BSRUZJWCwgXCIgXCIpLmNvbmNhdChtZXNzYWdlKV0sIG9wdGlvbmFsUGFyYW1zLCBmYWxzZSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPdXRwdXRMb2dnZXIuZXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB2YXIgb3B0aW9uYWxQYXJhbXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG9wdGlvbmFsUGFyYW1zW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfbG9nTGV2ZWwgPT09IFN0YXRzaWdTREtPcHRpb25zXzEuTG9nTGV2ZWwuRVJST1IpIHtcbiAgICAgICAgICAgIF9sb2dnZXIuZXJyb3IuYXBwbHkoX2xvZ2dlciwgX19zcHJlYWRBcnJheShbXCJcIi5jb25jYXQodGhpcy5MT0dfUFJFRklYLCBcIiBcIikuY29uY2F0KG1lc3NhZ2UpXSwgb3B0aW9uYWxQYXJhbXMsIGZhbHNlKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE91dHB1dExvZ2dlci5zZXRMb2dnZXIgPSBmdW5jdGlvbiAobG9nZ2VyKSB7XG4gICAgICAgIF9sb2dnZXIgPSBsb2dnZXI7XG4gICAgfTtcbiAgICBPdXRwdXRMb2dnZXIuc2V0TG9nTGV2ZWwgPSBmdW5jdGlvbiAobG9nTGV2ZWwpIHtcbiAgICAgICAgX2xvZ0xldmVsID0gbG9nTGV2ZWw7XG4gICAgfTtcbiAgICBPdXRwdXRMb2dnZXIucmVzZXRMb2dnZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9sb2dnZXIgPSBjb25zb2xlO1xuICAgICAgICBfbG9nTGV2ZWwgPSBTdGF0c2lnU0RLT3B0aW9uc18xLkxvZ0xldmVsLldBUk47XG4gICAgfTtcbiAgICBPdXRwdXRMb2dnZXIuTE9HX1BSRUZJWCA9ICdbU3RhdHNpZ10nO1xuICAgIHJldHVybiBPdXRwdXRMb2dnZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gT3V0cHV0TG9nZ2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/utils/OutputLogger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/utils/Promise.finally.js":
/*!***************************************************************!*\
  !*** ./node_modules/statsig-js/dist/utils/Promise.finally.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n// @ts-nocheck\nfunction Polyfill() {\n    Promise.prototype.finally =\n        Promise.prototype.finally ||\n            {\n                finally: function (fn) {\n                    var onFinally = function (callback) { return Promise.resolve(fn()).then(callback); };\n                    return this.then(function (result) { return onFinally(function () { return result; }); }, function (reason) { return onFinally(function () { return Promise.reject(reason); }); });\n                },\n            }.finally;\n}\nexports[\"default\"] = Polyfill;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL1Byb21pc2UuZmluYWxseS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQ7QUFDMUQseURBQXlELCtCQUErQixnQkFBZ0IsSUFBSSxzQkFBc0IsK0JBQStCLGdDQUFnQyxJQUFJO0FBQ3JNLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2FtYXpvbi1mcmVzaC1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0YXRzaWctanMvZGlzdC91dGlscy9Qcm9taXNlLmZpbmFsbHkuanM/Y2Q4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIEB0cy1ub2NoZWNrXG5mdW5jdGlvbiBQb2x5ZmlsbCgpIHtcbiAgICBQcm9taXNlLnByb3RvdHlwZS5maW5hbGx5ID1cbiAgICAgICAgUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseSB8fFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpbmFsbHk6IGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb25GaW5hbGx5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHJldHVybiBQcm9taXNlLnJlc29sdmUoZm4oKSkudGhlbihjYWxsYmFjayk7IH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgeyByZXR1cm4gb25GaW5hbGx5KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc3VsdDsgfSk7IH0sIGZ1bmN0aW9uIChyZWFzb24pIHsgcmV0dXJuIG9uRmluYWxseShmdW5jdGlvbiAoKSB7IHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pOyB9KTsgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0uZmluYWxseTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFBvbHlmaWxsO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/utils/Promise.finally.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/utils/ResponseVerification.js":
/*!********************************************************************!*\
  !*** ./node_modules/statsig-js/dist/utils/ResponseVerification.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.verifySDKKeyUsed = void 0;\nvar Errors_1 = __webpack_require__(/*! ../Errors */ \"(ssr)/./node_modules/statsig-js/dist/Errors.js\");\nvar Hashing_1 = __webpack_require__(/*! ./Hashing */ \"(ssr)/./node_modules/statsig-js/dist/utils/Hashing.js\");\nfunction verifySDKKeyUsed(json, sdkKey, errorBoundary) {\n    var hashedSDKKeyUsed = json === null || json === void 0 ? void 0 : json.hashed_sdk_key_used;\n    if (hashedSDKKeyUsed != null && hashedSDKKeyUsed !== (0, Hashing_1.djb2Hash)(sdkKey !== null && sdkKey !== void 0 ? sdkKey : '')) {\n        errorBoundary.logError('verifySDKKeyUsed', new Errors_1.StatsigSDKKeyMismatchError('The SDK key provided does not match the one used to generate values.'));\n        return false;\n    }\n    return true;\n}\nexports.verifySDKKeyUsed = verifySDKKeyUsed;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL1Jlc3BvbnNlVmVyaWZpY2F0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixlQUFlLG1CQUFPLENBQUMsaUVBQVc7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FtYXpvbi1mcmVzaC1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0YXRzaWctanMvZGlzdC91dGlscy9SZXNwb25zZVZlcmlmaWNhdGlvbi5qcz9mMjFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52ZXJpZnlTREtLZXlVc2VkID0gdm9pZCAwO1xudmFyIEVycm9yc18xID0gcmVxdWlyZShcIi4uL0Vycm9yc1wiKTtcbnZhciBIYXNoaW5nXzEgPSByZXF1aXJlKFwiLi9IYXNoaW5nXCIpO1xuZnVuY3Rpb24gdmVyaWZ5U0RLS2V5VXNlZChqc29uLCBzZGtLZXksIGVycm9yQm91bmRhcnkpIHtcbiAgICB2YXIgaGFzaGVkU0RLS2V5VXNlZCA9IGpzb24gPT09IG51bGwgfHwganNvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDoganNvbi5oYXNoZWRfc2RrX2tleV91c2VkO1xuICAgIGlmIChoYXNoZWRTREtLZXlVc2VkICE9IG51bGwgJiYgaGFzaGVkU0RLS2V5VXNlZCAhPT0gKDAsIEhhc2hpbmdfMS5kamIySGFzaCkoc2RrS2V5ICE9PSBudWxsICYmIHNka0tleSAhPT0gdm9pZCAwID8gc2RrS2V5IDogJycpKSB7XG4gICAgICAgIGVycm9yQm91bmRhcnkubG9nRXJyb3IoJ3ZlcmlmeVNES0tleVVzZWQnLCBuZXcgRXJyb3JzXzEuU3RhdHNpZ1NES0tleU1pc21hdGNoRXJyb3IoJ1RoZSBTREsga2V5IHByb3ZpZGVkIGRvZXMgbm90IG1hdGNoIHRoZSBvbmUgdXNlZCB0byBnZW5lcmF0ZSB2YWx1ZXMuJykpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy52ZXJpZnlTREtLZXlVc2VkID0gdmVyaWZ5U0RLS2V5VXNlZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/utils/ResponseVerification.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/utils/StatsigAsyncStorage.js":
/*!*******************************************************************!*\
  !*** ./node_modules/statsig-js/dist/utils/StatsigAsyncStorage.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar StatsigAsyncStorage = /** @class */ (function () {\n    function StatsigAsyncStorage() {\n    }\n    StatsigAsyncStorage.getItemAsync = function (key) {\n        var _a;\n        if (StatsigAsyncStorage.asyncStorage) {\n            return (_a = StatsigAsyncStorage.asyncStorage.getItem(key)) !== null && _a !== void 0 ? _a : null;\n        }\n        return Promise.resolve(null);\n    };\n    StatsigAsyncStorage.setItemAsync = function (key, value) {\n        if (StatsigAsyncStorage.asyncStorage) {\n            return StatsigAsyncStorage.asyncStorage.setItem(key, value);\n        }\n        return Promise.resolve();\n    };\n    StatsigAsyncStorage.removeItemAsync = function (key) {\n        if (StatsigAsyncStorage.asyncStorage) {\n            return StatsigAsyncStorage.asyncStorage.removeItem(key);\n        }\n        return Promise.resolve();\n    };\n    return StatsigAsyncStorage;\n}());\nexports[\"default\"] = StatsigAsyncStorage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL1N0YXRzaWdBc3luY1N0b3JhZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2FtYXpvbi1mcmVzaC1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0YXRzaWctanMvZGlzdC91dGlscy9TdGF0c2lnQXN5bmNTdG9yYWdlLmpzPzcyMjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3RhdHNpZ0FzeW5jU3RvcmFnZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdGF0c2lnQXN5bmNTdG9yYWdlKCkge1xuICAgIH1cbiAgICBTdGF0c2lnQXN5bmNTdG9yYWdlLmdldEl0ZW1Bc3luYyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoU3RhdHNpZ0FzeW5jU3RvcmFnZS5hc3luY1N0b3JhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiAoX2EgPSBTdGF0c2lnQXN5bmNTdG9yYWdlLmFzeW5jU3RvcmFnZS5nZXRJdGVtKGtleSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9O1xuICAgIFN0YXRzaWdBc3luY1N0b3JhZ2Uuc2V0SXRlbUFzeW5jID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKFN0YXRzaWdBc3luY1N0b3JhZ2UuYXN5bmNTdG9yYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RhdHNpZ0FzeW5jU3RvcmFnZS5hc3luY1N0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfTtcbiAgICBTdGF0c2lnQXN5bmNTdG9yYWdlLnJlbW92ZUl0ZW1Bc3luYyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKFN0YXRzaWdBc3luY1N0b3JhZ2UuYXN5bmNTdG9yYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RhdHNpZ0FzeW5jU3RvcmFnZS5hc3luY1N0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBTdGF0c2lnQXN5bmNTdG9yYWdlO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFN0YXRzaWdBc3luY1N0b3JhZ2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/utils/StatsigAsyncStorage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/utils/StatsigLocalStorage.js":
/*!*******************************************************************!*\
  !*** ./node_modules/statsig-js/dist/utils/StatsigLocalStorage.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar Constants_1 = __webpack_require__(/*! ./Constants */ \"(ssr)/./node_modules/statsig-js/dist/utils/Constants.js\");\nvar StatsigLocalStorage = /** @class */ (function () {\n    function StatsigLocalStorage() {\n    }\n    StatsigLocalStorage.getItem = function (key) {\n        var _a;\n        try {\n            if (this.isStorageAccessible()) {\n                return window.localStorage.getItem(key);\n            }\n        }\n        catch (e) {\n            // noop\n        }\n        return (_a = this.fallbackSessionCache[key]) !== null && _a !== void 0 ? _a : null;\n    };\n    StatsigLocalStorage.setItem = function (key, value) {\n        try {\n            if (this.isStorageAccessible()) {\n                window.localStorage.setItem(key, value);\n                return;\n            }\n        }\n        catch (e) {\n            // noop\n        }\n        this.fallbackSessionCache[key] = value;\n    };\n    StatsigLocalStorage.removeItem = function (key) {\n        try {\n            if (this.isStorageAccessible()) {\n                window.localStorage.removeItem(key);\n                return;\n            }\n        }\n        catch (e) {\n            // noop\n        }\n        delete this.fallbackSessionCache[key];\n    };\n    StatsigLocalStorage.cleanup = function () {\n        try {\n            if (this.isStorageAccessible(true) // clean up all storage keys if this session sets disabled\n            ) {\n                for (var key in window.localStorage) {\n                    if (typeof window.localStorage[key] !== 'string') {\n                        continue;\n                    }\n                    if (key == null) {\n                        continue;\n                    }\n                    // if local storage is disabled on a subsequent session on this device,\n                    // lets delete everything we already have stored in local storage\n                    if (!this.disabled && key in Constants_1.LOCAL_STORAGE_KEYS) {\n                        continue;\n                    }\n                    if (!this.disabled &&\n                        key.substring(0, Constants_1.STORAGE_PREFIX.length) !== Constants_1.STORAGE_PREFIX) {\n                        continue;\n                    }\n                    window.localStorage.removeItem(key);\n                }\n            }\n        }\n        catch (e) {\n            // noop\n        }\n    };\n    StatsigLocalStorage.isStorageAccessible = function (ignoreDisabledOption) {\n        if (ignoreDisabledOption === void 0) { ignoreDisabledOption = false; }\n        if (this.canAccessStorageAccessible == null) {\n            this.canAccessStorageAccessible =\n                typeof Storage !== 'undefined' &&\n                    typeof window !== 'undefined' &&\n                    window != null &&\n                    window.localStorage != null;\n        }\n        var canAccess = this.canAccessStorageAccessible;\n        if (ignoreDisabledOption) {\n            return canAccess;\n        }\n        return !this.disabled && canAccess;\n    };\n    StatsigLocalStorage.disabled = false;\n    StatsigLocalStorage.fallbackSessionCache = {};\n    StatsigLocalStorage.canAccessStorageAccessible = null;\n    return StatsigLocalStorage;\n}());\nexports[\"default\"] = StatsigLocalStorage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL1N0YXRzaWdMb2NhbFN0b3JhZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCLG1CQUFPLENBQUMsNEVBQWE7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW1hem9uLWZyZXNoLWRlbW8vLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL1N0YXRzaWdMb2NhbFN0b3JhZ2UuanM/NDA1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL0NvbnN0YW50c1wiKTtcbnZhciBTdGF0c2lnTG9jYWxTdG9yYWdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0YXRzaWdMb2NhbFN0b3JhZ2UoKSB7XG4gICAgfVxuICAgIFN0YXRzaWdMb2NhbFN0b3JhZ2UuZ2V0SXRlbSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNTdG9yYWdlQWNjZXNzaWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBub29wXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuZmFsbGJhY2tTZXNzaW9uQ2FjaGVba2V5XSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbDtcbiAgICB9O1xuICAgIFN0YXRzaWdMb2NhbFN0b3JhZ2Uuc2V0SXRlbSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1N0b3JhZ2VBY2Nlc3NpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBub29wXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mYWxsYmFja1Nlc3Npb25DYWNoZVtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgICBTdGF0c2lnTG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1N0b3JhZ2VBY2Nlc3NpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgdGhpcy5mYWxsYmFja1Nlc3Npb25DYWNoZVtrZXldO1xuICAgIH07XG4gICAgU3RhdHNpZ0xvY2FsU3RvcmFnZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNTdG9yYWdlQWNjZXNzaWJsZSh0cnVlKSAvLyBjbGVhbiB1cCBhbGwgc3RvcmFnZSBrZXlzIGlmIHRoaXMgc2Vzc2lvbiBzZXRzIGRpc2FibGVkXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gd2luZG93LmxvY2FsU3RvcmFnZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5sb2NhbFN0b3JhZ2Vba2V5XSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgbG9jYWwgc3RvcmFnZSBpcyBkaXNhYmxlZCBvbiBhIHN1YnNlcXVlbnQgc2Vzc2lvbiBvbiB0aGlzIGRldmljZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gbGV0cyBkZWxldGUgZXZlcnl0aGluZyB3ZSBhbHJlYWR5IGhhdmUgc3RvcmVkIGluIGxvY2FsIHN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVkICYmIGtleSBpbiBDb25zdGFudHNfMS5MT0NBTF9TVE9SQUdFX0tFWVMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAga2V5LnN1YnN0cmluZygwLCBDb25zdGFudHNfMS5TVE9SQUdFX1BSRUZJWC5sZW5ndGgpICE9PSBDb25zdGFudHNfMS5TVE9SQUdFX1BSRUZJWCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBub29wXG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN0YXRzaWdMb2NhbFN0b3JhZ2UuaXNTdG9yYWdlQWNjZXNzaWJsZSA9IGZ1bmN0aW9uIChpZ25vcmVEaXNhYmxlZE9wdGlvbikge1xuICAgICAgICBpZiAoaWdub3JlRGlzYWJsZWRPcHRpb24gPT09IHZvaWQgMCkgeyBpZ25vcmVEaXNhYmxlZE9wdGlvbiA9IGZhbHNlOyB9XG4gICAgICAgIGlmICh0aGlzLmNhbkFjY2Vzc1N0b3JhZ2VBY2Nlc3NpYmxlID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuY2FuQWNjZXNzU3RvcmFnZUFjY2Vzc2libGUgPVxuICAgICAgICAgICAgICAgIHR5cGVvZiBTdG9yYWdlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlICE9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbkFjY2VzcyA9IHRoaXMuY2FuQWNjZXNzU3RvcmFnZUFjY2Vzc2libGU7XG4gICAgICAgIGlmIChpZ25vcmVEaXNhYmxlZE9wdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGNhbkFjY2VzcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIXRoaXMuZGlzYWJsZWQgJiYgY2FuQWNjZXNzO1xuICAgIH07XG4gICAgU3RhdHNpZ0xvY2FsU3RvcmFnZS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIFN0YXRzaWdMb2NhbFN0b3JhZ2UuZmFsbGJhY2tTZXNzaW9uQ2FjaGUgPSB7fTtcbiAgICBTdGF0c2lnTG9jYWxTdG9yYWdlLmNhbkFjY2Vzc1N0b3JhZ2VBY2Nlc3NpYmxlID0gbnVsbDtcbiAgICByZXR1cm4gU3RhdHNpZ0xvY2FsU3RvcmFnZTtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTdGF0c2lnTG9jYWxTdG9yYWdlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/utils/StatsigLocalStorage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/utils/Timing.js":
/*!******************************************************!*\
  !*** ./node_modules/statsig-js/dist/utils/Timing.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.difference = exports.now = void 0;\nfunction now(opts) {\n    if (opts === void 0) { opts = { withPrecision: false }; }\n    if (typeof performance === 'undefined' || !performance) {\n        return Date.now();\n    }\n    if (!opts.withPrecision) {\n        return performance.now() | 0;\n    }\n    return performance.now();\n}\nexports.now = now;\nfunction difference(time) {\n    return now() - time;\n}\nexports.difference = difference;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL1RpbWluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsR0FBRyxXQUFXO0FBQ2hDO0FBQ0EsMkJBQTJCLFNBQVM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbWF6b24tZnJlc2gtZGVtby8uL25vZGVfbW9kdWxlcy9zdGF0c2lnLWpzL2Rpc3QvdXRpbHMvVGltaW5nLmpzPzFjMWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRpZmZlcmVuY2UgPSBleHBvcnRzLm5vdyA9IHZvaWQgMDtcbmZ1bmN0aW9uIG5vdyhvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkgeyBvcHRzID0geyB3aXRoUHJlY2lzaW9uOiBmYWxzZSB9OyB9XG4gICAgaWYgKHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gJ3VuZGVmaW5lZCcgfHwgIXBlcmZvcm1hbmNlKSB7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdygpO1xuICAgIH1cbiAgICBpZiAoIW9wdHMud2l0aFByZWNpc2lvbikge1xuICAgICAgICByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCkgfCAwO1xuICAgIH1cbiAgICByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7XG59XG5leHBvcnRzLm5vdyA9IG5vdztcbmZ1bmN0aW9uIGRpZmZlcmVuY2UodGltZSkge1xuICAgIHJldHVybiBub3coKSAtIHRpbWU7XG59XG5leHBvcnRzLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/utils/Timing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/statsig-js/dist/utils/parseError.js":
/*!**********************************************************!*\
  !*** ./node_modules/statsig-js/dist/utils/parseError.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nfunction parseError(error) {\n    var unwrapped = (error !== null && error !== void 0 ? error : Error('[Statsig] Error was empty'));\n    var isError = unwrapped instanceof Error;\n    var name = isError ? unwrapped.name : 'No Name';\n    var message = isError ? unwrapped.message : undefined;\n    var trace = isError ? unwrapped.stack : getDescription(unwrapped);\n    return { name: name, message: message, trace: trace };\n}\nexports[\"default\"] = parseError;\nfunction getDescription(obj) {\n    try {\n        return JSON.stringify(obj);\n    }\n    catch (_a) {\n        return '[Statsig] Failed to get string for error.';\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL3BhcnNlRXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0Esa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW1hem9uLWZyZXNoLWRlbW8vLi9ub2RlX21vZHVsZXMvc3RhdHNpZy1qcy9kaXN0L3V0aWxzL3BhcnNlRXJyb3IuanM/N2IzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIHBhcnNlRXJyb3IoZXJyb3IpIHtcbiAgICB2YXIgdW53cmFwcGVkID0gKGVycm9yICE9PSBudWxsICYmIGVycm9yICE9PSB2b2lkIDAgPyBlcnJvciA6IEVycm9yKCdbU3RhdHNpZ10gRXJyb3Igd2FzIGVtcHR5JykpO1xuICAgIHZhciBpc0Vycm9yID0gdW53cmFwcGVkIGluc3RhbmNlb2YgRXJyb3I7XG4gICAgdmFyIG5hbWUgPSBpc0Vycm9yID8gdW53cmFwcGVkLm5hbWUgOiAnTm8gTmFtZSc7XG4gICAgdmFyIG1lc3NhZ2UgPSBpc0Vycm9yID8gdW53cmFwcGVkLm1lc3NhZ2UgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHRyYWNlID0gaXNFcnJvciA/IHVud3JhcHBlZC5zdGFjayA6IGdldERlc2NyaXB0aW9uKHVud3JhcHBlZCk7XG4gICAgcmV0dXJuIHsgbmFtZTogbmFtZSwgbWVzc2FnZTogbWVzc2FnZSwgdHJhY2U6IHRyYWNlIH07XG59XG5leHBvcnRzLmRlZmF1bHQgPSBwYXJzZUVycm9yO1xuZnVuY3Rpb24gZ2V0RGVzY3JpcHRpb24ob2JqKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gJ1tTdGF0c2lnXSBGYWlsZWQgdG8gZ2V0IHN0cmluZyBmb3IgZXJyb3IuJztcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/statsig-js/dist/utils/parseError.js\n");

/***/ })

};
;